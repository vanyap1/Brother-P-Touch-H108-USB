
SAMD21_PrinterController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004bd0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000048c  20000000  00004bd0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002498  2000048c  0000505c  0002048c  2**2
                  ALLOC
  3 .stack        00001004  20002924  000074f4  0002048c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002048c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204b4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004174a  00000000  00000000  0002050d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004727  00000000  00000000  00061c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001aca3  00000000  00000000  0006637e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010b8  00000000  00000000  00081021  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000012f8  00000000  00000000  000820d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009910  00000000  00000000  000833d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015541  00000000  00000000  0008cce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090734  00000000  00000000  000a2222  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002ef0  00000000  00000000  00132958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
struct i2c_m_sync_desc I2C_RTC;

struct i2c_m_sync_desc I2C_EXT;

void IRQ_CONTROLLER_init(void)
{
       0:	28 39 00 20 19 01 00 00 15 01 00 00 15 01 00 00     (9. ............
	...

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
	tmp &= ~PORT_PINCFG_PMUXEN;
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
	tmp &= ~PORT_PMUX_PMUXO_Msk;
      4c:	15 01 00 00 fd 0c 00 00 15 01 00 00 15 01 00 00     ................
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
      5c:	8d 2b 00 00 15 01 00 00 15 01 00 00 15 01 00 00     .+..............
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
	tmp &= ~PORT_PMUX_PMUXE_Msk;
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000048c 	.word	0x2000048c
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
      d4:	00000000 	.word	0x00000000
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
      d8:	00004bd0 	.word	0x00004bd0

000000dc <frame_dummy>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
	tmp &= ~PORT_PMUX_PMUXE_Msk;
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB30, PINMUX_PB30A_EIC_EXTINT14);

	ext_irq_init();
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
}
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000490 	.word	0x20000490
     108:	00004bd0 	.word	0x00004bd0
     10c:	00004bd0 	.word	0x00004bd0
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
     11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
     11e:	429a      	cmp	r2, r3
     120:	d009      	beq.n	136 <Reset_Handler+0x1e>
     122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
     124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     128:	6811      	ldr	r1, [r2, #0]
     12a:	6019      	str	r1, [r3, #0]
     12c:	3304      	adds	r3, #4
     12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	428b      	cmp	r3, r1
     134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
     138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
     13a:	2200      	movs	r2, #0
     13c:	601a      	str	r2, [r3, #0]
     13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
     142:	4293      	cmp	r3, r2
     144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
     148:	21ff      	movs	r1, #255	; 0xff
     14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
     14c:	438b      	bics	r3, r1
     14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     150:	39fd      	subs	r1, #253	; 0xfd
     152:	2390      	movs	r3, #144	; 0x90
     154:	005b      	lsls	r3, r3, #1
     156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
     158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
     15c:	78d3      	ldrb	r3, [r2, #3]
     15e:	2503      	movs	r5, #3
     160:	43ab      	bics	r3, r5
     162:	2402      	movs	r4, #2
     164:	4323      	orrs	r3, r4
     166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	270c      	movs	r7, #12
     16c:	43bb      	bics	r3, r7
     16e:	2608      	movs	r6, #8
     170:	4333      	orrs	r3, r6
     172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	2230      	movs	r2, #48	; 0x30
     17a:	4390      	bics	r0, r2
     17c:	2220      	movs	r2, #32
     17e:	4310      	orrs	r0, r2
     180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     182:	7b99      	ldrb	r1, [r3, #14]
     184:	43b9      	bics	r1, r7
     186:	4331      	orrs	r1, r6
     188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     18a:	7b9a      	ldrb	r2, [r3, #14]
     18c:	43aa      	bics	r2, r5
     18e:	4322      	orrs	r2, r4
     190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
     194:	6851      	ldr	r1, [r2, #4]
     196:	2380      	movs	r3, #128	; 0x80
     198:	430b      	orrs	r3, r1
     19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     19c:	f004 fab0 	bl	4700 <__libc_init_array>
        main();
     1a0:	f003 faf0 	bl	3784 <main>
     1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	00004bd0 	.word	0x00004bd0
     1ac:	20000000 	.word	0x20000000
     1b0:	2000048c 	.word	0x2000048c
     1b4:	2000048c 	.word	0x2000048c
     1b8:	20002924 	.word	0x20002924
     1bc:	e000ed00 	.word	0xe000ed00
     1c0:	00000000 	.word	0x00000000
     1c4:	41007000 	.word	0x41007000
     1c8:	41005000 	.word	0x41005000
     1cc:	41004800 	.word	0x41004800
     1d0:	41004000 	.word	0x41004000

000001d4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     1d4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     1d8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     1da:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1dc:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     1e0:	4770      	bx	lr

000001e2 <atomic_leave_critical>:
     1e2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     1e6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     1e8:	f383 8810 	msr	PRIMASK, r3
}
     1ec:	4770      	bx	lr
	...

000001f0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     1f0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     1f2:	4b04      	ldr	r3, [pc, #16]	; (204 <delay_us+0x14>)
     1f4:	681c      	ldr	r4, [r3, #0]
     1f6:	f000 fce1 	bl	bbc <_get_cycles_for_us>
     1fa:	0001      	movs	r1, r0
     1fc:	0020      	movs	r0, r4
     1fe:	f000 fcf1 	bl	be4 <_delay_cycles>
}
     202:	bd10      	pop	{r4, pc}
     204:	200004a8 	.word	0x200004a8

00000208 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     208:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     20a:	4b04      	ldr	r3, [pc, #16]	; (21c <delay_ms+0x14>)
     20c:	681c      	ldr	r4, [r3, #0]
     20e:	f000 fcde 	bl	bce <_get_cycles_for_ms>
     212:	0001      	movs	r1, r0
     214:	0020      	movs	r0, r4
     216:	f000 fce5 	bl	be4 <_delay_cycles>
}
     21a:	bd10      	pop	{r4, pc}
     21c:	200004a8 	.word	0x200004a8

00000220 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     220:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     222:	2504      	movs	r5, #4
     224:	2400      	movs	r4, #0

	while (upper >= lower) {
     226:	e007      	b.n	238 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     228:	4a0d      	ldr	r2, [pc, #52]	; (260 <process_ext_irq+0x40>)
     22a:	58b3      	ldr	r3, [r6, r2]
     22c:	2b00      	cmp	r3, #0
     22e:	d000      	beq.n	232 <process_ext_irq+0x12>
				ext_irqs[middle].cb();
     230:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     232:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     234:	3a01      	subs	r2, #1
     236:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     238:	42ac      	cmp	r4, r5
     23a:	d8fa      	bhi.n	232 <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
     23c:	192b      	adds	r3, r5, r4
     23e:	105b      	asrs	r3, r3, #1
     240:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     242:	2a03      	cmp	r2, #3
     244:	d8f5      	bhi.n	232 <process_ext_irq+0x12>
     246:	21ff      	movs	r1, #255	; 0xff
     248:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     24a:	00de      	lsls	r6, r3, #3
     24c:	4904      	ldr	r1, [pc, #16]	; (260 <process_ext_irq+0x40>)
     24e:	1989      	adds	r1, r1, r6
     250:	6849      	ldr	r1, [r1, #4]
     252:	4281      	cmp	r1, r0
     254:	d0e8      	beq.n	228 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     256:	d2ed      	bcs.n	234 <process_ext_irq+0x14>
			lower = middle + 1;
     258:	3201      	adds	r2, #1
     25a:	b2d4      	uxtb	r4, r2
     25c:	e7ec      	b.n	238 <process_ext_irq+0x18>
     25e:	46c0      	nop			; (mov r8, r8)
     260:	200004ac 	.word	0x200004ac

00000264 <ext_irq_init>:
{
     264:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     266:	2300      	movs	r3, #0
     268:	e009      	b.n	27e <ext_irq_init+0x1a>
		ext_irqs[i].pin = 0xFFFFFFFF;
     26a:	4a08      	ldr	r2, [pc, #32]	; (28c <ext_irq_init+0x28>)
     26c:	00d9      	lsls	r1, r3, #3
     26e:	1850      	adds	r0, r2, r1
     270:	2401      	movs	r4, #1
     272:	4264      	negs	r4, r4
     274:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
     276:	2000      	movs	r0, #0
     278:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     27a:	3301      	adds	r3, #1
     27c:	b29b      	uxth	r3, r3
     27e:	2b03      	cmp	r3, #3
     280:	d9f3      	bls.n	26a <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     282:	4803      	ldr	r0, [pc, #12]	; (290 <ext_irq_init+0x2c>)
     284:	f000 fcc4 	bl	c10 <_ext_irq_init>
}
     288:	bd10      	pop	{r4, pc}
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	200004ac 	.word	0x200004ac
     290:	00000221 	.word	0x00000221

00000294 <ext_irq_register>:
{
     294:	b5f0      	push	{r4, r5, r6, r7, lr}
     296:	46d6      	mov	lr, sl
     298:	464f      	mov	r7, r9
     29a:	4646      	mov	r6, r8
     29c:	b5c0      	push	{r6, r7, lr}
     29e:	b084      	sub	sp, #16
	uint8_t i = 0, j = 0;
     2a0:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
     2a2:	2b03      	cmp	r3, #3
     2a4:	d80c      	bhi.n	2c0 <ext_irq_register+0x2c>
		if (ext_irqs[i].pin == pin) {
     2a6:	00dc      	lsls	r4, r3, #3
     2a8:	4a32      	ldr	r2, [pc, #200]	; (374 <ext_irq_register+0xe0>)
     2aa:	1912      	adds	r2, r2, r4
     2ac:	6852      	ldr	r2, [r2, #4]
     2ae:	4282      	cmp	r2, r0
     2b0:	d002      	beq.n	2b8 <ext_irq_register+0x24>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     2b2:	3301      	adds	r3, #1
     2b4:	b2db      	uxtb	r3, r3
     2b6:	e7f4      	b.n	2a2 <ext_irq_register+0xe>
			ext_irqs[i].cb = cb;
     2b8:	4b2e      	ldr	r3, [pc, #184]	; (374 <ext_irq_register+0xe0>)
     2ba:	50e1      	str	r1, [r4, r3]
			found          = true;
     2bc:	2601      	movs	r6, #1
			break;
     2be:	e000      	b.n	2c2 <ext_irq_register+0x2e>
	bool    found = false;
     2c0:	2600      	movs	r6, #0
	if (NULL == cb) {
     2c2:	2900      	cmp	r1, #0
     2c4:	d00c      	beq.n	2e0 <ext_irq_register+0x4c>
	if (!found) {
     2c6:	2e00      	cmp	r6, #0
     2c8:	d142      	bne.n	350 <ext_irq_register+0xbc>
     2ca:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     2cc:	2b03      	cmp	r3, #3
     2ce:	d811      	bhi.n	2f4 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
     2d0:	00da      	lsls	r2, r3, #3
     2d2:	4d28      	ldr	r5, [pc, #160]	; (374 <ext_irq_register+0xe0>)
     2d4:	5952      	ldr	r2, [r2, r5]
     2d6:	2a00      	cmp	r2, #0
     2d8:	d007      	beq.n	2ea <ext_irq_register+0x56>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     2da:	3301      	adds	r3, #1
     2dc:	b2db      	uxtb	r3, r3
     2de:	e7f5      	b.n	2cc <ext_irq_register+0x38>
		if (!found) {
     2e0:	2e00      	cmp	r6, #0
     2e2:	d040      	beq.n	366 <ext_irq_register+0xd2>
		return _ext_irq_enable(pin, false);
     2e4:	f000 fce0 	bl	ca8 <_ext_irq_enable>
     2e8:	e037      	b.n	35a <ext_irq_register+0xc6>
				ext_irqs[i].cb  = cb;
     2ea:	00dc      	lsls	r4, r3, #3
     2ec:	5161      	str	r1, [r4, r5]
				ext_irqs[i].pin = pin;
     2ee:	192c      	adds	r4, r5, r4
     2f0:	6060      	str	r0, [r4, #4]
				found           = true;
     2f2:	2601      	movs	r6, #1
     2f4:	2200      	movs	r2, #0
     2f6:	e001      	b.n	2fc <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     2f8:	3201      	adds	r2, #1
     2fa:	b2d2      	uxtb	r2, r2
     2fc:	2a03      	cmp	r2, #3
     2fe:	d827      	bhi.n	350 <ext_irq_register+0xbc>
     300:	2b03      	cmp	r3, #3
     302:	d825      	bhi.n	350 <ext_irq_register+0xbc>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     304:	9301      	str	r3, [sp, #4]
     306:	491b      	ldr	r1, [pc, #108]	; (374 <ext_irq_register+0xe0>)
     308:	00dc      	lsls	r4, r3, #3
     30a:	190c      	adds	r4, r1, r4
     30c:	6867      	ldr	r7, [r4, #4]
     30e:	00d4      	lsls	r4, r2, #3
     310:	1909      	adds	r1, r1, r4
     312:	6849      	ldr	r1, [r1, #4]
     314:	428f      	cmp	r7, r1
     316:	d2ef      	bcs.n	2f8 <ext_irq_register+0x64>
     318:	1c4c      	adds	r4, r1, #1
     31a:	d0ed      	beq.n	2f8 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
     31c:	a902      	add	r1, sp, #8
     31e:	468c      	mov	ip, r1
     320:	4c14      	ldr	r4, [pc, #80]	; (374 <ext_irq_register+0xe0>)
     322:	46a0      	mov	r8, r4
     324:	00d4      	lsls	r4, r2, #3
     326:	46a1      	mov	r9, r4
     328:	4644      	mov	r4, r8
     32a:	444c      	add	r4, r9
     32c:	4665      	mov	r5, ip
     32e:	cc82      	ldmia	r4!, {r1, r7}
     330:	c582      	stmia	r5!, {r1, r7}
				ext_irqs[j] = ext_irqs[i];
     332:	9901      	ldr	r1, [sp, #4]
     334:	00c9      	lsls	r1, r1, #3
     336:	468a      	mov	sl, r1
     338:	4649      	mov	r1, r9
     33a:	4441      	add	r1, r8
     33c:	4644      	mov	r4, r8
     33e:	4454      	add	r4, sl
     340:	cca0      	ldmia	r4!, {r5, r7}
     342:	c1a0      	stmia	r1!, {r5, r7}
				ext_irqs[i] = tmp;
     344:	4645      	mov	r5, r8
     346:	4455      	add	r5, sl
     348:	4661      	mov	r1, ip
     34a:	c990      	ldmia	r1!, {r4, r7}
     34c:	c590      	stmia	r5!, {r4, r7}
     34e:	e7d3      	b.n	2f8 <ext_irq_register+0x64>
	if (!found) {
     350:	2e00      	cmp	r6, #0
     352:	d00b      	beq.n	36c <ext_irq_register+0xd8>
	return _ext_irq_enable(pin, true);
     354:	2101      	movs	r1, #1
     356:	f000 fca7 	bl	ca8 <_ext_irq_enable>
}
     35a:	b004      	add	sp, #16
     35c:	bc1c      	pop	{r2, r3, r4}
     35e:	4690      	mov	r8, r2
     360:	4699      	mov	r9, r3
     362:	46a2      	mov	sl, r4
     364:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
     366:	200d      	movs	r0, #13
     368:	4240      	negs	r0, r0
     36a:	e7f6      	b.n	35a <ext_irq_register+0xc6>
		return ERR_INVALID_ARG;
     36c:	200d      	movs	r0, #13
     36e:	4240      	negs	r0, r0
     370:	e7f3      	b.n	35a <ext_irq_register+0xc6>
     372:	46c0      	nop			; (mov r8, r8)
     374:	200004ac 	.word	0x200004ac

00000378 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     378:	b510      	push	{r4, lr}
     37a:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     37c:	3814      	subs	r0, #20
     37e:	8b84      	ldrh	r4, [r0, #28]
     380:	ab01      	add	r3, sp, #4
     382:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     384:	0014      	movs	r4, r2
     386:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     388:	4a06      	ldr	r2, [pc, #24]	; (3a4 <i2c_m_sync_write+0x2c>)
     38a:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     38c:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     38e:	0019      	movs	r1, r3
     390:	f000 ff62 	bl	1258 <_i2c_m_sync_transfer>

	if (ret) {
     394:	2800      	cmp	r0, #0
     396:	d102      	bne.n	39e <i2c_m_sync_write+0x26>
		return ret;
	}

	return n;
}
     398:	0020      	movs	r0, r4
     39a:	b004      	add	sp, #16
     39c:	bd10      	pop	{r4, pc}
		return ret;
     39e:	0004      	movs	r4, r0
     3a0:	e7fa      	b.n	398 <i2c_m_sync_write+0x20>
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	ffff8000 	.word	0xffff8000

000003a8 <i2c_m_sync_read>:
{
     3a8:	b510      	push	{r4, lr}
     3aa:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     3ac:	3814      	subs	r0, #20
     3ae:	8b84      	ldrh	r4, [r0, #28]
     3b0:	ab01      	add	r3, sp, #4
     3b2:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     3b4:	0014      	movs	r4, r2
     3b6:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     3b8:	4a06      	ldr	r2, [pc, #24]	; (3d4 <i2c_m_sync_read+0x2c>)
     3ba:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     3bc:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     3be:	0019      	movs	r1, r3
     3c0:	f000 ff4a 	bl	1258 <_i2c_m_sync_transfer>
	if (ret) {
     3c4:	2800      	cmp	r0, #0
     3c6:	d102      	bne.n	3ce <i2c_m_sync_read+0x26>
}
     3c8:	0020      	movs	r0, r4
     3ca:	b004      	add	sp, #16
     3cc:	bd10      	pop	{r4, pc}
		return ret;
     3ce:	0004      	movs	r4, r0
     3d0:	e7fa      	b.n	3c8 <i2c_m_sync_read+0x20>
     3d2:	46c0      	nop			; (mov r8, r8)
     3d4:	ffff8001 	.word	0xffff8001

000003d8 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     3d8:	b570      	push	{r4, r5, r6, lr}
     3da:	0004      	movs	r4, r0
     3dc:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     3de:	1e43      	subs	r3, r0, #1
     3e0:	4198      	sbcs	r0, r3
     3e2:	b2c0      	uxtb	r0, r0
     3e4:	225e      	movs	r2, #94	; 0x5e
     3e6:	4907      	ldr	r1, [pc, #28]	; (404 <i2c_m_sync_init+0x2c>)
     3e8:	f000 fbbc 	bl	b64 <assert>

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     3ec:	0029      	movs	r1, r5
     3ee:	0020      	movs	r0, r4
     3f0:	f000 fee0 	bl	11b4 <_i2c_m_sync_init>
	if (init_status) {
     3f4:	2800      	cmp	r0, #0
     3f6:	d103      	bne.n	400 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     3f8:	4b03      	ldr	r3, [pc, #12]	; (408 <i2c_m_sync_init+0x30>)
     3fa:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     3fc:	4b03      	ldr	r3, [pc, #12]	; (40c <i2c_m_sync_init+0x34>)
     3fe:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     400:	bd70      	pop	{r4, r5, r6, pc}
     402:	46c0      	nop			; (mov r8, r8)
     404:	000049b8 	.word	0x000049b8
     408:	000003a9 	.word	0x000003a9
     40c:	00000379 	.word	0x00000379

00000410 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     410:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     412:	f000 fee3 	bl	11dc <_i2c_m_sync_enable>
}
     416:	bd10      	pop	{r4, pc}

00000418 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     418:	0589      	lsls	r1, r1, #22
     41a:	0d89      	lsrs	r1, r1, #22
     41c:	2380      	movs	r3, #128	; 0x80
     41e:	00db      	lsls	r3, r3, #3
     420:	401a      	ands	r2, r3
     422:	430a      	orrs	r2, r1
     424:	8382      	strh	r2, [r0, #28]
}
     426:	0010      	movs	r0, r2
     428:	4770      	bx	lr
	...

0000042c <i2c_m_sync_cmd_read>:

/**
 * \brief Sync version of i2c read command
 */
int32_t i2c_m_sync_cmd_read(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *buffer, uint8_t length)
{
     42c:	b570      	push	{r4, r5, r6, lr}
     42e:	b086      	sub	sp, #24
     430:	0004      	movs	r4, r0
     432:	0016      	movs	r6, r2
     434:	001d      	movs	r5, r3
     436:	466b      	mov	r3, sp
     438:	71d9      	strb	r1, [r3, #7]
     43a:	3307      	adds	r3, #7
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
     43c:	8b82      	ldrh	r2, [r0, #28]
     43e:	a903      	add	r1, sp, #12
     440:	800a      	strh	r2, [r1, #0]
	msg.len    = 1;
     442:	2201      	movs	r2, #1
     444:	604a      	str	r2, [r1, #4]
	msg.flags  = 0;
     446:	2200      	movs	r2, #0
     448:	804a      	strh	r2, [r1, #2]
	msg.buffer = &reg;
     44a:	608b      	str	r3, [r1, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     44c:	f000 ff04 	bl	1258 <_i2c_m_sync_transfer>

	if (ret != 0) {
     450:	2800      	cmp	r0, #0
     452:	d001      	beq.n	458 <i2c_m_sync_cmd_read+0x2c>
		/* error occurred */
		return ret;
	}

	return ERR_NONE;
}
     454:	b006      	add	sp, #24
     456:	bd70      	pop	{r4, r5, r6, pc}
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     458:	a903      	add	r1, sp, #12
     45a:	4b04      	ldr	r3, [pc, #16]	; (46c <i2c_m_sync_cmd_read+0x40>)
     45c:	804b      	strh	r3, [r1, #2]
	msg.buffer = buffer;
     45e:	608e      	str	r6, [r1, #8]
	msg.len    = length;
     460:	604d      	str	r5, [r1, #4]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     462:	0020      	movs	r0, r4
     464:	f000 fef8 	bl	1258 <_i2c_m_sync_transfer>
     468:	e7f4      	b.n	454 <i2c_m_sync_cmd_read+0x28>
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	ffff8001 	.word	0xffff8001

00000470 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     470:	3014      	adds	r0, #20
     472:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     474:	2000      	movs	r0, #0
     476:	4770      	bx	lr

00000478 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	0004      	movs	r4, r0
     47c:	000d      	movs	r5, r1
     47e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     480:	2800      	cmp	r0, #0
     482:	d00e      	beq.n	4a2 <io_write+0x2a>
     484:	2900      	cmp	r1, #0
     486:	d00a      	beq.n	49e <io_write+0x26>
     488:	2001      	movs	r0, #1
     48a:	2234      	movs	r2, #52	; 0x34
     48c:	4906      	ldr	r1, [pc, #24]	; (4a8 <io_write+0x30>)
     48e:	f000 fb69 	bl	b64 <assert>
	return io_descr->write(io_descr, buf, length);
     492:	6823      	ldr	r3, [r4, #0]
     494:	0032      	movs	r2, r6
     496:	0029      	movs	r1, r5
     498:	0020      	movs	r0, r4
     49a:	4798      	blx	r3
}
     49c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     49e:	2000      	movs	r0, #0
     4a0:	e7f3      	b.n	48a <io_write+0x12>
     4a2:	2000      	movs	r0, #0
     4a4:	e7f1      	b.n	48a <io_write+0x12>
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	000049d4 	.word	0x000049d4

000004ac <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     4ac:	b570      	push	{r4, r5, r6, lr}
     4ae:	0004      	movs	r4, r0
     4b0:	000d      	movs	r5, r1
     4b2:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     4b4:	2800      	cmp	r0, #0
     4b6:	d00e      	beq.n	4d6 <io_read+0x2a>
     4b8:	2900      	cmp	r1, #0
     4ba:	d00a      	beq.n	4d2 <io_read+0x26>
     4bc:	2001      	movs	r0, #1
     4be:	223d      	movs	r2, #61	; 0x3d
     4c0:	4906      	ldr	r1, [pc, #24]	; (4dc <io_read+0x30>)
     4c2:	f000 fb4f 	bl	b64 <assert>
	return io_descr->read(io_descr, buf, length);
     4c6:	6863      	ldr	r3, [r4, #4]
     4c8:	0032      	movs	r2, r6
     4ca:	0029      	movs	r1, r5
     4cc:	0020      	movs	r0, r4
     4ce:	4798      	blx	r3
}
     4d0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     4d2:	2000      	movs	r0, #0
     4d4:	e7f3      	b.n	4be <io_read+0x12>
     4d6:	2000      	movs	r0, #0
     4d8:	e7f1      	b.n	4be <io_read+0x12>
     4da:	46c0      	nop			; (mov r8, r8)
     4dc:	000049d4 	.word	0x000049d4

000004e0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     4e0:	b570      	push	{r4, r5, r6, lr}
     4e2:	0004      	movs	r4, r0
     4e4:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     4e6:	2800      	cmp	r0, #0
     4e8:	d017      	beq.n	51a <spi_m_sync_init+0x3a>
     4ea:	2900      	cmp	r1, #0
     4ec:	d013      	beq.n	516 <spi_m_sync_init+0x36>
     4ee:	2001      	movs	r0, #1
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	490b      	ldr	r1, [pc, #44]	; (520 <spi_m_sync_init+0x40>)
     4f4:	f000 fb36 	bl	b64 <assert>
	spi->dev.prvt = (void *)hw;
     4f8:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     4fa:	1d20      	adds	r0, r4, #4
     4fc:	0029      	movs	r1, r5
     4fe:	f000 ffe7 	bl	14d0 <_spi_m_sync_init>

	if (rc < 0) {
     502:	2800      	cmp	r0, #0
     504:	db06      	blt.n	514 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     506:	4b07      	ldr	r3, [pc, #28]	; (524 <spi_m_sync_init+0x44>)
     508:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     50a:	4b07      	ldr	r3, [pc, #28]	; (528 <spi_m_sync_init+0x48>)
     50c:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     50e:	4b07      	ldr	r3, [pc, #28]	; (52c <spi_m_sync_init+0x4c>)
     510:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     512:	2000      	movs	r0, #0
}
     514:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
     516:	2000      	movs	r0, #0
     518:	e7ea      	b.n	4f0 <spi_m_sync_init+0x10>
     51a:	2000      	movs	r0, #0
     51c:	e7e8      	b.n	4f0 <spi_m_sync_init+0x10>
     51e:	46c0      	nop			; (mov r8, r8)
     520:	000049e8 	.word	0x000049e8
     524:	ffff8000 	.word	0xffff8000
     528:	000005c5 	.word	0x000005c5
     52c:	00000591 	.word	0x00000591

00000530 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     530:	b510      	push	{r4, lr}
     532:	0004      	movs	r4, r0
	ASSERT(spi);
     534:	1e43      	subs	r3, r0, #1
     536:	4198      	sbcs	r0, r3
     538:	b2c0      	uxtb	r0, r0
     53a:	2257      	movs	r2, #87	; 0x57
     53c:	4903      	ldr	r1, [pc, #12]	; (54c <spi_m_sync_enable+0x1c>)
     53e:	f000 fb11 	bl	b64 <assert>
	_spi_m_sync_enable(&spi->dev);
     542:	1d20      	adds	r0, r4, #4
     544:	f001 f8c0 	bl	16c8 <_spi_m_sync_enable>
}
     548:	bd10      	pop	{r4, pc}
     54a:	46c0      	nop			; (mov r8, r8)
     54c:	000049e8 	.word	0x000049e8

00000550 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     550:	b530      	push	{r4, r5, lr}
     552:	b087      	sub	sp, #28
     554:	0004      	movs	r4, r0
     556:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     558:	2800      	cmp	r0, #0
     55a:	d015      	beq.n	588 <spi_m_sync_transfer+0x38>
     55c:	2900      	cmp	r1, #0
     55e:	d011      	beq.n	584 <spi_m_sync_transfer+0x34>
     560:	2001      	movs	r0, #1
     562:	22b3      	movs	r2, #179	; 0xb3
     564:	4909      	ldr	r1, [pc, #36]	; (58c <spi_m_sync_transfer+0x3c>)
     566:	f000 fafd 	bl	b64 <assert>

	msg.txbuf = p_xfer->txbuf;
     56a:	682b      	ldr	r3, [r5, #0]
     56c:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     56e:	686b      	ldr	r3, [r5, #4]
     570:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     572:	68ab      	ldr	r3, [r5, #8]
     574:	9301      	str	r3, [sp, #4]
     576:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     578:	1d20      	adds	r0, r4, #4
     57a:	a903      	add	r1, sp, #12
     57c:	f001 f8ba 	bl	16f4 <_spi_m_sync_trans>
}
     580:	b007      	add	sp, #28
     582:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     584:	2000      	movs	r0, #0
     586:	e7ec      	b.n	562 <spi_m_sync_transfer+0x12>
     588:	2000      	movs	r0, #0
     58a:	e7ea      	b.n	562 <spi_m_sync_transfer+0x12>
     58c:	000049e8 	.word	0x000049e8

00000590 <_spi_m_sync_io_write>:
{
     590:	b570      	push	{r4, r5, r6, lr}
     592:	b084      	sub	sp, #16
     594:	0004      	movs	r4, r0
     596:	000e      	movs	r6, r1
     598:	0015      	movs	r5, r2
	ASSERT(io);
     59a:	1e43      	subs	r3, r0, #1
     59c:	4198      	sbcs	r0, r3
     59e:	b2c0      	uxtb	r0, r0
     5a0:	22a3      	movs	r2, #163	; 0xa3
     5a2:	4907      	ldr	r1, [pc, #28]	; (5c0 <_spi_m_sync_io_write+0x30>)
     5a4:	f000 fade 	bl	b64 <assert>
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     5a8:	0020      	movs	r0, r4
     5aa:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
     5ac:	2300      	movs	r3, #0
     5ae:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     5b0:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     5b2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     5b4:	a901      	add	r1, sp, #4
     5b6:	f7ff ffcb 	bl	550 <spi_m_sync_transfer>
}
     5ba:	b004      	add	sp, #16
     5bc:	bd70      	pop	{r4, r5, r6, pc}
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	000049e8 	.word	0x000049e8

000005c4 <_spi_m_sync_io_read>:
{
     5c4:	b570      	push	{r4, r5, r6, lr}
     5c6:	b084      	sub	sp, #16
     5c8:	0004      	movs	r4, r0
     5ca:	000e      	movs	r6, r1
     5cc:	0015      	movs	r5, r2
	ASSERT(io);
     5ce:	1e43      	subs	r3, r0, #1
     5d0:	4198      	sbcs	r0, r3
     5d2:	b2c0      	uxtb	r0, r0
     5d4:	2287      	movs	r2, #135	; 0x87
     5d6:	4907      	ldr	r1, [pc, #28]	; (5f4 <_spi_m_sync_io_read+0x30>)
     5d8:	f000 fac4 	bl	b64 <assert>
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     5dc:	0020      	movs	r0, r4
     5de:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
     5e0:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     5e2:	2300      	movs	r3, #0
     5e4:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     5e6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     5e8:	a901      	add	r1, sp, #4
     5ea:	f7ff ffb1 	bl	550 <spi_m_sync_transfer>
}
     5ee:	b004      	add	sp, #16
     5f0:	bd70      	pop	{r4, r5, r6, pc}
     5f2:	46c0      	nop			; (mov r8, r8)
     5f4:	000049e8 	.word	0x000049e8

000005f8 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     5f8:	b570      	push	{r4, r5, r6, lr}
     5fa:	0004      	movs	r4, r0
     5fc:	000d      	movs	r5, r1
	ASSERT(spi && io);
     5fe:	2800      	cmp	r0, #0
     600:	d00c      	beq.n	61c <spi_m_sync_get_io_descriptor+0x24>
     602:	2900      	cmp	r1, #0
     604:	d008      	beq.n	618 <spi_m_sync_get_io_descriptor+0x20>
     606:	2001      	movs	r0, #1
     608:	22bd      	movs	r2, #189	; 0xbd
     60a:	4905      	ldr	r1, [pc, #20]	; (620 <spi_m_sync_get_io_descriptor+0x28>)
     60c:	f000 faaa 	bl	b64 <assert>
	*io = &spi->io;
     610:	340c      	adds	r4, #12
     612:	602c      	str	r4, [r5, #0]
	return 0;
}
     614:	2000      	movs	r0, #0
     616:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
     618:	2000      	movs	r0, #0
     61a:	e7f5      	b.n	608 <spi_m_sync_get_io_descriptor+0x10>
     61c:	2000      	movs	r0, #0
     61e:	e7f3      	b.n	608 <spi_m_sync_get_io_descriptor+0x10>
     620:	000049e8 	.word	0x000049e8

00000624 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     624:	b510      	push	{r4, lr}
     626:	0001      	movs	r1, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     628:	2000      	movs	r0, #0
     62a:	e001      	b.n	630 <_usb_d_find_ep+0xc>
     62c:	3001      	adds	r0, #1
     62e:	b240      	sxtb	r0, r0
     630:	2803      	cmp	r0, #3
     632:	dc0f      	bgt.n	654 <_usb_d_find_ep+0x30>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     634:	0142      	lsls	r2, r0, #5
     636:	4b09      	ldr	r3, [pc, #36]	; (65c <_usb_d_find_ep+0x38>)
     638:	189b      	adds	r3, r3, r2
     63a:	785a      	ldrb	r2, [r3, #1]
     63c:	428a      	cmp	r2, r1
     63e:	d00b      	beq.n	658 <_usb_d_find_ep+0x34>
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     640:	0143      	lsls	r3, r0, #5
     642:	4c06      	ldr	r4, [pc, #24]	; (65c <_usb_d_find_ep+0x38>)
     644:	5d1b      	ldrb	r3, [r3, r4]
     646:	2b00      	cmp	r3, #0
     648:	d1f0      	bne.n	62c <_usb_d_find_ep+0x8>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     64a:	330f      	adds	r3, #15
     64c:	400b      	ands	r3, r1
     64e:	4293      	cmp	r3, r2
     650:	d1ec      	bne.n	62c <_usb_d_find_ep+0x8>
     652:	e001      	b.n	658 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     654:	2001      	movs	r0, #1
     656:	4240      	negs	r0, r0
}
     658:	bd10      	pop	{r4, pc}
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	200004cc 	.word	0x200004cc

00000660 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     660:	2000      	movs	r0, #0
     662:	4770      	bx	lr

00000664 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     664:	b570      	push	{r4, r5, r6, lr}
     666:	0004      	movs	r4, r0
     668:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     66a:	f7ff ffdb 	bl	624 <_usb_d_find_ep>
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     66e:	0142      	lsls	r2, r0, #5
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <usb_d_cb_trans_more+0x28>)
     672:	189b      	adds	r3, r3, r2
     674:	789b      	ldrb	r3, [r3, #2]
     676:	2b03      	cmp	r3, #3
     678:	d001      	beq.n	67e <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     67a:	2000      	movs	r0, #0
}
     67c:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     67e:	4b03      	ldr	r3, [pc, #12]	; (68c <usb_d_cb_trans_more+0x28>)
     680:	1898      	adds	r0, r3, r2
     682:	6983      	ldr	r3, [r0, #24]
     684:	0029      	movs	r1, r5
     686:	0020      	movs	r0, r4
     688:	4798      	blx	r3
     68a:	e7f7      	b.n	67c <usb_d_cb_trans_more+0x18>
     68c:	200004cc 	.word	0x200004cc

00000690 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     690:	b5f0      	push	{r4, r5, r6, r7, lr}
     692:	b087      	sub	sp, #28
     694:	0005      	movs	r5, r0
     696:	000f      	movs	r7, r1
     698:	9201      	str	r2, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
     69a:	f7ff ffc3 	bl	624 <_usb_d_find_ep>
     69e:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
     6a0:	0146      	lsls	r6, r0, #5
     6a2:	4a48      	ldr	r2, [pc, #288]	; (7c4 <_usb_d_cb_trans_done+0x134>)
     6a4:	1996      	adds	r6, r2, r6

	if (code == USB_TRANS_DONE) {
     6a6:	2f00      	cmp	r7, #0
     6a8:	d151      	bne.n	74e <_usb_d_cb_trans_done+0xbe>
		ept->xfer.hdr.status = USB_XFER_DONE;
     6aa:	0013      	movs	r3, r2
     6ac:	0142      	lsls	r2, r0, #5
     6ae:	2000      	movs	r0, #0
     6b0:	70f0      	strb	r0, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     6b2:	5cd3      	ldrb	r3, [r2, r3]
     6b4:	2b00      	cmp	r3, #0
     6b6:	d00e      	beq.n	6d6 <_usb_d_cb_trans_done+0x46>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     6b8:	0162      	lsls	r2, r4, #5
     6ba:	4b42      	ldr	r3, [pc, #264]	; (7c4 <_usb_d_cb_trans_done+0x134>)
     6bc:	189b      	adds	r3, r3, r2
     6be:	2201      	movs	r2, #1
     6c0:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     6c2:	0164      	lsls	r4, r4, #5
     6c4:	4b3f      	ldr	r3, [pc, #252]	; (7c4 <_usb_d_cb_trans_done+0x134>)
     6c6:	191c      	adds	r4, r3, r4
     6c8:	69e3      	ldr	r3, [r4, #28]
     6ca:	78e1      	ldrb	r1, [r4, #3]
     6cc:	9a01      	ldr	r2, [sp, #4]
     6ce:	0028      	movs	r0, r5
     6d0:	4798      	blx	r3
}
     6d2:	b007      	add	sp, #28
     6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t state   = ept->xfer.hdr.state;
     6d6:	78b3      	ldrb	r3, [r6, #2]
     6d8:	240c      	movs	r4, #12
     6da:	5734      	ldrsb	r4, [r6, r4]
	if (state == USB_EP_S_X_DATA) {
     6dc:	2b03      	cmp	r3, #3
     6de:	d008      	beq.n	6f2 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     6e0:	0032      	movs	r2, r6
     6e2:	320c      	adds	r2, #12
     6e4:	7870      	ldrb	r0, [r6, #1]
     6e6:	2100      	movs	r1, #0
     6e8:	69f3      	ldr	r3, [r6, #28]
     6ea:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     6ec:	2302      	movs	r3, #2
     6ee:	70b3      	strb	r3, [r6, #2]
     6f0:	e7ef      	b.n	6d2 <_usb_d_cb_trans_done+0x42>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     6f2:	7870      	ldrb	r0, [r6, #1]
     6f4:	0032      	movs	r2, r6
     6f6:	320c      	adds	r2, #12
     6f8:	2101      	movs	r1, #1
     6fa:	69f3      	ldr	r3, [r6, #28]
     6fc:	4798      	blx	r3
		if (err) {
     6fe:	2800      	cmp	r0, #0
     700:	d010      	beq.n	724 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     702:	2305      	movs	r3, #5
     704:	70b3      	strb	r3, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     706:	3b03      	subs	r3, #3
     708:	70f3      	strb	r3, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     70a:	2c00      	cmp	r4, #0
     70c:	db08      	blt.n	720 <_usb_d_cb_trans_done+0x90>
     70e:	7873      	ldrb	r3, [r6, #1]
     710:	2080      	movs	r0, #128	; 0x80
     712:	4240      	negs	r0, r0
     714:	4318      	orrs	r0, r3
     716:	b2c0      	uxtb	r0, r0
     718:	2101      	movs	r1, #1
     71a:	f002 f84d 	bl	27b8 <_usb_d_dev_ep_stall>
     71e:	e7d8      	b.n	6d2 <_usb_d_cb_trans_done+0x42>
     720:	7870      	ldrb	r0, [r6, #1]
     722:	e7f9      	b.n	718 <_usb_d_cb_trans_done+0x88>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     724:	2304      	movs	r3, #4
     726:	70b3      	strb	r3, [r6, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     728:	7871      	ldrb	r1, [r6, #1]
	struct usb_d_transfer trans
     72a:	2200      	movs	r2, #0
     72c:	9203      	str	r2, [sp, #12]
     72e:	9204      	str	r2, [sp, #16]
     730:	2c00      	cmp	r4, #0
     732:	db09      	blt.n	748 <_usb_d_cb_trans_done+0xb8>
     734:	3b84      	subs	r3, #132	; 0x84
     736:	430b      	orrs	r3, r1
     738:	b2da      	uxtb	r2, r3
     73a:	a803      	add	r0, sp, #12
     73c:	7202      	strb	r2, [r0, #8]
     73e:	2301      	movs	r3, #1
     740:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     742:	f002 f919 	bl	2978 <_usb_d_dev_ep_trans>
     746:	e7c4      	b.n	6d2 <_usb_d_cb_trans_done+0x42>
	struct usb_d_transfer trans
     748:	220f      	movs	r2, #15
     74a:	400a      	ands	r2, r1
     74c:	e7f5      	b.n	73a <_usb_d_cb_trans_done+0xaa>
	} else if (code == USB_TRANS_STALL) {
     74e:	2f01      	cmp	r7, #1
     750:	d00a      	beq.n	768 <_usb_d_cb_trans_done+0xd8>
	} else if (code == USB_TRANS_ABORT) {
     752:	2f02      	cmp	r7, #2
     754:	d01d      	beq.n	792 <_usb_d_cb_trans_done+0x102>
	} else if (code == USB_TRANS_RESET) {
     756:	2f03      	cmp	r7, #3
     758:	d02c      	beq.n	7b4 <_usb_d_cb_trans_done+0x124>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     75a:	0142      	lsls	r2, r0, #5
     75c:	4b19      	ldr	r3, [pc, #100]	; (7c4 <_usb_d_cb_trans_done+0x134>)
     75e:	189b      	adds	r3, r3, r2
     760:	2206      	movs	r2, #6
     762:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     764:	70da      	strb	r2, [r3, #3]
     766:	e7ac      	b.n	6c2 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_HALT;
     768:	4b16      	ldr	r3, [pc, #88]	; (7c4 <_usb_d_cb_trans_done+0x134>)
     76a:	0142      	lsls	r2, r0, #5
     76c:	1899      	adds	r1, r3, r2
     76e:	2002      	movs	r0, #2
     770:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     772:	5cd3      	ldrb	r3, [r2, r3]
     774:	2b00      	cmp	r3, #0
     776:	d005      	beq.n	784 <_usb_d_cb_trans_done+0xf4>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     778:	0162      	lsls	r2, r4, #5
     77a:	4b12      	ldr	r3, [pc, #72]	; (7c4 <_usb_d_cb_trans_done+0x134>)
     77c:	189b      	adds	r3, r3, r2
     77e:	2205      	movs	r2, #5
     780:	709a      	strb	r2, [r3, #2]
     782:	e79e      	b.n	6c2 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     784:	2202      	movs	r2, #2
     786:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     788:	2100      	movs	r1, #0
     78a:	0028      	movs	r0, r5
     78c:	f002 f814 	bl	27b8 <_usb_d_dev_ep_stall>
     790:	e797      	b.n	6c2 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     792:	4b0c      	ldr	r3, [pc, #48]	; (7c4 <_usb_d_cb_trans_done+0x134>)
     794:	0142      	lsls	r2, r0, #5
     796:	1899      	adds	r1, r3, r2
     798:	2004      	movs	r0, #4
     79a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     79c:	5cd3      	ldrb	r3, [r2, r3]
     79e:	2b00      	cmp	r3, #0
     7a0:	d005      	beq.n	7ae <_usb_d_cb_trans_done+0x11e>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     7a2:	0162      	lsls	r2, r4, #5
     7a4:	4b07      	ldr	r3, [pc, #28]	; (7c4 <_usb_d_cb_trans_done+0x134>)
     7a6:	189b      	adds	r3, r3, r2
     7a8:	2201      	movs	r2, #1
     7aa:	709a      	strb	r2, [r3, #2]
     7ac:	e789      	b.n	6c2 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     7ae:	2302      	movs	r3, #2
     7b0:	708b      	strb	r3, [r1, #2]
			return;
     7b2:	e78e      	b.n	6d2 <_usb_d_cb_trans_done+0x42>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     7b4:	0142      	lsls	r2, r0, #5
     7b6:	4b03      	ldr	r3, [pc, #12]	; (7c4 <_usb_d_cb_trans_done+0x134>)
     7b8:	189b      	adds	r3, r3, r2
     7ba:	2200      	movs	r2, #0
     7bc:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     7be:	3205      	adds	r2, #5
     7c0:	70da      	strb	r2, [r3, #3]
     7c2:	e77e      	b.n	6c2 <_usb_d_cb_trans_done+0x32>
     7c4:	200004cc 	.word	0x200004cc

000007c8 <usb_d_cb_trans_setup>:
{
     7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7ca:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     7cc:	f7ff ff2a 	bl	624 <_usb_d_find_ep>
     7d0:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     7d2:	0143      	lsls	r3, r0, #5
     7d4:	3308      	adds	r3, #8
     7d6:	4c1d      	ldr	r4, [pc, #116]	; (84c <usb_d_cb_trans_setup+0x84>)
     7d8:	18e4      	adds	r4, r4, r3
     7da:	3404      	adds	r4, #4
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     7dc:	0021      	movs	r1, r4
     7de:	0028      	movs	r0, r5
     7e0:	f002 f890 	bl	2904 <_usb_d_dev_ep_read_req>
     7e4:	b2c0      	uxtb	r0, r0
	if (n != 8) {
     7e6:	2808      	cmp	r0, #8
     7e8:	d00b      	beq.n	802 <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     7ea:	2101      	movs	r1, #1
     7ec:	0028      	movs	r0, r5
     7ee:	f001 ffe3 	bl	27b8 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     7f2:	2080      	movs	r0, #128	; 0x80
     7f4:	4240      	negs	r0, r0
     7f6:	4328      	orrs	r0, r5
     7f8:	b2c0      	uxtb	r0, r0
     7fa:	2101      	movs	r1, #1
     7fc:	f001 ffdc 	bl	27b8 <_usb_d_dev_ep_stall>
}
     800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     802:	2100      	movs	r1, #0
     804:	0028      	movs	r0, r5
     806:	f001 ffd7 	bl	27b8 <_usb_d_dev_ep_stall>
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     80a:	2780      	movs	r7, #128	; 0x80
     80c:	427f      	negs	r7, r7
     80e:	432f      	orrs	r7, r5
     810:	b2ff      	uxtb	r7, r7
     812:	2100      	movs	r1, #0
     814:	0038      	movs	r0, r7
     816:	f001 ffcf 	bl	27b8 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     81a:	0172      	lsls	r2, r6, #5
     81c:	4b0b      	ldr	r3, [pc, #44]	; (84c <usb_d_cb_trans_setup+0x84>)
     81e:	189b      	adds	r3, r3, r2
     820:	2201      	movs	r2, #1
     822:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     824:	695b      	ldr	r3, [r3, #20]
     826:	0021      	movs	r1, r4
     828:	0028      	movs	r0, r5
     82a:	4798      	blx	r3
     82c:	2800      	cmp	r0, #0
     82e:	d1e7      	bne.n	800 <usb_d_cb_trans_setup+0x38>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     830:	0176      	lsls	r6, r6, #5
     832:	4b06      	ldr	r3, [pc, #24]	; (84c <usb_d_cb_trans_setup+0x84>)
     834:	199e      	adds	r6, r3, r6
     836:	2305      	movs	r3, #5
     838:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     83a:	2101      	movs	r1, #1
     83c:	0028      	movs	r0, r5
     83e:	f001 ffbb 	bl	27b8 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     842:	2101      	movs	r1, #1
     844:	0038      	movs	r0, r7
     846:	f001 ffb7 	bl	27b8 <_usb_d_dev_ep_stall>
     84a:	e7d9      	b.n	800 <usb_d_cb_trans_setup+0x38>
     84c:	200004cc 	.word	0x200004cc

00000850 <usb_d_init>:

int32_t usb_d_init(void)
{
     850:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     852:	f001 fca7 	bl	21a4 <_usb_d_dev_init>
	uint8_t i;
	if (rc < 0) {
     856:	2800      	cmp	r0, #0
     858:	db20      	blt.n	89c <usb_d_init+0x4c>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     85a:	2280      	movs	r2, #128	; 0x80
     85c:	2100      	movs	r1, #0
     85e:	4810      	ldr	r0, [pc, #64]	; (8a0 <usb_d_init+0x50>)
     860:	f003 ffb4 	bl	47cc <memset>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     864:	2200      	movs	r2, #0
     866:	e00a      	b.n	87e <usb_d_init+0x2e>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     868:	0151      	lsls	r1, r2, #5
     86a:	4b0d      	ldr	r3, [pc, #52]	; (8a0 <usb_d_init+0x50>)
     86c:	185b      	adds	r3, r3, r1
     86e:	21ff      	movs	r1, #255	; 0xff
     870:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     872:	490c      	ldr	r1, [pc, #48]	; (8a4 <usb_d_init+0x54>)
     874:	6159      	str	r1, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     876:	6199      	str	r1, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     878:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     87a:	3201      	adds	r2, #1
     87c:	b2d2      	uxtb	r2, r2
     87e:	2a03      	cmp	r2, #3
     880:	d9f2      	bls.n	868 <usb_d_init+0x18>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     882:	4909      	ldr	r1, [pc, #36]	; (8a8 <usb_d_init+0x58>)
     884:	2000      	movs	r0, #0
     886:	f002 f969 	bl	2b5c <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     88a:	4908      	ldr	r1, [pc, #32]	; (8ac <usb_d_init+0x5c>)
     88c:	2001      	movs	r0, #1
     88e:	f002 f965 	bl	2b5c <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     892:	4907      	ldr	r1, [pc, #28]	; (8b0 <usb_d_init+0x60>)
     894:	2002      	movs	r0, #2
     896:	f002 f961 	bl	2b5c <_usb_d_dev_register_ep_callback>
	return ERR_NONE;
     89a:	2000      	movs	r0, #0
}
     89c:	bd10      	pop	{r4, pc}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	200004cc 	.word	0x200004cc
     8a4:	00000661 	.word	0x00000661
     8a8:	000007c9 	.word	0x000007c9
     8ac:	00000665 	.word	0x00000665
     8b0:	00000691 	.word	0x00000691

000008b4 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     8b4:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     8b6:	f002 f93f 	bl	2b38 <_usb_d_dev_register_callback>
}
     8ba:	bd10      	pop	{r4, pc}

000008bc <usb_d_enable>:

int32_t usb_d_enable(void)
{
     8bc:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     8be:	f001 fcc1 	bl	2244 <_usb_d_dev_enable>
}
     8c2:	bd10      	pop	{r4, pc}

000008c4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     8c4:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     8c6:	f001 fce5 	bl	2294 <_usb_d_dev_attach>
}
     8ca:	bd10      	pop	{r4, pc}

000008cc <usb_d_get_speed>:
{
	_usb_d_dev_detach();
}

enum usb_speed usb_d_get_speed(void)
{
     8cc:	b510      	push	{r4, lr}
	return _usb_d_dev_get_speed();
     8ce:	f001 fce9 	bl	22a4 <_usb_d_dev_get_speed>
}
     8d2:	bd10      	pop	{r4, pc}

000008d4 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     8d4:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     8d6:	f001 fcf5 	bl	22c4 <_usb_d_dev_set_address>
}
     8da:	bd10      	pop	{r4, pc}

000008dc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8de:	0005      	movs	r5, r0
     8e0:	000e      	movs	r6, r1
     8e2:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     8e4:	f7ff fe9e 	bl	624 <_usb_d_find_ep>
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     8e8:	2800      	cmp	r0, #0
     8ea:	da14      	bge.n	916 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     8ec:	20ff      	movs	r0, #255	; 0xff
     8ee:	f7ff fe99 	bl	624 <_usb_d_find_ep>
     8f2:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     8f4:	db12      	blt.n	91c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     8f6:	003a      	movs	r2, r7
     8f8:	0031      	movs	r1, r6
     8fa:	0028      	movs	r0, r5
     8fc:	f001 fcec 	bl	22d8 <_usb_d_dev_ep_init>
	if (rc < 0) {
     900:	2800      	cmp	r0, #0
     902:	db07      	blt.n	914 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     904:	4a07      	ldr	r2, [pc, #28]	; (924 <usb_d_ep_init+0x48>)
     906:	0164      	lsls	r4, r4, #5
     908:	1913      	adds	r3, r2, r4
     90a:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     90c:	2303      	movs	r3, #3
     90e:	401e      	ands	r6, r3
     910:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
     912:	2000      	movs	r0, #0
}
     914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     916:	2014      	movs	r0, #20
     918:	4240      	negs	r0, r0
     91a:	e7fb      	b.n	914 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
     91c:	2015      	movs	r0, #21
     91e:	4240      	negs	r0, r0
     920:	e7f8      	b.n	914 <usb_d_ep_init+0x38>
     922:	46c0      	nop			; (mov r8, r8)
     924:	200004cc 	.word	0x200004cc

00000928 <usb_d_ep0_init>:
{
     928:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     92a:	b282      	uxth	r2, r0
     92c:	2100      	movs	r1, #0
     92e:	2000      	movs	r0, #0
     930:	f7ff ffd4 	bl	8dc <usb_d_ep_init>
}
     934:	bd10      	pop	{r4, pc}
	...

00000938 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     938:	b570      	push	{r4, r5, r6, lr}
     93a:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     93c:	f7ff fe72 	bl	624 <_usb_d_find_ep>
     940:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     942:	db07      	blt.n	954 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     944:	0028      	movs	r0, r5
     946:	f001 fd5f 	bl	2408 <_usb_d_dev_ep_deinit>
	ept->xfer.hdr.ep = 0xFF;
     94a:	0164      	lsls	r4, r4, #5
     94c:	4b02      	ldr	r3, [pc, #8]	; (958 <usb_d_ep_deinit+0x20>)
     94e:	191c      	adds	r4, r3, r4
     950:	23ff      	movs	r3, #255	; 0xff
     952:	7063      	strb	r3, [r4, #1]
}
     954:	bd70      	pop	{r4, r5, r6, pc}
     956:	46c0      	nop			; (mov r8, r8)
     958:	200004cc 	.word	0x200004cc

0000095c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     95c:	b570      	push	{r4, r5, r6, lr}
     95e:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     960:	f7ff fe60 	bl	624 <_usb_d_find_ep>
     964:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     966:	db17      	blt.n	998 <usb_d_ep_enable+0x3c>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     968:	0143      	lsls	r3, r0, #5
     96a:	4a0d      	ldr	r2, [pc, #52]	; (9a0 <usb_d_ep_enable+0x44>)
     96c:	5c9b      	ldrb	r3, [r3, r2]
     96e:	2b00      	cmp	r3, #0
     970:	d10a      	bne.n	988 <usb_d_ep_enable+0x2c>
     972:	2102      	movs	r1, #2
     974:	0162      	lsls	r2, r4, #5
     976:	4b0a      	ldr	r3, [pc, #40]	; (9a0 <usb_d_ep_enable+0x44>)
     978:	189b      	adds	r3, r3, r2
     97a:	7099      	strb	r1, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     97c:	0028      	movs	r0, r5
     97e:	f001 fd9f 	bl	24c0 <_usb_d_dev_ep_enable>
	if (rc < 0) {
     982:	2800      	cmp	r0, #0
     984:	db02      	blt.n	98c <usb_d_ep_enable+0x30>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     986:	bd70      	pop	{r4, r5, r6, pc}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     988:	2101      	movs	r1, #1
     98a:	e7f3      	b.n	974 <usb_d_ep_enable+0x18>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     98c:	0164      	lsls	r4, r4, #5
     98e:	4b04      	ldr	r3, [pc, #16]	; (9a0 <usb_d_ep_enable+0x44>)
     990:	191c      	adds	r4, r3, r4
     992:	2300      	movs	r3, #0
     994:	70a3      	strb	r3, [r4, #2]
     996:	e7f6      	b.n	986 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
     998:	2012      	movs	r0, #18
     99a:	4240      	negs	r0, r0
     99c:	e7f3      	b.n	986 <usb_d_ep_enable+0x2a>
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	200004cc 	.word	0x200004cc

000009a4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9a6:	46d6      	mov	lr, sl
     9a8:	464f      	mov	r7, r9
     9aa:	4646      	mov	r6, r8
     9ac:	b5c0      	push	{r6, r7, lr}
     9ae:	b086      	sub	sp, #24
     9b0:	0005      	movs	r5, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     9b2:	7a06      	ldrb	r6, [r0, #8]
     9b4:	0030      	movs	r0, r6
     9b6:	f7ff fe35 	bl	624 <_usb_d_find_ep>
     9ba:	0007      	movs	r7, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     9bc:	09f6      	lsrs	r6, r6, #7
     9be:	7a6b      	ldrb	r3, [r5, #9]
     9c0:	1e5a      	subs	r2, r3, #1
     9c2:	4193      	sbcs	r3, r2
     9c4:	b2dc      	uxtb	r4, r3
	uint32_t              len = xfer->size;
     9c6:	686b      	ldr	r3, [r5, #4]
     9c8:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     9ca:	2800      	cmp	r0, #0
     9cc:	db6b      	blt.n	aa6 <usb_d_ep_transfer+0x102>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     9ce:	a804      	add	r0, sp, #16
     9d0:	f7ff fc00 	bl	1d4 <atomic_enter_critical>
	state = ept->xfer.hdr.state;
     9d4:	017a      	lsls	r2, r7, #5
     9d6:	4b37      	ldr	r3, [pc, #220]	; (ab4 <usb_d_ep_transfer+0x110>)
     9d8:	189b      	adds	r3, r3, r2
     9da:	789a      	ldrb	r2, [r3, #2]
     9dc:	2317      	movs	r3, #23
     9de:	446b      	add	r3, sp
     9e0:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
     9e2:	781b      	ldrb	r3, [r3, #0]
     9e4:	2b01      	cmp	r3, #1
     9e6:	d00e      	beq.n	a06 <usb_d_ep_transfer+0x62>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     9e8:	a804      	add	r0, sp, #16
     9ea:	f7ff fbfa 	bl	1e2 <atomic_leave_critical>
		switch (state) {
     9ee:	2317      	movs	r3, #23
     9f0:	446b      	add	r3, sp
     9f2:	781b      	ldrb	r3, [r3, #0]
     9f4:	b2db      	uxtb	r3, r3
     9f6:	2b05      	cmp	r3, #5
     9f8:	d02b      	beq.n	a52 <usb_d_ep_transfer+0xae>
     9fa:	2b06      	cmp	r3, #6
     9fc:	d056      	beq.n	aac <usb_d_ep_transfer+0x108>
     9fe:	2b00      	cmp	r3, #0
     a00:	d029      	beq.n	a56 <usb_d_ep_transfer+0xb2>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     a02:	2001      	movs	r0, #1
     a04:	e01f      	b.n	a46 <usb_d_ep_transfer+0xa2>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     a06:	4b2b      	ldr	r3, [pc, #172]	; (ab4 <usb_d_ep_transfer+0x110>)
     a08:	4699      	mov	r9, r3
     a0a:	017b      	lsls	r3, r7, #5
     a0c:	469a      	mov	sl, r3
     a0e:	464b      	mov	r3, r9
     a10:	4453      	add	r3, sl
     a12:	2203      	movs	r2, #3
     a14:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     a16:	a804      	add	r0, sp, #16
     a18:	f7ff fbe3 	bl	1e2 <atomic_leave_critical>
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     a1c:	464b      	mov	r3, r9
     a1e:	4652      	mov	r2, sl
     a20:	5cd3      	ldrb	r3, [r2, r3]
     a22:	2b00      	cmp	r3, #0
     a24:	d01a      	beq.n	a5c <usb_d_ep_transfer+0xb8>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     a26:	7a29      	ldrb	r1, [r5, #8]
     a28:	682b      	ldr	r3, [r5, #0]
     a2a:	9301      	str	r3, [sp, #4]
	struct usb_d_transfer trans
     a2c:	4643      	mov	r3, r8
     a2e:	9302      	str	r3, [sp, #8]
     a30:	2e00      	cmp	r6, #0
     a32:	d035      	beq.n	aa0 <usb_d_ep_transfer+0xfc>
     a34:	2280      	movs	r2, #128	; 0x80
     a36:	4252      	negs	r2, r2
     a38:	430a      	orrs	r2, r1
     a3a:	b2d2      	uxtb	r2, r2
     a3c:	a801      	add	r0, sp, #4
     a3e:	7202      	strb	r2, [r0, #8]
     a40:	7244      	strb	r4, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     a42:	f001 ff99 	bl	2978 <_usb_d_dev_ep_trans>
	return rc;
}
     a46:	b006      	add	sp, #24
     a48:	bc1c      	pop	{r2, r3, r4}
     a4a:	4690      	mov	r8, r2
     a4c:	4699      	mov	r9, r3
     a4e:	46a2      	mov	sl, r4
     a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return USB_HALTED;
     a52:	2002      	movs	r0, #2
     a54:	e7f7      	b.n	a46 <usb_d_ep_transfer+0xa2>
			return -USB_ERR_FUNC;
     a56:	2013      	movs	r0, #19
     a58:	4240      	negs	r0, r0
     a5a:	e7f4      	b.n	a46 <usb_d_ep_transfer+0xa2>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     a5c:	017b      	lsls	r3, r7, #5
     a5e:	4a15      	ldr	r2, [pc, #84]	; (ab4 <usb_d_ep_transfer+0x110>)
     a60:	18d2      	adds	r2, r2, r3
     a62:	7c93      	ldrb	r3, [r2, #18]
     a64:	7cd4      	ldrb	r4, [r2, #19]
     a66:	0224      	lsls	r4, r4, #8
     a68:	191b      	adds	r3, r3, r4
     a6a:	b29b      	uxth	r3, r3
		if (req_len == 0) {
     a6c:	2b00      	cmp	r3, #0
     a6e:	d106      	bne.n	a7e <usb_d_ep_transfer+0xda>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     a70:	2304      	movs	r3, #4
     a72:	7093      	strb	r3, [r2, #2]
			len                 = 0;
     a74:	2300      	movs	r3, #0
     a76:	4698      	mov	r8, r3
			zlp                 = true;
     a78:	2401      	movs	r4, #1
			dir                 = true;
     a7a:	2601      	movs	r6, #1
     a7c:	e7d3      	b.n	a26 <usb_d_ep_transfer+0x82>
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     a7e:	017f      	lsls	r7, r7, #5
     a80:	4a0c      	ldr	r2, [pc, #48]	; (ab4 <usb_d_ep_transfer+0x110>)
     a82:	19d7      	adds	r7, r2, r7
     a84:	220c      	movs	r2, #12
     a86:	56ba      	ldrsb	r2, [r7, r2]
     a88:	0fd6      	lsrs	r6, r2, #31
			if (len > req_len) {
     a8a:	4598      	cmp	r8, r3
     a8c:	d900      	bls.n	a90 <usb_d_ep_transfer+0xec>
				len = req_len;
     a8e:	4698      	mov	r8, r3
			if (dir) {
     a90:	2a00      	cmp	r2, #0
     a92:	db01      	blt.n	a98 <usb_d_ep_transfer+0xf4>
				zlp = false;
     a94:	2400      	movs	r4, #0
     a96:	e7c6      	b.n	a26 <usb_d_ep_transfer+0x82>
				zlp = (req_len > len);
     a98:	4598      	cmp	r8, r3
     a9a:	419b      	sbcs	r3, r3
     a9c:	425c      	negs	r4, r3
     a9e:	e7c2      	b.n	a26 <usb_d_ep_transfer+0x82>
	struct usb_d_transfer trans
     aa0:	220f      	movs	r2, #15
     aa2:	400a      	ands	r2, r1
     aa4:	e7ca      	b.n	a3c <usb_d_ep_transfer+0x98>
		return -USB_ERR_PARAM;
     aa6:	2012      	movs	r0, #18
     aa8:	4240      	negs	r0, r0
     aaa:	e7cc      	b.n	a46 <usb_d_ep_transfer+0xa2>
			return -USB_ERROR;
     aac:	2010      	movs	r0, #16
     aae:	4240      	negs	r0, r0
     ab0:	e7c9      	b.n	a46 <usb_d_ep_transfer+0xa2>
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	200004cc 	.word	0x200004cc

00000ab8 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     ab8:	b570      	push	{r4, r5, r6, lr}
     aba:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     abc:	2900      	cmp	r1, #0
     abe:	d005      	beq.n	acc <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     ac0:	2901      	cmp	r1, #1
     ac2:	d024      	beq.n	b0e <usb_d_ep_halt+0x56>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     ac4:	2102      	movs	r1, #2
     ac6:	f001 fe77 	bl	27b8 <_usb_d_dev_ep_stall>
	}
}
     aca:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     acc:	f7ff fdaa 	bl	624 <_usb_d_find_ep>
     ad0:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
     ad2:	db19      	blt.n	b08 <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     ad4:	2102      	movs	r1, #2
     ad6:	0020      	movs	r0, r4
     ad8:	f001 fe6e 	bl	27b8 <_usb_d_dev_ep_stall>
     adc:	2800      	cmp	r0, #0
     ade:	d0f4      	beq.n	aca <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     ae0:	2100      	movs	r1, #0
     ae2:	0020      	movs	r0, r4
     ae4:	f001 fe68 	bl	27b8 <_usb_d_dev_ep_stall>
		if (rc < 0) {
     ae8:	2800      	cmp	r0, #0
     aea:	dbee      	blt.n	aca <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     aec:	016d      	lsls	r5, r5, #5
     aee:	4b09      	ldr	r3, [pc, #36]	; (b14 <usb_d_ep_halt+0x5c>)
     af0:	195d      	adds	r5, r3, r5
     af2:	2301      	movs	r3, #1
     af4:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     af6:	3302      	adds	r3, #2
     af8:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     afa:	69eb      	ldr	r3, [r5, #28]
     afc:	2200      	movs	r2, #0
     afe:	2103      	movs	r1, #3
     b00:	0020      	movs	r0, r4
     b02:	4798      	blx	r3
	return ERR_NONE;
     b04:	2000      	movs	r0, #0
     b06:	e7e0      	b.n	aca <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
     b08:	2012      	movs	r0, #18
     b0a:	4240      	negs	r0, r0
		return _usb_d_ep_halt_clr(ep);
     b0c:	e7dd      	b.n	aca <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     b0e:	f001 fe53 	bl	27b8 <_usb_d_dev_ep_stall>
     b12:	e7da      	b.n	aca <usb_d_ep_halt+0x12>
     b14:	200004cc 	.word	0x200004cc

00000b18 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     b18:	b570      	push	{r4, r5, r6, lr}
     b1a:	000d      	movs	r5, r1
     b1c:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     b1e:	f7ff fd81 	bl	624 <_usb_d_find_ep>
     b22:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     b24:	2c00      	cmp	r4, #0
     b26:	d008      	beq.n	b3a <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
     b28:	2b00      	cmp	r3, #0
     b2a:	db05      	blt.n	b38 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
     b2c:	2d01      	cmp	r5, #1
     b2e:	d00b      	beq.n	b48 <usb_d_ep_register_callback+0x30>
     b30:	2d00      	cmp	r5, #0
     b32:	d004      	beq.n	b3e <usb_d_ep_register_callback+0x26>
     b34:	2d02      	cmp	r5, #2
     b36:	d00c      	beq.n	b52 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
     b38:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     b3a:	4c08      	ldr	r4, [pc, #32]	; (b5c <usb_d_ep_register_callback+0x44>)
     b3c:	e7f4      	b.n	b28 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     b3e:	0140      	lsls	r0, r0, #5
     b40:	4b07      	ldr	r3, [pc, #28]	; (b60 <usb_d_ep_register_callback+0x48>)
     b42:	1818      	adds	r0, r3, r0
     b44:	6144      	str	r4, [r0, #20]
		break;
     b46:	e7f7      	b.n	b38 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     b48:	0140      	lsls	r0, r0, #5
     b4a:	4b05      	ldr	r3, [pc, #20]	; (b60 <usb_d_ep_register_callback+0x48>)
     b4c:	1818      	adds	r0, r3, r0
     b4e:	6184      	str	r4, [r0, #24]
		break;
     b50:	e7f2      	b.n	b38 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     b52:	0140      	lsls	r0, r0, #5
     b54:	4b02      	ldr	r3, [pc, #8]	; (b60 <usb_d_ep_register_callback+0x48>)
     b56:	1818      	adds	r0, r3, r0
     b58:	61c4      	str	r4, [r0, #28]
		break;
     b5a:	e7ed      	b.n	b38 <usb_d_ep_register_callback+0x20>
     b5c:	00000661 	.word	0x00000661
     b60:	200004cc 	.word	0x200004cc

00000b64 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     b64:	2800      	cmp	r0, #0
     b66:	d100      	bne.n	b6a <assert+0x6>
		__asm("BKPT #0");
     b68:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     b6a:	4770      	bx	lr

00000b6c <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     b6c:	6803      	ldr	r3, [r0, #0]
     b6e:	2b00      	cmp	r3, #0
     b70:	d003      	beq.n	b7a <is_list_element+0xe>
		if (it == element) {
     b72:	428b      	cmp	r3, r1
     b74:	d003      	beq.n	b7e <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     b76:	681b      	ldr	r3, [r3, #0]
     b78:	e7f9      	b.n	b6e <is_list_element+0x2>
			return true;
		}
	}

	return false;
     b7a:	2000      	movs	r0, #0
}
     b7c:	4770      	bx	lr
			return true;
     b7e:	2001      	movs	r0, #1
     b80:	e7fc      	b.n	b7c <is_list_element+0x10>
	...

00000b84 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     b84:	b570      	push	{r4, r5, r6, lr}
     b86:	0005      	movs	r5, r0
     b88:	000e      	movs	r6, r1
	struct list_element *it = list->head;
     b8a:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
     b8c:	f7ff ffee 	bl	b6c <is_list_element>
     b90:	2301      	movs	r3, #1
     b92:	4058      	eors	r0, r3
     b94:	b2c0      	uxtb	r0, r0
     b96:	224f      	movs	r2, #79	; 0x4f
     b98:	4907      	ldr	r1, [pc, #28]	; (bb8 <list_insert_at_end+0x34>)
     b9a:	f7ff ffe3 	bl	b64 <assert>

	if (!list->head) {
     b9e:	682b      	ldr	r3, [r5, #0]
     ba0:	2b00      	cmp	r3, #0
     ba2:	d103      	bne.n	bac <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
     ba4:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
     ba6:	6033      	str	r3, [r6, #0]
		return;
     ba8:	e005      	b.n	bb6 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
     baa:	001c      	movs	r4, r3
	while (it->next) {
     bac:	6823      	ldr	r3, [r4, #0]
     bae:	2b00      	cmp	r3, #0
     bb0:	d1fb      	bne.n	baa <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
     bb2:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
     bb4:	6033      	str	r3, [r6, #0]
}
     bb6:	bd70      	pop	{r4, r5, r6, pc}
     bb8:	00004a04 	.word	0x00004a04

00000bbc <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
     bbc:	b510      	push	{r4, lr}
		return (us * (freq / 100000) + 29) / 30;
     bbe:	0103      	lsls	r3, r0, #4
     bc0:	1a1b      	subs	r3, r3, r0
     bc2:	0158      	lsls	r0, r3, #5
     bc4:	301d      	adds	r0, #29
     bc6:	211e      	movs	r1, #30
     bc8:	f003 fce4 	bl	4594 <__udivsi3>
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     bcc:	bd10      	pop	{r4, pc}

00000bce <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     bce:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
     bd0:	0103      	lsls	r3, r0, #4
     bd2:	1a1b      	subs	r3, r3, r0
     bd4:	0158      	lsls	r0, r3, #5
     bd6:	3002      	adds	r0, #2
     bd8:	2103      	movs	r1, #3
     bda:	f003 fcdb 	bl	4594 <__udivsi3>
     bde:	2364      	movs	r3, #100	; 0x64
     be0:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     be2:	bd10      	pop	{r4, pc}

00000be4 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     be4:	3901      	subs	r1, #1
     be6:	d8fd      	bhi.n	be4 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     be8:	4770      	bx	lr
	...

00000bec <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     bec:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     bee:	4a07      	ldr	r2, [pc, #28]	; (c0c <_init_chip+0x20>)
     bf0:	6853      	ldr	r3, [r2, #4]
     bf2:	2106      	movs	r1, #6
     bf4:	430b      	orrs	r3, r1
     bf6:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     bf8:	f000 f8fa 	bl	df0 <_pm_init>
	_sysctrl_init_sources();
     bfc:	f000 fe02 	bl	1804 <_sysctrl_init_sources>
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     c00:	f000 fe26 	bl	1850 <_sysctrl_init_referenced_generators>
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     c04:	20ff      	movs	r0, #255	; 0xff
     c06:	f000 f8d3 	bl	db0 <_gclk_init_generators_by_fref>
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     c0a:	bd10      	pop	{r4, pc}
     c0c:	41004000 	.word	0x41004000

00000c10 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c10:	4b21      	ldr	r3, [pc, #132]	; (c98 <_ext_irq_init+0x88>)
     c12:	785b      	ldrb	r3, [r3, #1]
     c14:	09db      	lsrs	r3, r3, #7
     c16:	d1fb      	bne.n	c10 <_ext_irq_init>
     c18:	4b1f      	ldr	r3, [pc, #124]	; (c98 <_ext_irq_init+0x88>)
     c1a:	785b      	ldrb	r3, [r3, #1]
     c1c:	09db      	lsrs	r3, r3, #7
     c1e:	d1fb      	bne.n	c18 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     c20:	4b1d      	ldr	r3, [pc, #116]	; (c98 <_ext_irq_init+0x88>)
     c22:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     c24:	079b      	lsls	r3, r3, #30
     c26:	d50a      	bpl.n	c3e <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     c28:	2200      	movs	r2, #0
     c2a:	4b1b      	ldr	r3, [pc, #108]	; (c98 <_ext_irq_init+0x88>)
     c2c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c2e:	4b1a      	ldr	r3, [pc, #104]	; (c98 <_ext_irq_init+0x88>)
     c30:	785b      	ldrb	r3, [r3, #1]
     c32:	09db      	lsrs	r3, r3, #7
     c34:	d1fb      	bne.n	c2e <_ext_irq_init+0x1e>
     c36:	4b18      	ldr	r3, [pc, #96]	; (c98 <_ext_irq_init+0x88>)
     c38:	785b      	ldrb	r3, [r3, #1]
     c3a:	09db      	lsrs	r3, r3, #7
     c3c:	d1fb      	bne.n	c36 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
     c3e:	2201      	movs	r2, #1
     c40:	4b15      	ldr	r3, [pc, #84]	; (c98 <_ext_irq_init+0x88>)
     c42:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c44:	4b14      	ldr	r3, [pc, #80]	; (c98 <_ext_irq_init+0x88>)
     c46:	785b      	ldrb	r3, [r3, #1]
     c48:	09db      	lsrs	r3, r3, #7
     c4a:	d1fb      	bne.n	c44 <_ext_irq_init+0x34>
     c4c:	4b12      	ldr	r3, [pc, #72]	; (c98 <_ext_irq_init+0x88>)
     c4e:	785b      	ldrb	r3, [r3, #1]
     c50:	09db      	lsrs	r3, r3, #7
     c52:	d1fb      	bne.n	c4c <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     c54:	4b10      	ldr	r3, [pc, #64]	; (c98 <_ext_irq_init+0x88>)
     c56:	2200      	movs	r2, #0
     c58:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     c5a:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     c5c:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     c5e:	32b0      	adds	r2, #176	; 0xb0
     c60:	619a      	str	r2, [r3, #24]
     c62:	4a0e      	ldr	r2, [pc, #56]	; (c9c <_ext_irq_init+0x8c>)
     c64:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     c66:	781a      	ldrb	r2, [r3, #0]
     c68:	2102      	movs	r1, #2
     c6a:	430a      	orrs	r2, r1
     c6c:	b2d2      	uxtb	r2, r2
     c6e:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c70:	4b09      	ldr	r3, [pc, #36]	; (c98 <_ext_irq_init+0x88>)
     c72:	785b      	ldrb	r3, [r3, #1]
     c74:	09db      	lsrs	r3, r3, #7
     c76:	d1fb      	bne.n	c70 <_ext_irq_init+0x60>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c78:	4b09      	ldr	r3, [pc, #36]	; (ca0 <_ext_irq_init+0x90>)
     c7a:	2210      	movs	r2, #16
     c7c:	2180      	movs	r1, #128	; 0x80
     c7e:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     c80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c84:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c88:	3101      	adds	r1, #1
     c8a:	31ff      	adds	r1, #255	; 0xff
     c8c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c8e:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     c90:	4b04      	ldr	r3, [pc, #16]	; (ca4 <_ext_irq_init+0x94>)
     c92:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     c94:	2000      	movs	r0, #0
     c96:	4770      	bx	lr
     c98:	40001800 	.word	0x40001800
     c9c:	09000a0a 	.word	0x09000a0a
     ca0:	e000e100 	.word	0xe000e100
     ca4:	2000054c 	.word	0x2000054c

00000ca8 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
     ca8:	b530      	push	{r4, r5, lr}
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
     caa:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
     cac:	2b03      	cmp	r3, #3
     cae:	d80b      	bhi.n	cc8 <_ext_irq_enable+0x20>
		if (_map[i].pin == pin) {
     cb0:	00dc      	lsls	r4, r3, #3
     cb2:	4a10      	ldr	r2, [pc, #64]	; (cf4 <_ext_irq_enable+0x4c>)
     cb4:	1912      	adds	r2, r2, r4
     cb6:	6852      	ldr	r2, [r2, #4]
     cb8:	4282      	cmp	r2, r0
     cba:	d002      	beq.n	cc2 <_ext_irq_enable+0x1a>
	for (; i < ARRAY_SIZE(_map); i++) {
     cbc:	3301      	adds	r3, #1
     cbe:	b2db      	uxtb	r3, r3
     cc0:	e7f4      	b.n	cac <_ext_irq_enable+0x4>
			extint = _map[i].extint;
     cc2:	4b0c      	ldr	r3, [pc, #48]	; (cf4 <_ext_irq_enable+0x4c>)
     cc4:	5ce2      	ldrb	r2, [r4, r3]
			break;
     cc6:	e000      	b.n	cca <_ext_irq_enable+0x22>
	uint8_t extint = INVALID_EXTINT_NUMBER;
     cc8:	22ff      	movs	r2, #255	; 0xff
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
     cca:	2aff      	cmp	r2, #255	; 0xff
     ccc:	d00e      	beq.n	cec <_ext_irq_enable+0x44>
		return ERR_INVALID_ARG;
	}

	if (enable) {
     cce:	2900      	cmp	r1, #0
     cd0:	d106      	bne.n	ce0 <_ext_irq_enable+0x38>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
     cd2:	2301      	movs	r3, #1
     cd4:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
     cd6:	4a08      	ldr	r2, [pc, #32]	; (cf8 <_ext_irq_enable+0x50>)
     cd8:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     cda:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
     cdc:	2000      	movs	r0, #0
}
     cde:	bd30      	pop	{r4, r5, pc}
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
     ce0:	2301      	movs	r3, #1
     ce2:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
     ce4:	4a04      	ldr	r2, [pc, #16]	; (cf8 <_ext_irq_enable+0x50>)
     ce6:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
     ce8:	2000      	movs	r0, #0
     cea:	e7f8      	b.n	cde <_ext_irq_enable+0x36>
		return ERR_INVALID_ARG;
     cec:	200d      	movs	r0, #13
     cee:	4240      	negs	r0, r0
     cf0:	e7f5      	b.n	cde <_ext_irq_enable+0x36>
     cf2:	46c0      	nop			; (mov r8, r8)
     cf4:	00004a3c 	.word	0x00004a3c
     cf8:	40001800 	.word	0x40001800

00000cfc <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
     cfe:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     d00:	4b27      	ldr	r3, [pc, #156]	; (da0 <EIC_Handler+0xa4>)
     d02:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     d04:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     d06:	400a      	ands	r2, r1
     d08:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     d0a:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     d0c:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     d0e:	4b25      	ldr	r3, [pc, #148]	; (da4 <EIC_Handler+0xa8>)
     d10:	6818      	ldr	r0, [r3, #0]
     d12:	1e43      	subs	r3, r0, #1
     d14:	4198      	sbcs	r0, r3
     d16:	b2c0      	uxtb	r0, r0
     d18:	22d2      	movs	r2, #210	; 0xd2
     d1a:	4923      	ldr	r1, [pc, #140]	; (da8 <EIC_Handler+0xac>)
     d1c:	f7ff ff22 	bl	b64 <assert>
	uint32_t          pin = INVALID_PIN_NUMBER;
     d20:	2501      	movs	r5, #1
     d22:	426d      	negs	r5, r5

	while (flags) {
     d24:	e031      	b.n	d8a <EIC_Handler+0x8e>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
     d26:	00db      	lsls	r3, r3, #3
     d28:	4a20      	ldr	r2, [pc, #128]	; (dac <EIC_Handler+0xb0>)
     d2a:	18d3      	adds	r3, r2, r3
     d2c:	685d      	ldr	r5, [r3, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
     d2e:	1c6b      	adds	r3, r5, #1
     d30:	d003      	beq.n	d3a <EIC_Handler+0x3e>
				callback(pin);
     d32:	4b1c      	ldr	r3, [pc, #112]	; (da4 <EIC_Handler+0xa8>)
     d34:	681b      	ldr	r3, [r3, #0]
     d36:	0028      	movs	r0, r5
     d38:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     d3a:	2201      	movs	r2, #1
     d3c:	40a2      	lsls	r2, r4
     d3e:	9b01      	ldr	r3, [sp, #4]
     d40:	4393      	bics	r3, r2
     d42:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     d44:	9801      	ldr	r0, [sp, #4]
     d46:	f003 fcb1 	bl	46ac <__ffssi2>
     d4a:	3801      	subs	r0, #1
     d4c:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     d4e:	1c63      	adds	r3, r4, #1
     d50:	d014      	beq.n	d7c <EIC_Handler+0x80>
     d52:	2604      	movs	r6, #4
     d54:	2000      	movs	r0, #0
     d56:	e001      	b.n	d5c <EIC_Handler+0x60>
					upper = middle - 1;
     d58:	3901      	subs	r1, #1
     d5a:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
     d5c:	42b0      	cmp	r0, r6
     d5e:	d8e6      	bhi.n	d2e <EIC_Handler+0x32>
				middle = (upper + lower) >> 1;
     d60:	1833      	adds	r3, r6, r0
     d62:	105b      	asrs	r3, r3, #1
     d64:	b2d9      	uxtb	r1, r3
     d66:	22ff      	movs	r2, #255	; 0xff
     d68:	4013      	ands	r3, r2
				if (_map[middle].extint == pos) {
     d6a:	00df      	lsls	r7, r3, #3
     d6c:	4a0f      	ldr	r2, [pc, #60]	; (dac <EIC_Handler+0xb0>)
     d6e:	5cba      	ldrb	r2, [r7, r2]
     d70:	42a2      	cmp	r2, r4
     d72:	d0d8      	beq.n	d26 <EIC_Handler+0x2a>
				if (_map[middle].extint < pos) {
     d74:	daf0      	bge.n	d58 <EIC_Handler+0x5c>
					lower = middle + 1;
     d76:	3101      	adds	r1, #1
     d78:	b2c8      	uxtb	r0, r1
     d7a:	e7ef      	b.n	d5c <EIC_Handler+0x60>
	return ((Eic *)hw)->INTFLAG.reg;
     d7c:	4b08      	ldr	r3, [pc, #32]	; (da0 <EIC_Handler+0xa4>)
     d7e:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     d80:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     d82:	400a      	ands	r2, r1
     d84:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     d86:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     d88:	611a      	str	r2, [r3, #16]
	while (flags) {
     d8a:	9b01      	ldr	r3, [sp, #4]
     d8c:	2b00      	cmp	r3, #0
     d8e:	d005      	beq.n	d9c <EIC_Handler+0xa0>
		pos = ffs(flags) - 1;
     d90:	9801      	ldr	r0, [sp, #4]
     d92:	f003 fc8b 	bl	46ac <__ffssi2>
     d96:	3801      	subs	r0, #1
     d98:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     d9a:	e7d8      	b.n	d4e <EIC_Handler+0x52>
	}
}
     d9c:	b003      	add	sp, #12
     d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     da0:	40001800 	.word	0x40001800
     da4:	2000054c 	.word	0x2000054c
     da8:	00004a24 	.word	0x00004a24
     dac:	00004a3c 	.word	0x00004a3c

00000db0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     db0:	07c3      	lsls	r3, r0, #31
     db2:	d509      	bpl.n	dc8 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     db4:	4b0b      	ldr	r3, [pc, #44]	; (de4 <_gclk_init_generators_by_fref+0x34>)
     db6:	2280      	movs	r2, #128	; 0x80
     db8:	0052      	lsls	r2, r2, #1
     dba:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     dbc:	4a0a      	ldr	r2, [pc, #40]	; (de8 <_gclk_init_generators_by_fref+0x38>)
     dbe:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     dc0:	4b08      	ldr	r3, [pc, #32]	; (de4 <_gclk_init_generators_by_fref+0x34>)
     dc2:	785b      	ldrb	r3, [r3, #1]
     dc4:	09db      	lsrs	r3, r3, #7
     dc6:	d1fb      	bne.n	dc0 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     dc8:	0703      	lsls	r3, r0, #28
     dca:	d509      	bpl.n	de0 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     dcc:	4b05      	ldr	r3, [pc, #20]	; (de4 <_gclk_init_generators_by_fref+0x34>)
     dce:	2204      	movs	r2, #4
     dd0:	32ff      	adds	r2, #255	; 0xff
     dd2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     dd4:	4a05      	ldr	r2, [pc, #20]	; (dec <_gclk_init_generators_by_fref+0x3c>)
     dd6:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     dd8:	4b02      	ldr	r3, [pc, #8]	; (de4 <_gclk_init_generators_by_fref+0x34>)
     dda:	785b      	ldrb	r3, [r3, #1]
     ddc:	09db      	lsrs	r3, r3, #7
     dde:	d1fb      	bne.n	dd8 <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     de0:	4770      	bx	lr
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	40000c00 	.word	0x40000c00
     de8:	00010700 	.word	0x00010700
     dec:	00010303 	.word	0x00010303

00000df0 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     df0:	4b06      	ldr	r3, [pc, #24]	; (e0c <_pm_init+0x1c>)
     df2:	7a1a      	ldrb	r2, [r3, #8]
     df4:	b2d2      	uxtb	r2, r2
     df6:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     df8:	7a5a      	ldrb	r2, [r3, #9]
     dfa:	b2d2      	uxtb	r2, r2
     dfc:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     dfe:	7a9a      	ldrb	r2, [r3, #10]
     e00:	b2d2      	uxtb	r2, r2
     e02:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     e04:	7ada      	ldrb	r2, [r3, #11]
     e06:	b2d2      	uxtb	r2, r2
     e08:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     e0a:	4770      	bx	lr
     e0c:	40000400 	.word	0x40000400

00000e10 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     e10:	4b02      	ldr	r3, [pc, #8]	; (e1c <_sercom_get_hardware_index+0xc>)
     e12:	469c      	mov	ip, r3
     e14:	4460      	add	r0, ip
     e16:	0a80      	lsrs	r0, r0, #10
     e18:	b2c0      	uxtb	r0, r0
}
     e1a:	4770      	bx	lr
     e1c:	bdfff800 	.word	0xbdfff800

00000e20 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     e20:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
     e22:	07db      	lsls	r3, r3, #31
     e24:	d408      	bmi.n	e38 <_spi_sync_enable+0x18>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     e26:	6803      	ldr	r3, [r0, #0]
     e28:	2202      	movs	r2, #2
     e2a:	4313      	orrs	r3, r2
     e2c:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     e2e:	69c3      	ldr	r3, [r0, #28]
     e30:	079b      	lsls	r3, r3, #30
     e32:	d1fc      	bne.n	e2e <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
     e34:	2000      	movs	r0, #0
}
     e36:	4770      	bx	lr
		return ERR_BUSY;
     e38:	2004      	movs	r0, #4
     e3a:	4240      	negs	r0, r0
     e3c:	e7fb      	b.n	e36 <_spi_sync_enable+0x16>
	...

00000e40 <_get_i2cm_index>:
{
     e40:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     e42:	f7ff ffe5 	bl	e10 <_sercom_get_hardware_index>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     e46:	2300      	movs	r3, #0
     e48:	2b01      	cmp	r3, #1
     e4a:	d80b      	bhi.n	e64 <_get_i2cm_index+0x24>
		if (_i2cms[i].number == sercom_offset) {
     e4c:	005a      	lsls	r2, r3, #1
     e4e:	18d2      	adds	r2, r2, r3
     e50:	00d1      	lsls	r1, r2, #3
     e52:	4a09      	ldr	r2, [pc, #36]	; (e78 <_get_i2cm_index+0x38>)
     e54:	5c8a      	ldrb	r2, [r1, r2]
     e56:	4290      	cmp	r0, r2
     e58:	d002      	beq.n	e60 <_get_i2cm_index+0x20>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     e5a:	3301      	adds	r3, #1
     e5c:	b2db      	uxtb	r3, r3
     e5e:	e7f3      	b.n	e48 <_get_i2cm_index+0x8>
			return i;
     e60:	b258      	sxtb	r0, r3
     e62:	e007      	b.n	e74 <_get_i2cm_index+0x34>
	ASSERT(false);
     e64:	22e6      	movs	r2, #230	; 0xe6
     e66:	0092      	lsls	r2, r2, #2
     e68:	4904      	ldr	r1, [pc, #16]	; (e7c <_get_i2cm_index+0x3c>)
     e6a:	2000      	movs	r0, #0
     e6c:	f7ff fe7a 	bl	b64 <assert>
	return -1;
     e70:	2001      	movs	r0, #1
     e72:	4240      	negs	r0, r0
}
     e74:	bd10      	pop	{r4, pc}
     e76:	46c0      	nop			; (mov r8, r8)
     e78:	00004a78 	.word	0x00004a78
     e7c:	00004a5c 	.word	0x00004a5c

00000e80 <_i2c_m_sync_init_impl>:
{
     e80:	b570      	push	{r4, r5, r6, lr}
     e82:	0005      	movs	r5, r0
     e84:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
     e86:	0008      	movs	r0, r1
     e88:	f7ff ffda 	bl	e40 <_get_i2cm_index>
     e8c:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
     e8e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
     e90:	07db      	lsls	r3, r3, #31
     e92:	d41d      	bmi.n	ed0 <_i2c_m_sync_init_impl+0x50>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
     e94:	0043      	lsls	r3, r0, #1
     e96:	181b      	adds	r3, r3, r0
     e98:	00da      	lsls	r2, r3, #3
     e9a:	4b29      	ldr	r3, [pc, #164]	; (f40 <_i2c_m_sync_init_impl+0xc0>)
     e9c:	189b      	adds	r3, r3, r2
     e9e:	685a      	ldr	r2, [r3, #4]
     ea0:	231c      	movs	r3, #28
     ea2:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ea4:	69e3      	ldr	r3, [r4, #28]
     ea6:	079b      	lsls	r3, r3, #30
     ea8:	d1fc      	bne.n	ea4 <_i2c_m_sync_init_impl+0x24>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     eaa:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
     eac:	079b      	lsls	r3, r3, #30
     eae:	d509      	bpl.n	ec4 <_i2c_m_sync_init_impl+0x44>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     eb0:	6823      	ldr	r3, [r4, #0]
     eb2:	2102      	movs	r1, #2
     eb4:	438b      	bics	r3, r1
     eb6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     eb8:	69e3      	ldr	r3, [r4, #28]
     eba:	079b      	lsls	r3, r3, #30
     ebc:	d1fc      	bne.n	eb8 <_i2c_m_sync_init_impl+0x38>
     ebe:	69e3      	ldr	r3, [r4, #28]
     ec0:	079b      	lsls	r3, r3, #30
     ec2:	d4fc      	bmi.n	ebe <_i2c_m_sync_init_impl+0x3e>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
     ec4:	2301      	movs	r3, #1
     ec6:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     ec8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     eca:	69e3      	ldr	r3, [r4, #28]
     ecc:	079b      	lsls	r3, r3, #30
     ece:	d1fc      	bne.n	eca <_i2c_m_sync_init_impl+0x4a>
     ed0:	69e3      	ldr	r3, [r4, #28]
     ed2:	07db      	lsls	r3, r3, #31
     ed4:	d4fc      	bmi.n	ed0 <_i2c_m_sync_init_impl+0x50>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
     ed6:	0043      	lsls	r3, r0, #1
     ed8:	181b      	adds	r3, r3, r0
     eda:	00da      	lsls	r2, r3, #3
     edc:	4b18      	ldr	r3, [pc, #96]	; (f40 <_i2c_m_sync_init_impl+0xc0>)
     ede:	189b      	adds	r3, r3, r2
     ee0:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     ee2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ee4:	69e3      	ldr	r3, [r4, #28]
     ee6:	079b      	lsls	r3, r3, #30
     ee8:	d1fc      	bne.n	ee4 <_i2c_m_sync_init_impl+0x64>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
     eea:	0043      	lsls	r3, r0, #1
     eec:	181b      	adds	r3, r3, r0
     eee:	00da      	lsls	r2, r3, #3
     ef0:	4b13      	ldr	r3, [pc, #76]	; (f40 <_i2c_m_sync_init_impl+0xc0>)
     ef2:	189b      	adds	r3, r3, r2
     ef4:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     ef6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ef8:	69e3      	ldr	r3, [r4, #28]
     efa:	075b      	lsls	r3, r3, #29
     efc:	d4fc      	bmi.n	ef8 <_i2c_m_sync_init_impl+0x78>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
     efe:	0042      	lsls	r2, r0, #1
     f00:	1812      	adds	r2, r2, r0
     f02:	00d1      	lsls	r1, r2, #3
     f04:	4b0e      	ldr	r3, [pc, #56]	; (f40 <_i2c_m_sync_init_impl+0xc0>)
     f06:	185b      	adds	r3, r3, r1
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
     f08:	68da      	ldr	r2, [r3, #12]
     f0a:	60e2      	str	r2, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
     f0c:	79da      	ldrb	r2, [r3, #7]
     f0e:	2303      	movs	r3, #3
     f10:	401a      	ands	r2, r3
     f12:	81aa      	strh	r2, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
     f14:	3b02      	subs	r3, #2
     f16:	4293      	cmp	r3, r2
     f18:	419b      	sbcs	r3, r3
     f1a:	425b      	negs	r3, r3

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
     f1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
     f1e:	4909      	ldr	r1, [pc, #36]	; (f44 <_i2c_m_sync_init_impl+0xc4>)
     f20:	400a      	ands	r2, r1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
     f22:	039b      	lsls	r3, r3, #14
     f24:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
     f26:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f28:	69e3      	ldr	r3, [r4, #28]
     f2a:	075b      	lsls	r3, r3, #29
     f2c:	d4fc      	bmi.n	f28 <_i2c_m_sync_init_impl+0xa8>
	service->trise = _i2cms[i].trise;
     f2e:	0043      	lsls	r3, r0, #1
     f30:	1818      	adds	r0, r3, r0
     f32:	00c2      	lsls	r2, r0, #3
     f34:	4b02      	ldr	r3, [pc, #8]	; (f40 <_i2c_m_sync_init_impl+0xc0>)
     f36:	189b      	adds	r3, r3, r2
     f38:	8a5b      	ldrh	r3, [r3, #18]
     f3a:	81eb      	strh	r3, [r5, #14]
}
     f3c:	2000      	movs	r0, #0
     f3e:	bd70      	pop	{r4, r5, r6, pc}
     f40:	00004a78 	.word	0x00004a78
     f44:	ffffbfff 	.word	0xffffbfff

00000f48 <_sercom_i2c_sync_send_address>:
{
     f48:	b570      	push	{r4, r5, r6, lr}
     f4a:	0005      	movs	r5, r0
	void *             hw    = i2c_dev->hw;
     f4c:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     f4e:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     f50:	0edb      	lsrs	r3, r3, #27
     f52:	2601      	movs	r6, #1
     f54:	401e      	ands	r6, r3
	ASSERT(i2c_dev);
     f56:	1e43      	subs	r3, r0, #1
     f58:	4198      	sbcs	r0, r3
     f5a:	b2c0      	uxtb	r0, r0
     f5c:	4a8e      	ldr	r2, [pc, #568]	; (1198 <STACK_SIZE+0x198>)
     f5e:	498f      	ldr	r1, [pc, #572]	; (119c <STACK_SIZE+0x19c>)
     f60:	f7ff fe00 	bl	b64 <assert>
	if (msg->len == 1 && sclsm) {
     f64:	686b      	ldr	r3, [r5, #4]
     f66:	2b01      	cmp	r3, #1
     f68:	d04d      	beq.n	1006 <STACK_SIZE+0x6>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     f6a:	6863      	ldr	r3, [r4, #4]
     f6c:	4a8c      	ldr	r2, [pc, #560]	; (11a0 <STACK_SIZE+0x1a0>)
     f6e:	4013      	ands	r3, r2
     f70:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f72:	69e3      	ldr	r3, [r4, #28]
     f74:	075b      	lsls	r3, r3, #29
     f76:	d4fc      	bmi.n	f72 <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
     f78:	882b      	ldrh	r3, [r5, #0]
     f7a:	055a      	lsls	r2, r3, #21
     f7c:	d54e      	bpl.n	101c <STACK_SIZE+0x1c>
		if (msg->flags & I2C_M_RD) {
     f7e:	886a      	ldrh	r2, [r5, #2]
     f80:	07d2      	lsls	r2, r2, #31
     f82:	d504      	bpl.n	f8e <_sercom_i2c_sync_send_address+0x46>
			msg->flags |= I2C_M_TEN;
     f84:	886a      	ldrh	r2, [r5, #2]
     f86:	2180      	movs	r1, #128	; 0x80
     f88:	00c9      	lsls	r1, r1, #3
     f8a:	430a      	orrs	r2, r1
     f8c:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
     f8e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     f90:	4a84      	ldr	r2, [pc, #528]	; (11a4 <STACK_SIZE+0x1a4>)
     f92:	401a      	ands	r2, r3
     f94:	69e3      	ldr	r3, [r4, #28]
     f96:	075b      	lsls	r3, r3, #29
     f98:	d4fc      	bmi.n	f94 <_sercom_i2c_sync_send_address+0x4c>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
     f9c:	2180      	movs	r1, #128	; 0x80
     f9e:	01c9      	lsls	r1, r1, #7
     fa0:	400b      	ands	r3, r1
     fa2:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
     fa4:	2280      	movs	r2, #128	; 0x80
     fa6:	0212      	lsls	r2, r2, #8
     fa8:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     faa:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     fac:	69e3      	ldr	r3, [r4, #28]
     fae:	075b      	lsls	r3, r3, #29
     fb0:	d4fc      	bmi.n	fac <_sercom_i2c_sync_send_address+0x64>
	void *   hw      = i2c_dev->hw;
     fb2:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
     fb4:	4a7c      	ldr	r2, [pc, #496]	; (11a8 <STACK_SIZE+0x1a8>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     fb6:	7e33      	ldrb	r3, [r6, #24]
     fb8:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
     fba:	0018      	movs	r0, r3
		if (timeout-- == 0) {
     fbc:	1e51      	subs	r1, r2, #1
     fbe:	2a00      	cmp	r2, #0
     fc0:	d002      	beq.n	fc8 <_sercom_i2c_sync_send_address+0x80>
     fc2:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     fc4:	079b      	lsls	r3, r3, #30
     fc6:	d0f6      	beq.n	fb6 <_sercom_i2c_sync_send_address+0x6e>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     fc8:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     fca:	0edb      	lsrs	r3, r3, #27
     fcc:	2201      	movs	r2, #1
     fce:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     fd0:	69e3      	ldr	r3, [r4, #28]
     fd2:	075b      	lsls	r3, r3, #29
     fd4:	d4fc      	bmi.n	fd0 <_sercom_i2c_sync_send_address+0x88>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     fd6:	8b63      	ldrh	r3, [r4, #26]
     fd8:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
     fda:	07c1      	lsls	r1, r0, #31
     fdc:	d400      	bmi.n	fe0 <_sercom_i2c_sync_send_address+0x98>
     fde:	e08f      	b.n	1100 <STACK_SIZE+0x100>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     fe0:	079a      	lsls	r2, r3, #30
     fe2:	d52f      	bpl.n	1044 <STACK_SIZE+0x44>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     fe4:	2201      	movs	r2, #1
     fe6:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
     fe8:	886a      	ldrh	r2, [r5, #2]
     fea:	2180      	movs	r1, #128	; 0x80
     fec:	0149      	lsls	r1, r1, #5
     fee:	430a      	orrs	r2, r1
     ff0:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     ff2:	886a      	ldrh	r2, [r5, #2]
     ff4:	496d      	ldr	r1, [pc, #436]	; (11ac <STACK_SIZE+0x1ac>)
     ff6:	400a      	ands	r2, r1
     ff8:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     ffa:	07db      	lsls	r3, r3, #31
     ffc:	d400      	bmi.n	1000 <STACK_SIZE>
     ffe:	e0c6      	b.n	118e <STACK_SIZE+0x18e>
				return I2C_ERR_BUS;
    1000:	2005      	movs	r0, #5
    1002:	4240      	negs	r0, r0
    1004:	e0a2      	b.n	114c <STACK_SIZE+0x14c>
	if (msg->len == 1 && sclsm) {
    1006:	2e00      	cmp	r6, #0
    1008:	d0af      	beq.n	f6a <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    100a:	6862      	ldr	r2, [r4, #4]
    100c:	2380      	movs	r3, #128	; 0x80
    100e:	02db      	lsls	r3, r3, #11
    1010:	4313      	orrs	r3, r2
    1012:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1014:	69e3      	ldr	r3, [r4, #28]
    1016:	075b      	lsls	r3, r3, #29
    1018:	d4fc      	bmi.n	1014 <STACK_SIZE+0x14>
    101a:	e7ad      	b.n	f78 <_sercom_i2c_sync_send_address+0x30>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    101c:	005b      	lsls	r3, r3, #1
    101e:	22ff      	movs	r2, #255	; 0xff
    1020:	4013      	ands	r3, r2
    1022:	886a      	ldrh	r2, [r5, #2]
    1024:	2101      	movs	r1, #1
    1026:	400a      	ands	r2, r1
    1028:	431a      	orrs	r2, r3
    102a:	69e3      	ldr	r3, [r4, #28]
    102c:	075b      	lsls	r3, r3, #29
    102e:	d4fc      	bmi.n	102a <STACK_SIZE+0x2a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1030:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1032:	2180      	movs	r1, #128	; 0x80
    1034:	01c9      	lsls	r1, r1, #7
    1036:	400b      	ands	r3, r1
		hri_sercomi2cm_write_ADDR_reg(hw,
    1038:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    103a:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    103c:	69e3      	ldr	r3, [r4, #28]
    103e:	075b      	lsls	r3, r3, #29
    1040:	d4fc      	bmi.n	103c <STACK_SIZE+0x3c>
    1042:	e7b6      	b.n	fb2 <_sercom_i2c_sync_send_address+0x6a>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1044:	075b      	lsls	r3, r3, #29
    1046:	d41b      	bmi.n	1080 <STACK_SIZE+0x80>
			if (msg->flags & I2C_M_TEN) {
    1048:	886b      	ldrh	r3, [r5, #2]
    104a:	055b      	lsls	r3, r3, #21
    104c:	d534      	bpl.n	10b8 <STACK_SIZE+0xb8>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    104e:	882a      	ldrh	r2, [r5, #0]
    1050:	1212      	asrs	r2, r2, #8
    1052:	0052      	lsls	r2, r2, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1054:	2306      	movs	r3, #6
    1056:	401a      	ands	r2, r3
    1058:	69e3      	ldr	r3, [r4, #28]
    105a:	075b      	lsls	r3, r3, #29
    105c:	d4fc      	bmi.n	1058 <STACK_SIZE+0x58>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    105e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1060:	2180      	movs	r1, #128	; 0x80
    1062:	01c9      	lsls	r1, r1, #7
    1064:	400b      	ands	r3, r1
    1066:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    1068:	22f1      	movs	r2, #241	; 0xf1
    106a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    106c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    106e:	69e3      	ldr	r3, [r4, #28]
    1070:	075b      	lsls	r3, r3, #29
    1072:	d4fc      	bmi.n	106e <STACK_SIZE+0x6e>
				msg->flags &= ~I2C_M_TEN;
    1074:	886b      	ldrh	r3, [r5, #2]
    1076:	4a4e      	ldr	r2, [pc, #312]	; (11b0 <STACK_SIZE+0x1b0>)
    1078:	4013      	ands	r3, r2
    107a:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    107c:	2000      	movs	r0, #0
    107e:	e065      	b.n	114c <STACK_SIZE+0x14c>
				if (msg->len > 0) {
    1080:	686b      	ldr	r3, [r5, #4]
    1082:	2b00      	cmp	r3, #0
    1084:	dd04      	ble.n	1090 <STACK_SIZE+0x90>
					msg->flags |= I2C_M_FAIL;
    1086:	886b      	ldrh	r3, [r5, #2]
    1088:	2280      	movs	r2, #128	; 0x80
    108a:	0152      	lsls	r2, r2, #5
    108c:	4313      	orrs	r3, r2
    108e:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1090:	886b      	ldrh	r3, [r5, #2]
    1092:	b21b      	sxth	r3, r3
    1094:	2b00      	cmp	r3, #0
    1096:	db06      	blt.n	10a6 <STACK_SIZE+0xa6>
				msg->flags &= ~I2C_M_BUSY;
    1098:	886b      	ldrh	r3, [r5, #2]
    109a:	4a44      	ldr	r2, [pc, #272]	; (11ac <STACK_SIZE+0x1ac>)
    109c:	4013      	ands	r3, r2
    109e:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    10a0:	2002      	movs	r0, #2
    10a2:	4240      	negs	r0, r0
    10a4:	e052      	b.n	114c <STACK_SIZE+0x14c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    10a6:	6862      	ldr	r2, [r4, #4]
    10a8:	23c0      	movs	r3, #192	; 0xc0
    10aa:	029b      	lsls	r3, r3, #10
    10ac:	4313      	orrs	r3, r2
    10ae:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10b0:	69e3      	ldr	r3, [r4, #28]
    10b2:	075b      	lsls	r3, r3, #29
    10b4:	d4fc      	bmi.n	10b0 <STACK_SIZE+0xb0>
    10b6:	e7ef      	b.n	1098 <STACK_SIZE+0x98>
			if (msg->len == 0) {
    10b8:	6868      	ldr	r0, [r5, #4]
    10ba:	2800      	cmp	r0, #0
    10bc:	d111      	bne.n	10e2 <STACK_SIZE+0xe2>
				if (msg->flags & I2C_M_STOP) {
    10be:	886b      	ldrh	r3, [r5, #2]
    10c0:	b21b      	sxth	r3, r3
    10c2:	2b00      	cmp	r3, #0
    10c4:	db04      	blt.n	10d0 <STACK_SIZE+0xd0>
				msg->flags &= ~I2C_M_BUSY;
    10c6:	886b      	ldrh	r3, [r5, #2]
    10c8:	4a38      	ldr	r2, [pc, #224]	; (11ac <STACK_SIZE+0x1ac>)
    10ca:	4013      	ands	r3, r2
    10cc:	806b      	strh	r3, [r5, #2]
    10ce:	e03d      	b.n	114c <STACK_SIZE+0x14c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    10d0:	6862      	ldr	r2, [r4, #4]
    10d2:	23c0      	movs	r3, #192	; 0xc0
    10d4:	029b      	lsls	r3, r3, #10
    10d6:	4313      	orrs	r3, r2
    10d8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10da:	69e3      	ldr	r3, [r4, #28]
    10dc:	075b      	lsls	r3, r3, #29
    10de:	d4fc      	bmi.n	10da <STACK_SIZE+0xda>
    10e0:	e7f1      	b.n	10c6 <STACK_SIZE+0xc6>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    10e2:	68ab      	ldr	r3, [r5, #8]
    10e4:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    10e6:	2328      	movs	r3, #40	; 0x28
    10e8:	54e2      	strb	r2, [r4, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10ea:	69e3      	ldr	r3, [r4, #28]
    10ec:	075b      	lsls	r3, r3, #29
    10ee:	d4fc      	bmi.n	10ea <STACK_SIZE+0xea>
				msg->buffer++;
    10f0:	68ab      	ldr	r3, [r5, #8]
    10f2:	3301      	adds	r3, #1
    10f4:	60ab      	str	r3, [r5, #8]
				msg->len--;
    10f6:	686b      	ldr	r3, [r5, #4]
    10f8:	3b01      	subs	r3, #1
    10fa:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    10fc:	2000      	movs	r0, #0
    10fe:	e025      	b.n	114c <STACK_SIZE+0x14c>
	} else if (flags & SB_FLAG) {
    1100:	0781      	lsls	r1, r0, #30
    1102:	d547      	bpl.n	1194 <STACK_SIZE+0x194>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1104:	6869      	ldr	r1, [r5, #4]
    1106:	2900      	cmp	r1, #0
    1108:	d03c      	beq.n	1184 <STACK_SIZE+0x184>
    110a:	075b      	lsls	r3, r3, #29
    110c:	d43a      	bmi.n	1184 <STACK_SIZE+0x184>
			msg->len--;
    110e:	3901      	subs	r1, #1
    1110:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1112:	2900      	cmp	r1, #0
    1114:	d101      	bne.n	111a <STACK_SIZE+0x11a>
    1116:	2a00      	cmp	r2, #0
    1118:	d01b      	beq.n	1152 <STACK_SIZE+0x152>
    111a:	2901      	cmp	r1, #1
    111c:	d017      	beq.n	114e <STACK_SIZE+0x14e>
			if (msg->len == 0) {
    111e:	686b      	ldr	r3, [r5, #4]
    1120:	2b00      	cmp	r3, #0
    1122:	d107      	bne.n	1134 <STACK_SIZE+0x134>
				if (msg->flags & I2C_M_STOP) {
    1124:	886b      	ldrh	r3, [r5, #2]
    1126:	b21b      	sxth	r3, r3
    1128:	2b00      	cmp	r3, #0
    112a:	db1b      	blt.n	1164 <STACK_SIZE+0x164>
				msg->flags &= ~I2C_M_BUSY;
    112c:	886b      	ldrh	r3, [r5, #2]
    112e:	4a1f      	ldr	r2, [pc, #124]	; (11ac <STACK_SIZE+0x1ac>)
    1130:	4013      	ands	r3, r2
    1132:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1134:	68aa      	ldr	r2, [r5, #8]
    1136:	1c53      	adds	r3, r2, #1
    1138:	60ab      	str	r3, [r5, #8]
    113a:	69e3      	ldr	r3, [r4, #28]
    113c:	075b      	lsls	r3, r3, #29
    113e:	d4fc      	bmi.n	113a <STACK_SIZE+0x13a>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1140:	2328      	movs	r3, #40	; 0x28
    1142:	5ce3      	ldrb	r3, [r4, r3]
    1144:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1146:	2302      	movs	r3, #2
    1148:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    114a:	2000      	movs	r0, #0
}
    114c:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    114e:	2a00      	cmp	r2, #0
    1150:	d0e5      	beq.n	111e <STACK_SIZE+0x11e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1152:	6862      	ldr	r2, [r4, #4]
    1154:	2380      	movs	r3, #128	; 0x80
    1156:	02db      	lsls	r3, r3, #11
    1158:	4313      	orrs	r3, r2
    115a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    115c:	69e3      	ldr	r3, [r4, #28]
    115e:	075b      	lsls	r3, r3, #29
    1160:	d4fc      	bmi.n	115c <STACK_SIZE+0x15c>
    1162:	e7dc      	b.n	111e <STACK_SIZE+0x11e>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1164:	6863      	ldr	r3, [r4, #4]
    1166:	4a11      	ldr	r2, [pc, #68]	; (11ac <STACK_SIZE+0x1ac>)
    1168:	4013      	ands	r3, r2
    116a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    116c:	69e3      	ldr	r3, [r4, #28]
    116e:	075b      	lsls	r3, r3, #29
    1170:	d4fc      	bmi.n	116c <STACK_SIZE+0x16c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1172:	6862      	ldr	r2, [r4, #4]
    1174:	23c0      	movs	r3, #192	; 0xc0
    1176:	029b      	lsls	r3, r3, #10
    1178:	4313      	orrs	r3, r2
    117a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    117c:	69e3      	ldr	r3, [r4, #28]
    117e:	075b      	lsls	r3, r3, #29
    1180:	d4fc      	bmi.n	117c <STACK_SIZE+0x17c>
    1182:	e7d3      	b.n	112c <STACK_SIZE+0x12c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1184:	2302      	movs	r3, #2
    1186:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1188:	2002      	movs	r0, #2
    118a:	4240      	negs	r0, r0
    118c:	e7de      	b.n	114c <STACK_SIZE+0x14c>
			return I2C_ERR_BAD_ADDRESS;
    118e:	2004      	movs	r0, #4
    1190:	4240      	negs	r0, r0
    1192:	e7db      	b.n	114c <STACK_SIZE+0x14c>
	return I2C_OK;
    1194:	2000      	movs	r0, #0
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    1196:	e7d9      	b.n	114c <STACK_SIZE+0x14c>
    1198:	00000594 	.word	0x00000594
    119c:	00004a5c 	.word	0x00004a5c
    11a0:	fffbffff 	.word	0xfffbffff
    11a4:	000007fe 	.word	0x000007fe
    11a8:	0000ffff 	.word	0x0000ffff
    11ac:	fffffeff 	.word	0xfffffeff
    11b0:	fffffbff 	.word	0xfffffbff

000011b4 <_i2c_m_sync_init>:
{
    11b4:	b570      	push	{r4, r5, r6, lr}
    11b6:	0004      	movs	r4, r0
    11b8:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
    11ba:	1e43      	subs	r3, r0, #1
    11bc:	4198      	sbcs	r0, r3
    11be:	b2c0      	uxtb	r0, r0
    11c0:	4a04      	ldr	r2, [pc, #16]	; (11d4 <_i2c_m_sync_init+0x20>)
    11c2:	4905      	ldr	r1, [pc, #20]	; (11d8 <_i2c_m_sync_init+0x24>)
    11c4:	f7ff fcce 	bl	b64 <assert>
	i2c_dev->hw = hw;
    11c8:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    11ca:	0029      	movs	r1, r5
    11cc:	0020      	movs	r0, r4
    11ce:	f7ff fe57 	bl	e80 <_i2c_m_sync_init_impl>
}
    11d2:	bd70      	pop	{r4, r5, r6, pc}
    11d4:	00000507 	.word	0x00000507
    11d8:	00004a5c 	.word	0x00004a5c

000011dc <_i2c_m_sync_enable>:
{
    11dc:	b570      	push	{r4, r5, r6, lr}
    11de:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
    11e0:	4d19      	ldr	r5, [pc, #100]	; (1248 <_i2c_m_sync_enable+0x6c>)
    11e2:	1e43      	subs	r3, r0, #1
    11e4:	4198      	sbcs	r0, r3
    11e6:	b2c0      	uxtb	r0, r0
    11e8:	4a18      	ldr	r2, [pc, #96]	; (124c <_i2c_m_sync_enable+0x70>)
    11ea:	0029      	movs	r1, r5
    11ec:	f7ff fcba 	bl	b64 <assert>
	return _i2c_m_enable_implementation(i2c_dev->hw);
    11f0:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    11f2:	0020      	movs	r0, r4
    11f4:	1e43      	subs	r3, r0, #1
    11f6:	4198      	sbcs	r0, r3
    11f8:	b2c0      	uxtb	r0, r0
    11fa:	4a15      	ldr	r2, [pc, #84]	; (1250 <_i2c_m_sync_enable+0x74>)
    11fc:	0029      	movs	r1, r5
    11fe:	f7ff fcb1 	bl	b64 <assert>
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1202:	6823      	ldr	r3, [r4, #0]
    1204:	2202      	movs	r2, #2
    1206:	4313      	orrs	r3, r2
    1208:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    120a:	69e3      	ldr	r3, [r4, #28]
    120c:	079b      	lsls	r3, r3, #30
    120e:	d1fc      	bne.n	120a <_i2c_m_sync_enable+0x2e>
    1210:	2004      	movs	r0, #4
    1212:	4910      	ldr	r1, [pc, #64]	; (1254 <_i2c_m_sync_enable+0x78>)
    1214:	69e3      	ldr	r3, [r4, #28]
    1216:	075b      	lsls	r3, r3, #29
    1218:	d4fc      	bmi.n	1214 <_i2c_m_sync_enable+0x38>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    121a:	8b62      	ldrh	r2, [r4, #26]
    121c:	0912      	lsrs	r2, r2, #4
    121e:	2303      	movs	r3, #3
    1220:	4013      	ands	r3, r2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    1222:	2b01      	cmp	r3, #1
    1224:	d00b      	beq.n	123e <_i2c_m_sync_enable+0x62>
		timeout--;
    1226:	3901      	subs	r1, #1
		if (timeout <= 0) {
    1228:	2900      	cmp	r1, #0
    122a:	dcf3      	bgt.n	1214 <_i2c_m_sync_enable+0x38>
			if (--timeout_attempt)
    122c:	3801      	subs	r0, #1
    122e:	2800      	cmp	r0, #0
    1230:	d007      	beq.n	1242 <_i2c_m_sync_enable+0x66>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    1232:	2310      	movs	r3, #16
    1234:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1236:	69e3      	ldr	r3, [r4, #28]
    1238:	075b      	lsls	r3, r3, #29
    123a:	d4fc      	bmi.n	1236 <_i2c_m_sync_enable+0x5a>
    123c:	e7e9      	b.n	1212 <_i2c_m_sync_enable+0x36>
	return ERR_NONE;
    123e:	2000      	movs	r0, #0
}
    1240:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    1242:	2006      	movs	r0, #6
    1244:	4240      	negs	r0, r0
	return _i2c_m_enable_implementation(i2c_dev->hw);
    1246:	e7fb      	b.n	1240 <_i2c_m_sync_enable+0x64>
    1248:	00004a5c 	.word	0x00004a5c
    124c:	00000524 	.word	0x00000524
    1250:	000005f4 	.word	0x000005f4
    1254:	0000ffff 	.word	0x0000ffff

00001258 <_i2c_m_sync_transfer>:
{
    1258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    125a:	0005      	movs	r5, r0
    125c:	000e      	movs	r6, r1
	void *   hw = i2c_dev->hw;
    125e:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    1260:	4f95      	ldr	r7, [pc, #596]	; (14b8 <_i2c_m_sync_transfer+0x260>)
    1262:	1e43      	subs	r3, r0, #1
    1264:	4198      	sbcs	r0, r3
    1266:	b2c0      	uxtb	r0, r0
    1268:	4a94      	ldr	r2, [pc, #592]	; (14bc <_i2c_m_sync_transfer+0x264>)
    126a:	0039      	movs	r1, r7
    126c:	f7ff fc7a 	bl	b64 <assert>
	ASSERT(i2c_dev->hw);
    1270:	6928      	ldr	r0, [r5, #16]
    1272:	1e43      	subs	r3, r0, #1
    1274:	4198      	sbcs	r0, r3
    1276:	b2c0      	uxtb	r0, r0
    1278:	22b8      	movs	r2, #184	; 0xb8
    127a:	00d2      	lsls	r2, r2, #3
    127c:	0039      	movs	r1, r7
    127e:	f7ff fc71 	bl	b64 <assert>
	ASSERT(msg);
    1282:	0030      	movs	r0, r6
    1284:	1e43      	subs	r3, r0, #1
    1286:	4198      	sbcs	r0, r3
    1288:	b2c0      	uxtb	r0, r0
    128a:	4a8d      	ldr	r2, [pc, #564]	; (14c0 <_i2c_m_sync_transfer+0x268>)
    128c:	0039      	movs	r1, r7
    128e:	f7ff fc69 	bl	b64 <assert>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1292:	886b      	ldrh	r3, [r5, #2]
    1294:	05db      	lsls	r3, r3, #23
    1296:	d500      	bpl.n	129a <_i2c_m_sync_transfer+0x42>
    1298:	e10b      	b.n	14b2 <_i2c_m_sync_transfer+0x25a>
	msg->flags |= I2C_M_BUSY;
    129a:	8872      	ldrh	r2, [r6, #2]
    129c:	2380      	movs	r3, #128	; 0x80
    129e:	005b      	lsls	r3, r3, #1
    12a0:	469c      	mov	ip, r3
    12a2:	431a      	orrs	r2, r3
    12a4:	8072      	strh	r2, [r6, #2]
	i2c_dev->service.msg = *msg;
    12a6:	002a      	movs	r2, r5
    12a8:	0031      	movs	r1, r6
    12aa:	c989      	ldmia	r1!, {r0, r3, r7}
    12ac:	c289      	stmia	r2!, {r0, r3, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    12ae:	6862      	ldr	r2, [r4, #4]
    12b0:	4663      	mov	r3, ip
    12b2:	4313      	orrs	r3, r2
    12b4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12b6:	69e3      	ldr	r3, [r4, #28]
    12b8:	075b      	lsls	r3, r3, #29
    12ba:	d4fc      	bmi.n	12b6 <_i2c_m_sync_transfer+0x5e>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    12bc:	0028      	movs	r0, r5
    12be:	f7ff fe43 	bl	f48 <_sercom_i2c_sync_send_address>
	if (ret) {
    12c2:	2800      	cmp	r0, #0
    12c4:	d100      	bne.n	12c8 <_i2c_m_sync_transfer+0x70>
    12c6:	e09d      	b.n	1404 <_i2c_m_sync_transfer+0x1ac>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    12c8:	886b      	ldrh	r3, [r5, #2]
    12ca:	4a7e      	ldr	r2, [pc, #504]	; (14c4 <_i2c_m_sync_transfer+0x26c>)
    12cc:	4013      	ands	r3, r2
    12ce:	806b      	strh	r3, [r5, #2]
}
    12d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return I2C_ERR_BUS;
    12d2:	2005      	movs	r0, #5
    12d4:	4240      	negs	r0, r0
    12d6:	e0a6      	b.n	1426 <_i2c_m_sync_transfer+0x1ce>
			if (msg->flags & I2C_M_STOP) {
    12d8:	8873      	ldrh	r3, [r6, #2]
    12da:	b21b      	sxth	r3, r3
    12dc:	2b00      	cmp	r3, #0
    12de:	db04      	blt.n	12ea <_i2c_m_sync_transfer+0x92>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    12e0:	886b      	ldrh	r3, [r5, #2]
    12e2:	4a78      	ldr	r2, [pc, #480]	; (14c4 <_i2c_m_sync_transfer+0x26c>)
    12e4:	4013      	ands	r3, r2
    12e6:	806b      	strh	r3, [r5, #2]
			return ret;
    12e8:	e7f2      	b.n	12d0 <_i2c_m_sync_transfer+0x78>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    12ea:	6862      	ldr	r2, [r4, #4]
    12ec:	23c0      	movs	r3, #192	; 0xc0
    12ee:	029b      	lsls	r3, r3, #10
    12f0:	4313      	orrs	r3, r2
    12f2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12f4:	69e3      	ldr	r3, [r4, #28]
    12f6:	075b      	lsls	r3, r3, #29
    12f8:	d4fc      	bmi.n	12f4 <_i2c_m_sync_transfer+0x9c>
    12fa:	e7f1      	b.n	12e0 <_i2c_m_sync_transfer+0x88>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    12fc:	0753      	lsls	r3, r2, #29
    12fe:	d41b      	bmi.n	1338 <_i2c_m_sync_transfer+0xe0>
			if (msg->flags & I2C_M_TEN) {
    1300:	886b      	ldrh	r3, [r5, #2]
    1302:	055b      	lsls	r3, r3, #21
    1304:	d534      	bpl.n	1370 <_i2c_m_sync_transfer+0x118>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1306:	882a      	ldrh	r2, [r5, #0]
    1308:	1212      	asrs	r2, r2, #8
    130a:	0052      	lsls	r2, r2, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    130c:	2306      	movs	r3, #6
    130e:	401a      	ands	r2, r3
    1310:	69e3      	ldr	r3, [r4, #28]
    1312:	075b      	lsls	r3, r3, #29
    1314:	d4fc      	bmi.n	1310 <_i2c_m_sync_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1316:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1318:	2180      	movs	r1, #128	; 0x80
    131a:	01c9      	lsls	r1, r1, #7
    131c:	400b      	ands	r3, r1
    131e:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    1320:	22f1      	movs	r2, #241	; 0xf1
    1322:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1324:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1326:	69e3      	ldr	r3, [r4, #28]
    1328:	075b      	lsls	r3, r3, #29
    132a:	d4fc      	bmi.n	1326 <_i2c_m_sync_transfer+0xce>
				msg->flags &= ~I2C_M_TEN;
    132c:	886b      	ldrh	r3, [r5, #2]
    132e:	4a66      	ldr	r2, [pc, #408]	; (14c8 <_i2c_m_sync_transfer+0x270>)
    1330:	4013      	ands	r3, r2
    1332:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1334:	2000      	movs	r0, #0
    1336:	e065      	b.n	1404 <_i2c_m_sync_transfer+0x1ac>
				if (msg->len > 0) {
    1338:	686b      	ldr	r3, [r5, #4]
    133a:	2b00      	cmp	r3, #0
    133c:	dd04      	ble.n	1348 <_i2c_m_sync_transfer+0xf0>
					msg->flags |= I2C_M_FAIL;
    133e:	886b      	ldrh	r3, [r5, #2]
    1340:	2280      	movs	r2, #128	; 0x80
    1342:	0152      	lsls	r2, r2, #5
    1344:	4313      	orrs	r3, r2
    1346:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1348:	886b      	ldrh	r3, [r5, #2]
    134a:	b21b      	sxth	r3, r3
    134c:	2b00      	cmp	r3, #0
    134e:	db06      	blt.n	135e <_i2c_m_sync_transfer+0x106>
				msg->flags &= ~I2C_M_BUSY;
    1350:	886b      	ldrh	r3, [r5, #2]
    1352:	4a5c      	ldr	r2, [pc, #368]	; (14c4 <_i2c_m_sync_transfer+0x26c>)
    1354:	4013      	ands	r3, r2
    1356:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1358:	2002      	movs	r0, #2
    135a:	4240      	negs	r0, r0
    135c:	e052      	b.n	1404 <_i2c_m_sync_transfer+0x1ac>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    135e:	6862      	ldr	r2, [r4, #4]
    1360:	23c0      	movs	r3, #192	; 0xc0
    1362:	029b      	lsls	r3, r3, #10
    1364:	4313      	orrs	r3, r2
    1366:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1368:	69e3      	ldr	r3, [r4, #28]
    136a:	075b      	lsls	r3, r3, #29
    136c:	d4fc      	bmi.n	1368 <_i2c_m_sync_transfer+0x110>
    136e:	e7ef      	b.n	1350 <_i2c_m_sync_transfer+0xf8>
			if (msg->len == 0) {
    1370:	6868      	ldr	r0, [r5, #4]
    1372:	2800      	cmp	r0, #0
    1374:	d111      	bne.n	139a <_i2c_m_sync_transfer+0x142>
				if (msg->flags & I2C_M_STOP) {
    1376:	886b      	ldrh	r3, [r5, #2]
    1378:	b21b      	sxth	r3, r3
    137a:	2b00      	cmp	r3, #0
    137c:	db04      	blt.n	1388 <_i2c_m_sync_transfer+0x130>
				msg->flags &= ~I2C_M_BUSY;
    137e:	886b      	ldrh	r3, [r5, #2]
    1380:	4a50      	ldr	r2, [pc, #320]	; (14c4 <_i2c_m_sync_transfer+0x26c>)
    1382:	4013      	ands	r3, r2
    1384:	806b      	strh	r3, [r5, #2]
    1386:	e03d      	b.n	1404 <_i2c_m_sync_transfer+0x1ac>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1388:	6862      	ldr	r2, [r4, #4]
    138a:	23c0      	movs	r3, #192	; 0xc0
    138c:	029b      	lsls	r3, r3, #10
    138e:	4313      	orrs	r3, r2
    1390:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1392:	69e3      	ldr	r3, [r4, #28]
    1394:	075b      	lsls	r3, r3, #29
    1396:	d4fc      	bmi.n	1392 <_i2c_m_sync_transfer+0x13a>
    1398:	e7f1      	b.n	137e <_i2c_m_sync_transfer+0x126>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    139a:	68ab      	ldr	r3, [r5, #8]
    139c:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    139e:	2328      	movs	r3, #40	; 0x28
    13a0:	54e2      	strb	r2, [r4, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13a2:	69e3      	ldr	r3, [r4, #28]
    13a4:	075b      	lsls	r3, r3, #29
    13a6:	d4fc      	bmi.n	13a2 <_i2c_m_sync_transfer+0x14a>
				msg->buffer++;
    13a8:	68ab      	ldr	r3, [r5, #8]
    13aa:	3301      	adds	r3, #1
    13ac:	60ab      	str	r3, [r5, #8]
				msg->len--;
    13ae:	686b      	ldr	r3, [r5, #4]
    13b0:	3b01      	subs	r3, #1
    13b2:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    13b4:	2000      	movs	r0, #0
    13b6:	e025      	b.n	1404 <_i2c_m_sync_transfer+0x1ac>
	} else if (flags & SB_FLAG) {
    13b8:	07bb      	lsls	r3, r7, #30
    13ba:	d578      	bpl.n	14ae <_i2c_m_sync_transfer+0x256>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    13bc:	686b      	ldr	r3, [r5, #4]
    13be:	2b00      	cmp	r3, #0
    13c0:	d06d      	beq.n	149e <_i2c_m_sync_transfer+0x246>
    13c2:	0752      	lsls	r2, r2, #29
    13c4:	d46b      	bmi.n	149e <_i2c_m_sync_transfer+0x246>
			msg->len--;
    13c6:	3b01      	subs	r3, #1
    13c8:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    13ca:	2b00      	cmp	r3, #0
    13cc:	d101      	bne.n	13d2 <_i2c_m_sync_transfer+0x17a>
    13ce:	2900      	cmp	r1, #0
    13d0:	d04c      	beq.n	146c <_i2c_m_sync_transfer+0x214>
    13d2:	2b01      	cmp	r3, #1
    13d4:	d048      	beq.n	1468 <_i2c_m_sync_transfer+0x210>
			if (msg->len == 0) {
    13d6:	686b      	ldr	r3, [r5, #4]
    13d8:	2b00      	cmp	r3, #0
    13da:	d107      	bne.n	13ec <_i2c_m_sync_transfer+0x194>
				if (msg->flags & I2C_M_STOP) {
    13dc:	886b      	ldrh	r3, [r5, #2]
    13de:	b21b      	sxth	r3, r3
    13e0:	2b00      	cmp	r3, #0
    13e2:	db4c      	blt.n	147e <_i2c_m_sync_transfer+0x226>
				msg->flags &= ~I2C_M_BUSY;
    13e4:	886b      	ldrh	r3, [r5, #2]
    13e6:	4a37      	ldr	r2, [pc, #220]	; (14c4 <_i2c_m_sync_transfer+0x26c>)
    13e8:	4013      	ands	r3, r2
    13ea:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    13ec:	68aa      	ldr	r2, [r5, #8]
    13ee:	1c53      	adds	r3, r2, #1
    13f0:	60ab      	str	r3, [r5, #8]
    13f2:	69e3      	ldr	r3, [r4, #28]
    13f4:	075b      	lsls	r3, r3, #29
    13f6:	d4fc      	bmi.n	13f2 <_i2c_m_sync_transfer+0x19a>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    13f8:	2328      	movs	r3, #40	; 0x28
    13fa:	5ce3      	ldrb	r3, [r4, r3]
    13fc:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    13fe:	2302      	movs	r3, #2
    1400:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1402:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1404:	886b      	ldrh	r3, [r5, #2]
    1406:	05db      	lsls	r3, r3, #23
    1408:	d400      	bmi.n	140c <_i2c_m_sync_transfer+0x1b4>
    140a:	e761      	b.n	12d0 <_i2c_m_sync_transfer+0x78>
	void *   hw      = i2c_dev->hw;
    140c:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    140e:	4a2f      	ldr	r2, [pc, #188]	; (14cc <_i2c_m_sync_transfer+0x274>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1410:	7e03      	ldrb	r3, [r0, #24]
    1412:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    1414:	001f      	movs	r7, r3
		if (timeout-- == 0) {
    1416:	1e51      	subs	r1, r2, #1
    1418:	2a00      	cmp	r2, #0
    141a:	d100      	bne.n	141e <_i2c_m_sync_transfer+0x1c6>
    141c:	e759      	b.n	12d2 <_i2c_m_sync_transfer+0x7a>
    141e:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1420:	079b      	lsls	r3, r3, #30
    1422:	d0f5      	beq.n	1410 <_i2c_m_sync_transfer+0x1b8>
	return I2C_OK;
    1424:	2000      	movs	r0, #0
		if (ret) {
    1426:	2800      	cmp	r0, #0
    1428:	d000      	beq.n	142c <_i2c_m_sync_transfer+0x1d4>
    142a:	e755      	b.n	12d8 <_i2c_m_sync_transfer+0x80>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    142c:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    142e:	0edb      	lsrs	r3, r3, #27
    1430:	2101      	movs	r1, #1
    1432:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1434:	69e3      	ldr	r3, [r4, #28]
    1436:	075b      	lsls	r3, r3, #29
    1438:	d4fc      	bmi.n	1434 <_i2c_m_sync_transfer+0x1dc>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    143a:	8b62      	ldrh	r2, [r4, #26]
    143c:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    143e:	07fb      	lsls	r3, r7, #31
    1440:	d5ba      	bpl.n	13b8 <_i2c_m_sync_transfer+0x160>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1442:	0793      	lsls	r3, r2, #30
    1444:	d400      	bmi.n	1448 <_i2c_m_sync_transfer+0x1f0>
    1446:	e759      	b.n	12fc <_i2c_m_sync_transfer+0xa4>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1448:	2301      	movs	r3, #1
    144a:	7623      	strb	r3, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    144c:	886b      	ldrh	r3, [r5, #2]
    144e:	2180      	movs	r1, #128	; 0x80
    1450:	0149      	lsls	r1, r1, #5
    1452:	430b      	orrs	r3, r1
    1454:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1456:	886b      	ldrh	r3, [r5, #2]
    1458:	491a      	ldr	r1, [pc, #104]	; (14c4 <_i2c_m_sync_transfer+0x26c>)
    145a:	400b      	ands	r3, r1
    145c:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    145e:	07d3      	lsls	r3, r2, #31
    1460:	d522      	bpl.n	14a8 <_i2c_m_sync_transfer+0x250>
				return I2C_ERR_BUS;
    1462:	2005      	movs	r0, #5
    1464:	4240      	negs	r0, r0
    1466:	e7cd      	b.n	1404 <_i2c_m_sync_transfer+0x1ac>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1468:	2900      	cmp	r1, #0
    146a:	d0b4      	beq.n	13d6 <_i2c_m_sync_transfer+0x17e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    146c:	6862      	ldr	r2, [r4, #4]
    146e:	2380      	movs	r3, #128	; 0x80
    1470:	02db      	lsls	r3, r3, #11
    1472:	4313      	orrs	r3, r2
    1474:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1476:	69e3      	ldr	r3, [r4, #28]
    1478:	075b      	lsls	r3, r3, #29
    147a:	d4fc      	bmi.n	1476 <_i2c_m_sync_transfer+0x21e>
    147c:	e7ab      	b.n	13d6 <_i2c_m_sync_transfer+0x17e>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    147e:	6863      	ldr	r3, [r4, #4]
    1480:	4a10      	ldr	r2, [pc, #64]	; (14c4 <_i2c_m_sync_transfer+0x26c>)
    1482:	4013      	ands	r3, r2
    1484:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1486:	69e3      	ldr	r3, [r4, #28]
    1488:	075b      	lsls	r3, r3, #29
    148a:	d4fc      	bmi.n	1486 <_i2c_m_sync_transfer+0x22e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    148c:	6862      	ldr	r2, [r4, #4]
    148e:	23c0      	movs	r3, #192	; 0xc0
    1490:	029b      	lsls	r3, r3, #10
    1492:	4313      	orrs	r3, r2
    1494:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1496:	69e3      	ldr	r3, [r4, #28]
    1498:	075b      	lsls	r3, r3, #29
    149a:	d4fc      	bmi.n	1496 <_i2c_m_sync_transfer+0x23e>
    149c:	e7a2      	b.n	13e4 <_i2c_m_sync_transfer+0x18c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    149e:	2302      	movs	r3, #2
    14a0:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    14a2:	2002      	movs	r0, #2
    14a4:	4240      	negs	r0, r0
    14a6:	e7ad      	b.n	1404 <_i2c_m_sync_transfer+0x1ac>
			return I2C_ERR_BAD_ADDRESS;
    14a8:	2004      	movs	r0, #4
    14aa:	4240      	negs	r0, r0
    14ac:	e7aa      	b.n	1404 <_i2c_m_sync_transfer+0x1ac>
	return I2C_OK;
    14ae:	2000      	movs	r0, #0
    14b0:	e7a8      	b.n	1404 <_i2c_m_sync_transfer+0x1ac>
		return I2C_ERR_BUSY;
    14b2:	2006      	movs	r0, #6
    14b4:	4240      	negs	r0, r0
    14b6:	e70b      	b.n	12d0 <_i2c_m_sync_transfer+0x78>
    14b8:	00004a5c 	.word	0x00004a5c
    14bc:	000005bf 	.word	0x000005bf
    14c0:	000005c1 	.word	0x000005c1
    14c4:	fffffeff 	.word	0xfffffeff
    14c8:	fffffbff 	.word	0xfffffbff
    14cc:	0000ffff 	.word	0x0000ffff

000014d0 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    14d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14d2:	0006      	movs	r6, r0
    14d4:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    14d6:	0008      	movs	r0, r1
    14d8:	f7ff fc9a 	bl	e10 <_sercom_get_hardware_index>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    14dc:	2300      	movs	r3, #0
    14de:	e001      	b.n	14e4 <_spi_m_sync_init+0x14>
    14e0:	3301      	adds	r3, #1
    14e2:	b2db      	uxtb	r3, r3
    14e4:	2b02      	cmp	r3, #2
    14e6:	d809      	bhi.n	14fc <_spi_m_sync_init+0x2c>
		if (sercomspi_regs[i].n == n) {
    14e8:	0119      	lsls	r1, r3, #4
    14ea:	18c9      	adds	r1, r1, r3
    14ec:	4a6d      	ldr	r2, [pc, #436]	; (16a4 <_spi_m_sync_init+0x1d4>)
    14ee:	1852      	adds	r2, r2, r1
    14f0:	7c12      	ldrb	r2, [r2, #16]
    14f2:	4290      	cmp	r0, r2
    14f4:	d1f4      	bne.n	14e0 <_spi_m_sync_init+0x10>
			return &sercomspi_regs[i];
    14f6:	4d6b      	ldr	r5, [pc, #428]	; (16a4 <_spi_m_sync_init+0x1d4>)
    14f8:	186d      	adds	r5, r5, r1
    14fa:	e000      	b.n	14fe <_spi_m_sync_init+0x2e>
	return NULL;
    14fc:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    14fe:	2e00      	cmp	r6, #0
    1500:	d100      	bne.n	1504 <_spi_m_sync_init+0x34>
    1502:	e082      	b.n	160a <_spi_m_sync_init+0x13a>
    1504:	2c00      	cmp	r4, #0
    1506:	d100      	bne.n	150a <_spi_m_sync_init+0x3a>
    1508:	e07d      	b.n	1606 <_spi_m_sync_init+0x136>
    150a:	2001      	movs	r0, #1
    150c:	4a66      	ldr	r2, [pc, #408]	; (16a8 <_spi_m_sync_init+0x1d8>)
    150e:	4967      	ldr	r1, [pc, #412]	; (16ac <_spi_m_sync_init+0x1dc>)
    1510:	f7ff fb28 	bl	b64 <assert>

	if (regs == NULL) {
    1514:	2d00      	cmp	r5, #0
    1516:	d100      	bne.n	151a <_spi_m_sync_init+0x4a>
    1518:	e0c0      	b.n	169c <_spi_m_sync_init+0x1cc>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    151a:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    151c:	07db      	lsls	r3, r3, #31
    151e:	d421      	bmi.n	1564 <_spi_m_sync_init+0x94>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    1520:	782a      	ldrb	r2, [r5, #0]
    1522:	786b      	ldrb	r3, [r5, #1]
    1524:	021b      	lsls	r3, r3, #8
    1526:	4313      	orrs	r3, r2
    1528:	78aa      	ldrb	r2, [r5, #2]
    152a:	0412      	lsls	r2, r2, #16
    152c:	4313      	orrs	r3, r2
    152e:	78ea      	ldrb	r2, [r5, #3]
    1530:	0612      	lsls	r2, r2, #24
    1532:	431a      	orrs	r2, r3
    1534:	231c      	movs	r3, #28
    1536:	401a      	ands	r2, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1538:	69e3      	ldr	r3, [r4, #28]
    153a:	079b      	lsls	r3, r3, #30
    153c:	d1fc      	bne.n	1538 <_spi_m_sync_init+0x68>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    153e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1540:	079b      	lsls	r3, r3, #30
    1542:	d509      	bpl.n	1558 <_spi_m_sync_init+0x88>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1544:	6823      	ldr	r3, [r4, #0]
    1546:	2102      	movs	r1, #2
    1548:	438b      	bics	r3, r1
    154a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    154c:	69e3      	ldr	r3, [r4, #28]
    154e:	079b      	lsls	r3, r3, #30
    1550:	d1fc      	bne.n	154c <_spi_m_sync_init+0x7c>
    1552:	69e3      	ldr	r3, [r4, #28]
    1554:	079b      	lsls	r3, r3, #30
    1556:	d4fc      	bmi.n	1552 <_spi_m_sync_init+0x82>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    1558:	2301      	movs	r3, #1
    155a:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    155c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    155e:	69e3      	ldr	r3, [r4, #28]
    1560:	079b      	lsls	r3, r3, #30
    1562:	d1fc      	bne.n	155e <_spi_m_sync_init+0x8e>
    1564:	69e3      	ldr	r3, [r4, #28]
    1566:	07db      	lsls	r3, r3, #31
    1568:	d4fc      	bmi.n	1564 <_spi_m_sync_init+0x94>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    156a:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    156c:	782b      	ldrb	r3, [r5, #0]
    156e:	786a      	ldrb	r2, [r5, #1]
    1570:	0212      	lsls	r2, r2, #8
    1572:	431a      	orrs	r2, r3
    1574:	78ab      	ldrb	r3, [r5, #2]
    1576:	041b      	lsls	r3, r3, #16
    1578:	431a      	orrs	r2, r3
    157a:	78eb      	ldrb	r3, [r5, #3]
    157c:	061b      	lsls	r3, r3, #24
    157e:	4313      	orrs	r3, r2
    1580:	221c      	movs	r2, #28
    1582:	4013      	ands	r3, r2
    1584:	2b08      	cmp	r3, #8
    1586:	d042      	beq.n	160e <_spi_m_sync_init+0x13e>
	ASSERT(hw && regs);
    1588:	2c00      	cmp	r4, #0
    158a:	d100      	bne.n	158e <_spi_m_sync_init+0xbe>
    158c:	e082      	b.n	1694 <_spi_m_sync_init+0x1c4>
    158e:	2d00      	cmp	r5, #0
    1590:	d100      	bne.n	1594 <_spi_m_sync_init+0xc4>
    1592:	e07d      	b.n	1690 <_spi_m_sync_init+0x1c0>
    1594:	2001      	movs	r0, #1
    1596:	4a46      	ldr	r2, [pc, #280]	; (16b0 <_spi_m_sync_init+0x1e0>)
    1598:	4944      	ldr	r1, [pc, #272]	; (16ac <_spi_m_sync_init+0x1dc>)
    159a:	f7ff fae3 	bl	b64 <assert>
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    159e:	782b      	ldrb	r3, [r5, #0]
    15a0:	786a      	ldrb	r2, [r5, #1]
    15a2:	0212      	lsls	r2, r2, #8
    15a4:	431a      	orrs	r2, r3
    15a6:	78ab      	ldrb	r3, [r5, #2]
    15a8:	041b      	lsls	r3, r3, #16
    15aa:	431a      	orrs	r2, r3
    15ac:	78eb      	ldrb	r3, [r5, #3]
    15ae:	061b      	lsls	r3, r3, #24
    15b0:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    15b2:	4a40      	ldr	r2, [pc, #256]	; (16b4 <_spi_m_sync_init+0x1e4>)
    15b4:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    15b6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    15b8:	69e3      	ldr	r3, [r4, #28]
    15ba:	079b      	lsls	r3, r3, #30
    15bc:	d1fc      	bne.n	15b8 <_spi_m_sync_init+0xe8>
	    (regs->ctrlb
    15be:	792b      	ldrb	r3, [r5, #4]
    15c0:	796a      	ldrb	r2, [r5, #5]
    15c2:	0212      	lsls	r2, r2, #8
    15c4:	431a      	orrs	r2, r3
    15c6:	79ab      	ldrb	r3, [r5, #6]
    15c8:	041b      	lsls	r3, r3, #16
    15ca:	431a      	orrs	r2, r3
    15cc:	79eb      	ldrb	r3, [r5, #7]
    15ce:	061b      	lsls	r3, r3, #24
    15d0:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    15d2:	4a39      	ldr	r2, [pc, #228]	; (16b8 <_spi_m_sync_init+0x1e8>)
    15d4:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    15d6:	2280      	movs	r2, #128	; 0x80
    15d8:	0292      	lsls	r2, r2, #10
    15da:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    15dc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    15de:	69e3      	ldr	r3, [r4, #28]
    15e0:	075b      	lsls	r3, r3, #29
    15e2:	d1fc      	bne.n	15de <_spi_m_sync_init+0x10e>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    15e4:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    15e6:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    15e8:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    15ea:	2330      	movs	r3, #48	; 0x30
    15ec:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    15ee:	792b      	ldrb	r3, [r5, #4]
    15f0:	075b      	lsls	r3, r3, #29
    15f2:	d151      	bne.n	1698 <_spi_m_sync_init+0x1c8>
    15f4:	2301      	movs	r3, #1
    15f6:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    15f8:	7baa      	ldrb	r2, [r5, #14]
    15fa:	7beb      	ldrb	r3, [r5, #15]
    15fc:	021b      	lsls	r3, r3, #8
    15fe:	4313      	orrs	r3, r2
    1600:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    1602:	2000      	movs	r0, #0
}
    1604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(dev && hw);
    1606:	2000      	movs	r0, #0
    1608:	e780      	b.n	150c <_spi_m_sync_init+0x3c>
    160a:	2000      	movs	r0, #0
    160c:	e77e      	b.n	150c <_spi_m_sync_init+0x3c>
	ASSERT(hw && regs);
    160e:	2c00      	cmp	r4, #0
    1610:	d03c      	beq.n	168c <_spi_m_sync_init+0x1bc>
    1612:	2d00      	cmp	r5, #0
    1614:	d038      	beq.n	1688 <_spi_m_sync_init+0x1b8>
    1616:	2001      	movs	r0, #1
    1618:	4a28      	ldr	r2, [pc, #160]	; (16bc <_spi_m_sync_init+0x1ec>)
    161a:	4924      	ldr	r1, [pc, #144]	; (16ac <_spi_m_sync_init+0x1dc>)
    161c:	f7ff faa2 	bl	b64 <assert>
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1620:	782b      	ldrb	r3, [r5, #0]
    1622:	786a      	ldrb	r2, [r5, #1]
    1624:	0212      	lsls	r2, r2, #8
    1626:	431a      	orrs	r2, r3
    1628:	78ab      	ldrb	r3, [r5, #2]
    162a:	041b      	lsls	r3, r3, #16
    162c:	431a      	orrs	r2, r3
    162e:	78eb      	ldrb	r3, [r5, #3]
    1630:	061b      	lsls	r3, r3, #24
    1632:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1634:	4a1f      	ldr	r2, [pc, #124]	; (16b4 <_spi_m_sync_init+0x1e4>)
    1636:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1638:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    163a:	69e3      	ldr	r3, [r4, #28]
    163c:	079b      	lsls	r3, r3, #30
    163e:	d1fc      	bne.n	163a <_spi_m_sync_init+0x16a>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    1640:	792b      	ldrb	r3, [r5, #4]
    1642:	796a      	ldrb	r2, [r5, #5]
    1644:	0212      	lsls	r2, r2, #8
    1646:	431a      	orrs	r2, r3
    1648:	79ab      	ldrb	r3, [r5, #6]
    164a:	041b      	lsls	r3, r3, #16
    164c:	431a      	orrs	r2, r3
    164e:	79eb      	ldrb	r3, [r5, #7]
    1650:	061b      	lsls	r3, r3, #24
    1652:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    1654:	4a1a      	ldr	r2, [pc, #104]	; (16c0 <_spi_m_sync_init+0x1f0>)
    1656:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    1658:	4a1a      	ldr	r2, [pc, #104]	; (16c4 <_spi_m_sync_init+0x1f4>)
    165a:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    165c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    165e:	69e3      	ldr	r3, [r4, #28]
    1660:	075b      	lsls	r3, r3, #29
    1662:	d1fc      	bne.n	165e <_spi_m_sync_init+0x18e>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1664:	7a2b      	ldrb	r3, [r5, #8]
    1666:	7a6a      	ldrb	r2, [r5, #9]
    1668:	0212      	lsls	r2, r2, #8
    166a:	431a      	orrs	r2, r3
    166c:	7aab      	ldrb	r3, [r5, #10]
    166e:	041b      	lsls	r3, r3, #16
    1670:	431a      	orrs	r2, r3
    1672:	7aeb      	ldrb	r3, [r5, #11]
    1674:	061b      	lsls	r3, r3, #24
    1676:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1678:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    167a:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    167c:	2330      	movs	r3, #48	; 0x30
    167e:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1680:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    1682:	2b00      	cmp	r3, #0
    1684:	d1fc      	bne.n	1680 <_spi_m_sync_init+0x1b0>
    1686:	e7b2      	b.n	15ee <_spi_m_sync_init+0x11e>
	ASSERT(hw && regs);
    1688:	2000      	movs	r0, #0
    168a:	e7c5      	b.n	1618 <_spi_m_sync_init+0x148>
    168c:	2000      	movs	r0, #0
    168e:	e7c3      	b.n	1618 <_spi_m_sync_init+0x148>
	ASSERT(hw && regs);
    1690:	2000      	movs	r0, #0
    1692:	e780      	b.n	1596 <_spi_m_sync_init+0xc6>
    1694:	2000      	movs	r0, #0
    1696:	e77e      	b.n	1596 <_spi_m_sync_init+0xc6>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1698:	2302      	movs	r3, #2
    169a:	e7ac      	b.n	15f6 <_spi_m_sync_init+0x126>
		return ERR_INVALID_ARG;
    169c:	200d      	movs	r0, #13
    169e:	4240      	negs	r0, r0
    16a0:	e7b0      	b.n	1604 <_spi_m_sync_init+0x134>
    16a2:	46c0      	nop			; (mov r8, r8)
    16a4:	00004aa8 	.word	0x00004aa8
    16a8:	00000925 	.word	0x00000925
    16ac:	00004a5c 	.word	0x00004a5c
    16b0:	000008ef 	.word	0x000008ef
    16b4:	fffffefc 	.word	0xfffffefc
    16b8:	fffd1dbf 	.word	0xfffd1dbf
    16bc:	00000903 	.word	0x00000903
    16c0:	fffdddbf 	.word	0xfffdddbf
    16c4:	00020240 	.word	0x00020240

000016c8 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    16c8:	b510      	push	{r4, lr}
    16ca:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    16cc:	d00e      	beq.n	16ec <_spi_m_sync_enable+0x24>
    16ce:	6803      	ldr	r3, [r0, #0]
    16d0:	2b00      	cmp	r3, #0
    16d2:	d009      	beq.n	16e8 <_spi_m_sync_enable+0x20>
    16d4:	2001      	movs	r0, #1
    16d6:	2298      	movs	r2, #152	; 0x98
    16d8:	0112      	lsls	r2, r2, #4
    16da:	4905      	ldr	r1, [pc, #20]	; (16f0 <_spi_m_sync_enable+0x28>)
    16dc:	f7ff fa42 	bl	b64 <assert>

	return _spi_sync_enable(dev->prvt);
    16e0:	6820      	ldr	r0, [r4, #0]
    16e2:	f7ff fb9d 	bl	e20 <_spi_sync_enable>
}
    16e6:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    16e8:	2000      	movs	r0, #0
    16ea:	e7f4      	b.n	16d6 <_spi_m_sync_enable+0xe>
    16ec:	2000      	movs	r0, #0
    16ee:	e7f2      	b.n	16d6 <_spi_m_sync_enable+0xe>
    16f0:	00004a5c 	.word	0x00004a5c

000016f4 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    16f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16f6:	46ce      	mov	lr, r9
    16f8:	4647      	mov	r7, r8
    16fa:	b580      	push	{r7, lr}
    16fc:	b089      	sub	sp, #36	; 0x24
    16fe:	4681      	mov	r9, r0
    1700:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    1702:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1704:	680b      	ldr	r3, [r1, #0]
    1706:	9303      	str	r3, [sp, #12]
    1708:	684b      	ldr	r3, [r1, #4]
    170a:	9304      	str	r3, [sp, #16]
    170c:	2300      	movs	r3, #0
    170e:	9305      	str	r3, [sp, #20]
    1710:	9306      	str	r3, [sp, #24]
    1712:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    1714:	2800      	cmp	r0, #0
    1716:	d014      	beq.n	1742 <_spi_m_sync_trans+0x4e>
    1718:	2c00      	cmp	r4, #0
    171a:	d010      	beq.n	173e <_spi_m_sync_trans+0x4a>
    171c:	2001      	movs	r0, #1
    171e:	4a37      	ldr	r2, [pc, #220]	; (17fc <_spi_m_sync_trans+0x108>)
    1720:	4937      	ldr	r1, [pc, #220]	; (1800 <_spi_m_sync_trans+0x10c>)
    1722:	f7ff fa1f 	bl	b64 <assert>
    1726:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1728:	075b      	lsls	r3, r3, #29
    172a:	d164      	bne.n	17f6 <_spi_m_sync_trans+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    172c:	69e3      	ldr	r3, [r4, #28]
    172e:	079b      	lsls	r3, r3, #30
    1730:	d1fc      	bne.n	172c <_spi_m_sync_trans+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1732:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1734:	079b      	lsls	r3, r3, #30
    1736:	d420      	bmi.n	177a <_spi_m_sync_trans+0x86>
		return ERR_NOT_INITIALIZED;
    1738:	2014      	movs	r0, #20
    173a:	4240      	negs	r0, r0
    173c:	e056      	b.n	17ec <_spi_m_sync_trans+0xf8>
	ASSERT(dev && hw);
    173e:	2000      	movs	r0, #0
    1740:	e7ed      	b.n	171e <_spi_m_sync_trans+0x2a>
    1742:	2000      	movs	r0, #0
    1744:	e7eb      	b.n	171e <_spi_m_sync_trans+0x2a>
		return false;
    1746:	2200      	movs	r2, #0
    1748:	e02d      	b.n	17a6 <_spi_m_sync_trans+0xb2>
			data |= (*ctrl->txbuf) << 8;
    174a:	7848      	ldrb	r0, [r1, #1]
    174c:	0200      	lsls	r0, r0, #8
    174e:	4647      	mov	r7, r8
    1750:	4307      	orrs	r7, r0
    1752:	46b8      	mov	r8, r7
			ctrl->txbuf++;
    1754:	3102      	adds	r1, #2
    1756:	9103      	str	r1, [sp, #12]
	ctrl->txcnt++;
    1758:	3201      	adds	r2, #1
    175a:	9205      	str	r2, [sp, #20]
	((Sercom *)hw)->SPI.DATA.reg = data;
    175c:	4642      	mov	r2, r8
    175e:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1760:	b25b      	sxtb	r3, r3
    1762:	2b00      	cmp	r3, #0
    1764:	db35      	blt.n	17d2 <_spi_m_sync_trans+0xde>
	return ERR_NONE;
    1766:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    1768:	2800      	cmp	r0, #0
    176a:	db3a      	blt.n	17e2 <_spi_m_sync_trans+0xee>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    176c:	9805      	ldr	r0, [sp, #20]
    176e:	68ab      	ldr	r3, [r5, #8]
    1770:	4298      	cmp	r0, r3
    1772:	d302      	bcc.n	177a <_spi_m_sync_trans+0x86>
    1774:	9a06      	ldr	r2, [sp, #24]
    1776:	4293      	cmp	r3, r2
    1778:	d933      	bls.n	17e2 <_spi_m_sync_trans+0xee>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    177a:	7e23      	ldrb	r3, [r4, #24]
    177c:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    177e:	075a      	lsls	r2, r3, #29
    1780:	d5e1      	bpl.n	1746 <_spi_m_sync_trans+0x52>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1782:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1784:	9a04      	ldr	r2, [sp, #16]
    1786:	2a00      	cmp	r2, #0
    1788:	d008      	beq.n	179c <_spi_m_sync_trans+0xa8>
		*ctrl->rxbuf++ = (uint8_t)data;
    178a:	1c50      	adds	r0, r2, #1
    178c:	9004      	str	r0, [sp, #16]
    178e:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    1790:	2e01      	cmp	r6, #1
    1792:	d903      	bls.n	179c <_spi_m_sync_trans+0xa8>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1794:	1c90      	adds	r0, r2, #2
    1796:	9004      	str	r0, [sp, #16]
    1798:	0a09      	lsrs	r1, r1, #8
    179a:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    179c:	9a06      	ldr	r2, [sp, #24]
    179e:	9201      	str	r2, [sp, #4]
    17a0:	3201      	adds	r2, #1
    17a2:	9206      	str	r2, [sp, #24]
	return true;
    17a4:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    17a6:	2a00      	cmp	r2, #0
    17a8:	d1da      	bne.n	1760 <_spi_m_sync_trans+0x6c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    17aa:	9906      	ldr	r1, [sp, #24]
    17ac:	9a05      	ldr	r2, [sp, #20]
    17ae:	4291      	cmp	r1, r2
    17b0:	d3d6      	bcc.n	1760 <_spi_m_sync_trans+0x6c>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    17b2:	4649      	mov	r1, r9
    17b4:	88c8      	ldrh	r0, [r1, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    17b6:	07d9      	lsls	r1, r3, #31
    17b8:	d5d2      	bpl.n	1760 <_spi_m_sync_trans+0x6c>
	if (ctrl->txbuf) {
    17ba:	9903      	ldr	r1, [sp, #12]
    17bc:	2900      	cmp	r1, #0
    17be:	d006      	beq.n	17ce <_spi_m_sync_trans+0xda>
		data = *ctrl->txbuf++;
    17c0:	1c48      	adds	r0, r1, #1
    17c2:	9003      	str	r0, [sp, #12]
    17c4:	7808      	ldrb	r0, [r1, #0]
    17c6:	4680      	mov	r8, r0
		if (ctrl->char_size > 1) {
    17c8:	2e01      	cmp	r6, #1
    17ca:	d8be      	bhi.n	174a <_spi_m_sync_trans+0x56>
    17cc:	e7c4      	b.n	1758 <_spi_m_sync_trans+0x64>
		data = dummy;
    17ce:	4680      	mov	r8, r0
    17d0:	e7c2      	b.n	1758 <_spi_m_sync_trans+0x64>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    17d2:	2301      	movs	r3, #1
    17d4:	425b      	negs	r3, r3
    17d6:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    17d8:	3381      	adds	r3, #129	; 0x81
    17da:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    17dc:	2013      	movs	r0, #19
    17de:	4240      	negs	r0, r0
    17e0:	e7c2      	b.n	1768 <_spi_m_sync_trans+0x74>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    17e2:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    17e4:	079b      	lsls	r3, r3, #30
    17e6:	d0fc      	beq.n	17e2 <_spi_m_sync_trans+0xee>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    17e8:	2303      	movs	r3, #3
    17ea:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    17ec:	b009      	add	sp, #36	; 0x24
    17ee:	bc0c      	pop	{r2, r3}
    17f0:	4690      	mov	r8, r2
    17f2:	4699      	mov	r9, r3
    17f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    17f6:	2004      	movs	r0, #4
    17f8:	4240      	negs	r0, r0
    17fa:	e7f7      	b.n	17ec <_spi_m_sync_trans+0xf8>
    17fc:	00000a85 	.word	0x00000a85
    1800:	00004a5c 	.word	0x00004a5c

00001804 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1804:	4b0f      	ldr	r3, [pc, #60]	; (1844 <_sysctrl_init_sources+0x40>)
    1806:	6a19      	ldr	r1, [r3, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    1808:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    180a:	6a1a      	ldr	r2, [r3, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    180c:	0f92      	lsrs	r2, r2, #30
    180e:	0792      	lsls	r2, r2, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1810:	0409      	lsls	r1, r1, #16
    1812:	480d      	ldr	r0, [pc, #52]	; (1848 <_sysctrl_init_sources+0x44>)
    1814:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1816:	430a      	orrs	r2, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    1818:	490c      	ldr	r1, [pc, #48]	; (184c <_sysctrl_init_sources+0x48>)
    181a:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    181c:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    181e:	699a      	ldr	r2, [r3, #24]
    1820:	2102      	movs	r1, #2
    1822:	430a      	orrs	r2, r1
    1824:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1826:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1828:	311d      	adds	r1, #29
    182a:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    182c:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    182e:	4b05      	ldr	r3, [pc, #20]	; (1844 <_sysctrl_init_sources+0x40>)
    1830:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1832:	071b      	lsls	r3, r3, #28
    1834:	d5fb      	bpl.n	182e <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1836:	4a03      	ldr	r2, [pc, #12]	; (1844 <_sysctrl_init_sources+0x40>)
    1838:	6a13      	ldr	r3, [r2, #32]
    183a:	2180      	movs	r1, #128	; 0x80
    183c:	430b      	orrs	r3, r1
    183e:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1840:	4770      	bx	lr
    1842:	46c0      	nop			; (mov r8, r8)
    1844:	40000800 	.word	0x40000800
    1848:	0fff0000 	.word	0x0fff0000
    184c:	00000302 	.word	0x00000302

00001850 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1850:	2202      	movs	r2, #2
    1852:	4b1a      	ldr	r3, [pc, #104]	; (18bc <_sysctrl_init_referenced_generators+0x6c>)
    1854:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1856:	4b19      	ldr	r3, [pc, #100]	; (18bc <_sysctrl_init_referenced_generators+0x6c>)
    1858:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    185a:	06db      	lsls	r3, r3, #27
    185c:	d5fb      	bpl.n	1856 <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    185e:	4a18      	ldr	r2, [pc, #96]	; (18c0 <_sysctrl_init_referenced_generators+0x70>)
    1860:	4b16      	ldr	r3, [pc, #88]	; (18bc <_sysctrl_init_referenced_generators+0x6c>)
    1862:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1864:	4b17      	ldr	r3, [pc, #92]	; (18c4 <_sysctrl_init_referenced_generators+0x74>)
    1866:	681b      	ldr	r3, [r3, #0]
    1868:	0e9b      	lsrs	r3, r3, #26
    186a:	2b3f      	cmp	r3, #63	; 0x3f
    186c:	d01e      	beq.n	18ac <_sysctrl_init_referenced_generators+0x5c>
    186e:	029b      	lsls	r3, r3, #10
    1870:	2280      	movs	r2, #128	; 0x80
    1872:	0092      	lsls	r2, r2, #2
    1874:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1876:	4a11      	ldr	r2, [pc, #68]	; (18bc <_sysctrl_init_referenced_generators+0x6c>)
    1878:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    187a:	2322      	movs	r3, #34	; 0x22
    187c:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    187e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1880:	075b      	lsls	r3, r3, #29
    1882:	d516      	bpl.n	18b2 <_sysctrl_init_referenced_generators+0x62>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1884:	4b0d      	ldr	r3, [pc, #52]	; (18bc <_sysctrl_init_referenced_generators+0x6c>)
    1886:	68db      	ldr	r3, [r3, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1888:	06db      	lsls	r3, r3, #27
    188a:	d5fb      	bpl.n	1884 <_sysctrl_init_referenced_generators+0x34>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    188c:	4a0b      	ldr	r2, [pc, #44]	; (18bc <_sysctrl_init_referenced_generators+0x6c>)
    188e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1890:	2180      	movs	r1, #128	; 0x80
    1892:	430b      	orrs	r3, r1
    1894:	b29b      	uxth	r3, r3
    1896:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1898:	4b0b      	ldr	r3, [pc, #44]	; (18c8 <_sysctrl_init_referenced_generators+0x78>)
    189a:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    189c:	09db      	lsrs	r3, r3, #7
    189e:	d1fb      	bne.n	1898 <_sysctrl_init_referenced_generators+0x48>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    18a0:	4a06      	ldr	r2, [pc, #24]	; (18bc <_sysctrl_init_referenced_generators+0x6c>)
    18a2:	6993      	ldr	r3, [r2, #24]
    18a4:	2102      	movs	r1, #2
    18a6:	438b      	bics	r3, r1
    18a8:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    18aa:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    18ac:	23fc      	movs	r3, #252	; 0xfc
    18ae:	01db      	lsls	r3, r3, #7
    18b0:	e7e1      	b.n	1876 <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    18b2:	4b02      	ldr	r3, [pc, #8]	; (18bc <_sysctrl_init_referenced_generators+0x6c>)
    18b4:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    18b6:	06db      	lsls	r3, r3, #27
    18b8:	d5fb      	bpl.n	18b2 <_sysctrl_init_referenced_generators+0x62>
    18ba:	e7e7      	b.n	188c <_sysctrl_init_referenced_generators+0x3c>
    18bc:	40000800 	.word	0x40000800
    18c0:	04010000 	.word	0x04010000
    18c4:	00806024 	.word	0x00806024
    18c8:	40000c00 	.word	0x40000c00

000018cc <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    18cc:	2000      	movs	r0, #0
    18ce:	4770      	bx	lr

000018d0 <_usb_load_calib>:
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    18d0:	4b12      	ldr	r3, [pc, #72]	; (191c <_usb_load_calib+0x4c>)
    18d2:	681a      	ldr	r2, [r3, #0]
    18d4:	0b53      	lsrs	r3, r2, #13
	uint32_t pad_transn
    18d6:	211f      	movs	r1, #31
    18d8:	400b      	ands	r3, r1
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    18da:	0c90      	lsrs	r0, r2, #18
	uint32_t pad_transp
    18dc:	4001      	ands	r1, r0
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    18de:	0dd0      	lsrs	r0, r2, #23
    18e0:	2207      	movs	r2, #7
    18e2:	4002      	ands	r2, r0
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    18e4:	2b1f      	cmp	r3, #31
    18e6:	d012      	beq.n	190e <_usb_load_calib+0x3e>
		pad_transn = 5;
	}
	if (pad_transp == 0x1F) {
    18e8:	291f      	cmp	r1, #31
    18ea:	d012      	beq.n	1912 <_usb_load_calib+0x42>
		pad_transp = 29;
	}
	if (pad_trim == 0x7) {
    18ec:	2a07      	cmp	r2, #7
    18ee:	d012      	beq.n	1916 <_usb_load_calib+0x46>
		pad_trim = 5;
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    18f0:	019b      	lsls	r3, r3, #6
    18f2:	430b      	orrs	r3, r1
    18f4:	0312      	lsls	r2, r2, #12
    18f6:	4313      	orrs	r3, r2
    18f8:	4a09      	ldr	r2, [pc, #36]	; (1920 <_usb_load_calib+0x50>)
    18fa:	8513      	strh	r3, [r2, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    18fc:	78d3      	ldrb	r3, [r2, #3]
    18fe:	2103      	movs	r1, #3
    1900:	430b      	orrs	r3, r1
    1902:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1904:	78d3      	ldrb	r3, [r2, #3]
    1906:	210c      	movs	r1, #12
    1908:	430b      	orrs	r3, r1
    190a:	70d3      	strb	r3, [r2, #3]
}
    190c:	4770      	bx	lr
		pad_transn = 5;
    190e:	3b1a      	subs	r3, #26
    1910:	e7ea      	b.n	18e8 <_usb_load_calib+0x18>
		pad_transp = 29;
    1912:	3902      	subs	r1, #2
    1914:	e7ea      	b.n	18ec <_usb_load_calib+0x1c>
		pad_trim = 5;
    1916:	3a02      	subs	r2, #2
    1918:	e7ea      	b.n	18f0 <_usb_load_calib+0x20>
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	00806024 	.word	0x00806024
    1920:	41005000 	.word	0x41005000

00001924 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1924:	b510      	push	{r4, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1926:	7c83      	ldrb	r3, [r0, #18]
    1928:	220f      	movs	r2, #15
    192a:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    192c:	7cc1      	ldrb	r1, [r0, #19]
    192e:	3a08      	subs	r2, #8
    1930:	400a      	ands	r2, r1

	if (!is_ctrl) {
    1932:	2a01      	cmp	r2, #1
    1934:	d00d      	beq.n	1952 <_usb_d_dev_handle_setup+0x2e>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1936:	001a      	movs	r2, r3
    1938:	3208      	adds	r2, #8
    193a:	0152      	lsls	r2, r2, #5
    193c:	4919      	ldr	r1, [pc, #100]	; (19a4 <_usb_d_dev_handle_setup+0x80>)
    193e:	468c      	mov	ip, r1
    1940:	4462      	add	r2, ip
    1942:	2110      	movs	r1, #16
    1944:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1946:	015b      	lsls	r3, r3, #5
    1948:	4a17      	ldr	r2, [pc, #92]	; (19a8 <_usb_d_dev_handle_setup+0x84>)
    194a:	4694      	mov	ip, r2
    194c:	4463      	add	r3, ip
    194e:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    1950:	bd10      	pop	{r4, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    1952:	064a      	lsls	r2, r1, #25
    1954:	d50c      	bpl.n	1970 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    1956:	7cc2      	ldrb	r2, [r0, #19]
    1958:	2140      	movs	r1, #64	; 0x40
    195a:	438a      	bics	r2, r1
    195c:	74c2      	strb	r2, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    195e:	001a      	movs	r2, r3
    1960:	3208      	adds	r2, #8
    1962:	0152      	lsls	r2, r2, #5
    1964:	4c0f      	ldr	r4, [pc, #60]	; (19a4 <_usb_d_dev_handle_setup+0x80>)
    1966:	46a4      	mov	ip, r4
    1968:	4462      	add	r2, ip
    196a:	2480      	movs	r4, #128	; 0x80
    196c:	7114      	strb	r4, [r2, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    196e:	7151      	strb	r1, [r2, #5]
	ept->flags.bits.is_stalled = 0;
    1970:	7cc2      	ldrb	r2, [r0, #19]
    1972:	2108      	movs	r1, #8
    1974:	438a      	bics	r2, r1
    1976:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1978:	015a      	lsls	r2, r3, #5
    197a:	490c      	ldr	r1, [pc, #48]	; (19ac <_usb_d_dev_handle_setup+0x88>)
    197c:	1889      	adds	r1, r1, r2
    197e:	2400      	movs	r4, #0
    1980:	728c      	strb	r4, [r1, #10]
    1982:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1984:	3308      	adds	r3, #8
    1986:	015b      	lsls	r3, r3, #5
    1988:	4906      	ldr	r1, [pc, #24]	; (19a4 <_usb_d_dev_handle_setup+0x80>)
    198a:	468c      	mov	ip, r1
    198c:	4463      	add	r3, ip
    198e:	216f      	movs	r1, #111	; 0x6f
    1990:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1992:	4b05      	ldr	r3, [pc, #20]	; (19a8 <_usb_d_dev_handle_setup+0x84>)
    1994:	469c      	mov	ip, r3
    1996:	4462      	add	r2, ip
    1998:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    199a:	4b05      	ldr	r3, [pc, #20]	; (19b0 <_usb_d_dev_handle_setup+0x8c>)
    199c:	689b      	ldr	r3, [r3, #8]
    199e:	7c80      	ldrb	r0, [r0, #18]
    19a0:	4798      	blx	r3
    19a2:	e7d5      	b.n	1950 <_usb_d_dev_handle_setup+0x2c>
    19a4:	41005000 	.word	0x41005000
    19a8:	41005108 	.word	0x41005108
    19ac:	200006d8 	.word	0x200006d8
    19b0:	20000610 	.word	0x20000610

000019b4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    19b4:	b510      	push	{r4, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    19b6:	7c82      	ldrb	r2, [r0, #18]
    19b8:	230f      	movs	r3, #15
    19ba:	4013      	ands	r3, r2
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    19bc:	2220      	movs	r2, #32
    19be:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    19c0:	b2d2      	uxtb	r2, r2
    19c2:	015b      	lsls	r3, r3, #5
    19c4:	4905      	ldr	r1, [pc, #20]	; (19dc <_usb_d_dev_handle_stall+0x28>)
    19c6:	468c      	mov	ip, r1
    19c8:	4463      	add	r3, ip
    19ca:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    19cc:	4b04      	ldr	r3, [pc, #16]	; (19e0 <_usb_d_dev_handle_stall+0x2c>)
    19ce:	691b      	ldr	r3, [r3, #16]
    19d0:	6882      	ldr	r2, [r0, #8]
    19d2:	7c80      	ldrb	r0, [r0, #18]
    19d4:	2101      	movs	r1, #1
    19d6:	4798      	blx	r3
}
    19d8:	bd10      	pop	{r4, pc}
    19da:	46c0      	nop			; (mov r8, r8)
    19dc:	41005108 	.word	0x41005108
    19e0:	20000610 	.word	0x20000610

000019e4 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    19e4:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    19e6:	7c83      	ldrb	r3, [r0, #18]
    19e8:	2bff      	cmp	r3, #255	; 0xff
    19ea:	d002      	beq.n	19f2 <_usb_d_dev_trans_done+0xe>
    19ec:	7cc2      	ldrb	r2, [r0, #19]
    19ee:	0652      	lsls	r2, r2, #25
    19f0:	d400      	bmi.n	19f4 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    19f2:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    19f4:	7cc2      	ldrb	r2, [r0, #19]
    19f6:	2440      	movs	r4, #64	; 0x40
    19f8:	43a2      	bics	r2, r4
    19fa:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    19fc:	4a02      	ldr	r2, [pc, #8]	; (1a08 <_usb_d_dev_trans_done+0x24>)
    19fe:	6914      	ldr	r4, [r2, #16]
    1a00:	6882      	ldr	r2, [r0, #8]
    1a02:	0018      	movs	r0, r3
    1a04:	47a0      	blx	r4
    1a06:	e7f4      	b.n	19f2 <_usb_d_dev_trans_done+0xe>
    1a08:	20000610 	.word	0x20000610

00001a0c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a0e:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1a10:	7c84      	ldrb	r4, [r0, #18]
    1a12:	230f      	movs	r3, #15
    1a14:	4023      	ands	r3, r4
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1a16:	4d18      	ldr	r5, [pc, #96]	; (1a78 <_usb_d_dev_trans_stop+0x6c>)
    1a18:	882e      	ldrh	r6, [r5, #0]
    1a1a:	ad01      	add	r5, sp, #4
    1a1c:	802e      	strh	r6, [r5, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1a1e:	2cff      	cmp	r4, #255	; 0xff
    1a20:	d01e      	beq.n	1a60 <_usb_d_dev_trans_stop+0x54>
    1a22:	7cc4      	ldrb	r4, [r0, #19]
    1a24:	0664      	lsls	r4, r4, #25
    1a26:	d51b      	bpl.n	1a60 <_usb_d_dev_trans_stop+0x54>
		return;
	}
	/* Stop transfer */
	if (dir) {
    1a28:	2900      	cmp	r1, #0
    1a2a:	d01b      	beq.n	1a64 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1a2c:	001c      	movs	r4, r3
    1a2e:	3408      	adds	r4, #8
    1a30:	0164      	lsls	r4, r4, #5
    1a32:	4d12      	ldr	r5, [pc, #72]	; (1a7c <_usb_d_dev_trans_stop+0x70>)
    1a34:	46ac      	mov	ip, r5
    1a36:	4464      	add	r4, ip
    1a38:	2580      	movs	r5, #128	; 0x80
    1a3a:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1a3c:	ad01      	add	r5, sp, #4
    1a3e:	5c6e      	ldrb	r6, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1a40:	001c      	movs	r4, r3
    1a42:	3408      	adds	r4, #8
    1a44:	0164      	lsls	r4, r4, #5
    1a46:	4f0d      	ldr	r7, [pc, #52]	; (1a7c <_usb_d_dev_trans_stop+0x70>)
    1a48:	46bc      	mov	ip, r7
    1a4a:	4464      	add	r4, ip
    1a4c:	71e6      	strb	r6, [r4, #7]
	_usbd_ep_int_dis(epn, intflags[dir]);
    1a4e:	5c69      	ldrb	r1, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1a50:	015b      	lsls	r3, r3, #5
    1a52:	4c0b      	ldr	r4, [pc, #44]	; (1a80 <_usb_d_dev_trans_stop+0x74>)
    1a54:	46a4      	mov	ip, r4
    1a56:	4463      	add	r3, ip
    1a58:	7019      	strb	r1, [r3, #0]
	_usb_d_dev_trans_done(ept, code);
    1a5a:	0011      	movs	r1, r2
    1a5c:	f7ff ffc2 	bl	19e4 <_usb_d_dev_trans_done>
}
    1a60:	b003      	add	sp, #12
    1a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1a64:	001c      	movs	r4, r3
    1a66:	3408      	adds	r4, #8
    1a68:	0164      	lsls	r4, r4, #5
    1a6a:	4d04      	ldr	r5, [pc, #16]	; (1a7c <_usb_d_dev_trans_stop+0x70>)
    1a6c:	46ac      	mov	ip, r5
    1a6e:	4464      	add	r4, ip
    1a70:	2540      	movs	r5, #64	; 0x40
    1a72:	7165      	strb	r5, [r4, #5]
    1a74:	e7e2      	b.n	1a3c <_usb_d_dev_trans_stop+0x30>
    1a76:	46c0      	nop			; (mov r8, r8)
    1a78:	00004adc 	.word	0x00004adc
    1a7c:	41005000 	.word	0x41005000
    1a80:	41005108 	.word	0x41005108

00001a84 <_usb_d_dev_handle_trfail>:
{
    1a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a86:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1a88:	7c83      	ldrb	r3, [r0, #18]
    1a8a:	220f      	movs	r2, #15
    1a8c:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1a8e:	4a3c      	ldr	r2, [pc, #240]	; (1b80 <_usb_d_dev_handle_trfail+0xfc>)
    1a90:	8894      	ldrh	r4, [r2, #4]
    1a92:	aa01      	add	r2, sp, #4
    1a94:	8014      	strh	r4, [r2, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    1a96:	015a      	lsls	r2, r3, #5
    1a98:	4c3a      	ldr	r4, [pc, #232]	; (1b84 <_usb_d_dev_handle_trfail+0x100>)
    1a9a:	18a4      	adds	r4, r4, r2
	uint8_t            eptype
    1a9c:	2900      	cmp	r1, #0
    1a9e:	d033      	beq.n	1b08 <_usb_d_dev_handle_trfail+0x84>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1aa0:	001a      	movs	r2, r3
    1aa2:	3208      	adds	r2, #8
    1aa4:	0152      	lsls	r2, r2, #5
    1aa6:	4d38      	ldr	r5, [pc, #224]	; (1b88 <_usb_d_dev_handle_trfail+0x104>)
    1aa8:	5d52      	ldrb	r2, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1aaa:	0912      	lsrs	r2, r2, #4
    1aac:	2507      	movs	r5, #7
    1aae:	4015      	ands	r5, r2
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1ab0:	7cc2      	ldrb	r2, [r0, #19]
    1ab2:	2607      	movs	r6, #7
    1ab4:	4016      	ands	r6, r2
	st.reg = bank[bank_n].STATUS_BK.reg;
    1ab6:	010a      	lsls	r2, r1, #4
    1ab8:	18a2      	adds	r2, r4, r2
    1aba:	7a94      	ldrb	r4, [r2, #10]
    1abc:	b2e4      	uxtb	r4, r4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1abe:	2d02      	cmp	r5, #2
    1ac0:	d02a      	beq.n	1b18 <_usb_d_dev_handle_trfail+0x94>
	} else if (st.bit.ERRORFLOW) {
    1ac2:	07a4      	lsls	r4, r4, #30
    1ac4:	d544      	bpl.n	1b50 <_usb_d_dev_handle_trfail+0xcc>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1ac6:	7a94      	ldrb	r4, [r2, #10]
    1ac8:	2502      	movs	r5, #2
    1aca:	43ac      	bics	r4, r5
    1acc:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1ace:	ac01      	add	r4, sp, #4
    1ad0:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1ad2:	001a      	movs	r2, r3
    1ad4:	3208      	adds	r2, #8
    1ad6:	0152      	lsls	r2, r2, #5
    1ad8:	4f2b      	ldr	r7, [pc, #172]	; (1b88 <_usb_d_dev_handle_trfail+0x104>)
    1ada:	46bc      	mov	ip, r7
    1adc:	4462      	add	r2, ip
    1ade:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    1ae0:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1ae2:	015b      	lsls	r3, r3, #5
    1ae4:	4c29      	ldr	r4, [pc, #164]	; (1b8c <_usb_d_dev_handle_trfail+0x108>)
    1ae6:	46a4      	mov	ip, r4
    1ae8:	4463      	add	r3, ip
    1aea:	701a      	strb	r2, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1aec:	2e01      	cmp	r6, #1
    1aee:	d145      	bne.n	1b7c <_usb_d_dev_handle_trfail+0xf8>
    1af0:	7cc3      	ldrb	r3, [r0, #19]
    1af2:	065b      	lsls	r3, r3, #25
    1af4:	d542      	bpl.n	1b7c <_usb_d_dev_handle_trfail+0xf8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1af6:	7cc3      	ldrb	r3, [r0, #19]
    1af8:	09db      	lsrs	r3, r3, #7
    1afa:	4299      	cmp	r1, r3
    1afc:	d03e      	beq.n	1b7c <_usb_d_dev_handle_trfail+0xf8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1afe:	2200      	movs	r2, #0
    1b00:	0019      	movs	r1, r3
    1b02:	f7ff ff83 	bl	1a0c <_usb_d_dev_trans_stop>
    1b06:	e039      	b.n	1b7c <_usb_d_dev_handle_trfail+0xf8>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1b08:	001a      	movs	r2, r3
    1b0a:	3208      	adds	r2, #8
    1b0c:	0152      	lsls	r2, r2, #5
    1b0e:	4d1e      	ldr	r5, [pc, #120]	; (1b88 <_usb_d_dev_handle_trfail+0x104>)
    1b10:	5d55      	ldrb	r5, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1b12:	2207      	movs	r2, #7
    1b14:	4015      	ands	r5, r2
    1b16:	e7cb      	b.n	1ab0 <_usb_d_dev_handle_trfail+0x2c>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1b18:	07e5      	lsls	r5, r4, #31
    1b1a:	d5d2      	bpl.n	1ac2 <_usb_d_dev_handle_trfail+0x3e>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1b1c:	7a94      	ldrb	r4, [r2, #10]
    1b1e:	2501      	movs	r5, #1
    1b20:	43ac      	bics	r4, r5
    1b22:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1b24:	ac01      	add	r4, sp, #4
    1b26:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b28:	001a      	movs	r2, r3
    1b2a:	3208      	adds	r2, #8
    1b2c:	0152      	lsls	r2, r2, #5
    1b2e:	4e16      	ldr	r6, [pc, #88]	; (1b88 <_usb_d_dev_handle_trfail+0x104>)
    1b30:	46b4      	mov	ip, r6
    1b32:	4462      	add	r2, ip
    1b34:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    1b36:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1b38:	015b      	lsls	r3, r3, #5
    1b3a:	4c14      	ldr	r4, [pc, #80]	; (1b8c <_usb_d_dev_handle_trfail+0x108>)
    1b3c:	46a4      	mov	ip, r4
    1b3e:	4463      	add	r3, ip
    1b40:	701a      	strb	r2, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1b42:	1e4b      	subs	r3, r1, #1
    1b44:	4199      	sbcs	r1, r3
    1b46:	b2c9      	uxtb	r1, r1
    1b48:	2204      	movs	r2, #4
    1b4a:	f7ff ff5f 	bl	1a0c <_usb_d_dev_trans_stop>
    1b4e:	e015      	b.n	1b7c <_usb_d_dev_handle_trfail+0xf8>
	bank->STATUS_BK.reg     = 0;
    1b50:	005a      	lsls	r2, r3, #1
    1b52:	1852      	adds	r2, r2, r1
    1b54:	0112      	lsls	r2, r2, #4
    1b56:	480b      	ldr	r0, [pc, #44]	; (1b84 <_usb_d_dev_handle_trfail+0x100>)
    1b58:	1882      	adds	r2, r0, r2
    1b5a:	2000      	movs	r0, #0
    1b5c:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1b5e:	a801      	add	r0, sp, #4
    1b60:	5c44      	ldrb	r4, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b62:	001a      	movs	r2, r3
    1b64:	3208      	adds	r2, #8
    1b66:	0152      	lsls	r2, r2, #5
    1b68:	4d07      	ldr	r5, [pc, #28]	; (1b88 <_usb_d_dev_handle_trfail+0x104>)
    1b6a:	46ac      	mov	ip, r5
    1b6c:	4462      	add	r2, ip
    1b6e:	71d4      	strb	r4, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    1b70:	5c42      	ldrb	r2, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1b72:	015b      	lsls	r3, r3, #5
    1b74:	4905      	ldr	r1, [pc, #20]	; (1b8c <_usb_d_dev_handle_trfail+0x108>)
    1b76:	468c      	mov	ip, r1
    1b78:	4463      	add	r3, ip
    1b7a:	701a      	strb	r2, [r3, #0]
}
    1b7c:	b003      	add	sp, #12
    1b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b80:	00004adc 	.word	0x00004adc
    1b84:	200006d8 	.word	0x200006d8
    1b88:	41005000 	.word	0x41005000
    1b8c:	41005108 	.word	0x41005108

00001b90 <_usb_d_dev_reset_epts>:
{
    1b90:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < USB_D_N_EP; i++) {
    1b92:	2400      	movs	r4, #0
    1b94:	e017      	b.n	1bc6 <_usb_d_dev_reset_epts+0x36>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1b96:	4d10      	ldr	r5, [pc, #64]	; (1bd8 <_usb_d_dev_reset_epts+0x48>)
    1b98:	00a6      	lsls	r6, r4, #2
    1b9a:	1933      	adds	r3, r6, r4
    1b9c:	0098      	lsls	r0, r3, #2
    1b9e:	3010      	adds	r0, #16
    1ba0:	1828      	adds	r0, r5, r0
    1ba2:	3004      	adds	r0, #4
    1ba4:	2103      	movs	r1, #3
    1ba6:	f7ff ff1d 	bl	19e4 <_usb_d_dev_trans_done>
		dev_inst.ep[i].ep       = 0xFF;
    1baa:	1932      	adds	r2, r6, r4
    1bac:	0093      	lsls	r3, r2, #2
    1bae:	18eb      	adds	r3, r5, r3
    1bb0:	3326      	adds	r3, #38	; 0x26
    1bb2:	22ff      	movs	r2, #255	; 0xff
    1bb4:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    1bb6:	1936      	adds	r6, r6, r4
    1bb8:	00b3      	lsls	r3, r6, #2
    1bba:	18ed      	adds	r5, r5, r3
    1bbc:	3527      	adds	r5, #39	; 0x27
    1bbe:	2300      	movs	r3, #0
    1bc0:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    1bc2:	3401      	adds	r4, #1
    1bc4:	b2e4      	uxtb	r4, r4
    1bc6:	2c08      	cmp	r4, #8
    1bc8:	d9e5      	bls.n	1b96 <_usb_d_dev_reset_epts+0x6>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1bca:	2260      	movs	r2, #96	; 0x60
    1bcc:	2100      	movs	r1, #0
    1bce:	4803      	ldr	r0, [pc, #12]	; (1bdc <_usb_d_dev_reset_epts+0x4c>)
    1bd0:	f002 fdfc 	bl	47cc <memset>
}
    1bd4:	bd70      	pop	{r4, r5, r6, pc}
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	20000610 	.word	0x20000610
    1bdc:	200006d8 	.word	0x200006d8

00001be0 <_usb_d_dev_in_next>:
{
    1be0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1be2:	46c6      	mov	lr, r8
    1be4:	b500      	push	{lr}
    1be6:	0005      	movs	r5, r0
    1be8:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1bea:	7c83      	ldrb	r3, [r0, #18]
    1bec:	240f      	movs	r4, #15
    1bee:	401c      	ands	r4, r3
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1bf0:	0162      	lsls	r2, r4, #5
    1bf2:	4b56      	ldr	r3, [pc, #344]	; (1d4c <_usb_d_dev_in_next+0x16c>)
    1bf4:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1bf6:	2900      	cmp	r1, #0
    1bf8:	d058      	beq.n	1cac <_usb_d_dev_in_next+0xcc>
    1bfa:	6959      	ldr	r1, [r3, #20]
    1bfc:	0489      	lsls	r1, r1, #18
    1bfe:	0c89      	lsrs	r1, r1, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1c00:	8a2b      	ldrh	r3, [r5, #16]
    1c02:	4a53      	ldr	r2, [pc, #332]	; (1d50 <_usb_d_dev_in_next+0x170>)
    1c04:	4293      	cmp	r3, r2
    1c06:	d053      	beq.n	1cb0 <_usb_d_dev_in_next+0xd0>
    1c08:	3b01      	subs	r3, #1
    1c0a:	b21b      	sxth	r3, r3
    1c0c:	400b      	ands	r3, r1
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1c0e:	7cea      	ldrb	r2, [r5, #19]
    1c10:	2707      	movs	r7, #7
    1c12:	4017      	ands	r7, r2
	if (isr) {
    1c14:	2e00      	cmp	r6, #0
    1c16:	d007      	beq.n	1c28 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c18:	0022      	movs	r2, r4
    1c1a:	3208      	adds	r2, #8
    1c1c:	0152      	lsls	r2, r2, #5
    1c1e:	484d      	ldr	r0, [pc, #308]	; (1d54 <_usb_d_dev_in_next+0x174>)
    1c20:	4684      	mov	ip, r0
    1c22:	4462      	add	r2, ip
    1c24:	2002      	movs	r0, #2
    1c26:	71d0      	strb	r0, [r2, #7]
	ept->trans_count += trans_count;
    1c28:	68aa      	ldr	r2, [r5, #8]
    1c2a:	4694      	mov	ip, r2
    1c2c:	4461      	add	r1, ip
    1c2e:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    1c30:	686a      	ldr	r2, [r5, #4]
    1c32:	4291      	cmp	r1, r2
    1c34:	d24e      	bcs.n	1cd4 <_usb_d_dev_in_next+0xf4>
		trans_next = ept->trans_size - ept->trans_count;
    1c36:	b292      	uxth	r2, r2
    1c38:	b28b      	uxth	r3, r1
    1c3a:	1ad2      	subs	r2, r2, r3
    1c3c:	b292      	uxth	r2, r2
		if (ept->flags.bits.use_cache) {
    1c3e:	7ceb      	ldrb	r3, [r5, #19]
    1c40:	069b      	lsls	r3, r3, #26
    1c42:	d537      	bpl.n	1cb4 <_usb_d_dev_in_next+0xd4>
			if (trans_next > ept->size) {
    1c44:	8a2b      	ldrh	r3, [r5, #16]
    1c46:	4698      	mov	r8, r3
    1c48:	429a      	cmp	r2, r3
    1c4a:	d800      	bhi.n	1c4e <_usb_d_dev_in_next+0x6e>
		trans_next = ept->trans_size - ept->trans_count;
    1c4c:	4690      	mov	r8, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1c4e:	682b      	ldr	r3, [r5, #0]
    1c50:	469c      	mov	ip, r3
    1c52:	4461      	add	r1, ip
    1c54:	4642      	mov	r2, r8
    1c56:	68e8      	ldr	r0, [r5, #12]
    1c58:	f002 fd76 	bl	4748 <memcpy>
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1c5c:	68e9      	ldr	r1, [r5, #12]
	bank->ADDR.reg          = addr;
    1c5e:	0162      	lsls	r2, r4, #5
    1c60:	4b3a      	ldr	r3, [pc, #232]	; (1d4c <_usb_d_dev_in_next+0x16c>)
    1c62:	189b      	adds	r3, r3, r2
    1c64:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1c66:	0163      	lsls	r3, r4, #5
    1c68:	4a38      	ldr	r2, [pc, #224]	; (1d4c <_usb_d_dev_in_next+0x16c>)
    1c6a:	18d2      	adds	r2, r2, r3
    1c6c:	6951      	ldr	r1, [r2, #20]
    1c6e:	4643      	mov	r3, r8
    1c70:	049b      	lsls	r3, r3, #18
    1c72:	0c9b      	lsrs	r3, r3, #18
    1c74:	0b89      	lsrs	r1, r1, #14
    1c76:	0389      	lsls	r1, r1, #14
    1c78:	430b      	orrs	r3, r1
    1c7a:	6153      	str	r3, [r2, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1c7c:	6951      	ldr	r1, [r2, #20]
    1c7e:	4b36      	ldr	r3, [pc, #216]	; (1d58 <_usb_d_dev_in_next+0x178>)
    1c80:	400b      	ands	r3, r1
    1c82:	6153      	str	r3, [r2, #20]
	if (!isr) {
    1c84:	2e00      	cmp	r6, #0
    1c86:	d107      	bne.n	1c98 <_usb_d_dev_in_next+0xb8>
		if (is_ctrl) {
    1c88:	2f01      	cmp	r7, #1
    1c8a:	d05d      	beq.n	1d48 <_usb_d_dev_in_next+0x168>
			inten = USB_D_BANK1_INT_FLAGS;
    1c8c:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1c8e:	0163      	lsls	r3, r4, #5
    1c90:	4932      	ldr	r1, [pc, #200]	; (1d5c <_usb_d_dev_in_next+0x17c>)
    1c92:	468c      	mov	ip, r1
    1c94:	4463      	add	r3, ip
    1c96:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1c98:	3408      	adds	r4, #8
    1c9a:	0164      	lsls	r4, r4, #5
    1c9c:	4b2d      	ldr	r3, [pc, #180]	; (1d54 <_usb_d_dev_in_next+0x174>)
    1c9e:	469c      	mov	ip, r3
    1ca0:	4464      	add	r4, ip
    1ca2:	2380      	movs	r3, #128	; 0x80
    1ca4:	7163      	strb	r3, [r4, #5]
}
    1ca6:	bc04      	pop	{r2}
    1ca8:	4690      	mov	r8, r2
    1caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1cac:	2100      	movs	r1, #0
    1cae:	e7a7      	b.n	1c00 <_usb_d_dev_in_next+0x20>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1cb0:	b21b      	sxth	r3, r3
    1cb2:	e7ab      	b.n	1c0c <_usb_d_dev_in_next+0x2c>
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    1cb4:	2380      	movs	r3, #128	; 0x80
    1cb6:	019b      	lsls	r3, r3, #6
    1cb8:	429a      	cmp	r2, r3
    1cba:	d807      	bhi.n	1ccc <_usb_d_dev_in_next+0xec>
		trans_next = ept->trans_size - ept->trans_count;
    1cbc:	4690      	mov	r8, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1cbe:	682b      	ldr	r3, [r5, #0]
    1cc0:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    1cc2:	0162      	lsls	r2, r4, #5
    1cc4:	4b21      	ldr	r3, [pc, #132]	; (1d4c <_usb_d_dev_in_next+0x16c>)
    1cc6:	189b      	adds	r3, r3, r2
    1cc8:	6119      	str	r1, [r3, #16]
    1cca:	e7cc      	b.n	1c66 <_usb_d_dev_in_next+0x86>
				trans_next = USB_D_DEV_TRANS_MAX;
    1ccc:	2380      	movs	r3, #128	; 0x80
    1cce:	019b      	lsls	r3, r3, #6
    1cd0:	4698      	mov	r8, r3
    1cd2:	e7f4      	b.n	1cbe <_usb_d_dev_in_next+0xde>
	} else if (ept->flags.bits.need_zlp) {
    1cd4:	7cea      	ldrb	r2, [r5, #19]
    1cd6:	06d2      	lsls	r2, r2, #27
    1cd8:	d50f      	bpl.n	1cfa <_usb_d_dev_in_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    1cda:	7ceb      	ldrb	r3, [r5, #19]
    1cdc:	2210      	movs	r2, #16
    1cde:	4393      	bics	r3, r2
    1ce0:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1ce2:	0162      	lsls	r2, r4, #5
    1ce4:	4b19      	ldr	r3, [pc, #100]	; (1d4c <_usb_d_dev_in_next+0x16c>)
    1ce6:	189b      	adds	r3, r3, r2
    1ce8:	695a      	ldr	r2, [r3, #20]
    1cea:	0b92      	lsrs	r2, r2, #14
    1cec:	0391      	lsls	r1, r2, #14
    1cee:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1cf0:	6959      	ldr	r1, [r3, #20]
    1cf2:	4a19      	ldr	r2, [pc, #100]	; (1d58 <_usb_d_dev_in_next+0x178>)
    1cf4:	400a      	ands	r2, r1
    1cf6:	615a      	str	r2, [r3, #20]
    1cf8:	e7c4      	b.n	1c84 <_usb_d_dev_in_next+0xa4>
	if (is_ctrl) {
    1cfa:	2f01      	cmp	r7, #1
    1cfc:	d00d      	beq.n	1d1a <_usb_d_dev_in_next+0x13a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1cfe:	0164      	lsls	r4, r4, #5
    1d00:	4a17      	ldr	r2, [pc, #92]	; (1d60 <_usb_d_dev_in_next+0x180>)
    1d02:	4694      	mov	ip, r2
    1d04:	4464      	add	r4, ip
    1d06:	224a      	movs	r2, #74	; 0x4a
    1d08:	7022      	strb	r2, [r4, #0]
	if (last_pkt == ept->size) {
    1d0a:	8a2a      	ldrh	r2, [r5, #16]
    1d0c:	4293      	cmp	r3, r2
    1d0e:	d00b      	beq.n	1d28 <_usb_d_dev_in_next+0x148>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1d10:	2100      	movs	r1, #0
    1d12:	0028      	movs	r0, r5
    1d14:	f7ff fe66 	bl	19e4 <_usb_d_dev_trans_done>
	return;
    1d18:	e7c5      	b.n	1ca6 <_usb_d_dev_in_next+0xc6>
    1d1a:	0164      	lsls	r4, r4, #5
    1d1c:	4a10      	ldr	r2, [pc, #64]	; (1d60 <_usb_d_dev_in_next+0x180>)
    1d1e:	4694      	mov	ip, r2
    1d20:	4464      	add	r4, ip
    1d22:	224b      	movs	r2, #75	; 0x4b
    1d24:	7022      	strb	r2, [r4, #0]
    1d26:	e7f0      	b.n	1d0a <_usb_d_dev_in_next+0x12a>
		ept->flags.bits.is_busy = 0;
    1d28:	7ceb      	ldrb	r3, [r5, #19]
    1d2a:	2240      	movs	r2, #64	; 0x40
    1d2c:	4393      	bics	r3, r2
    1d2e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1d30:	4b0c      	ldr	r3, [pc, #48]	; (1d64 <_usb_d_dev_in_next+0x184>)
    1d32:	68db      	ldr	r3, [r3, #12]
    1d34:	7ca8      	ldrb	r0, [r5, #18]
    1d36:	68a9      	ldr	r1, [r5, #8]
    1d38:	4798      	blx	r3
    1d3a:	2800      	cmp	r0, #0
    1d3c:	d1b3      	bne.n	1ca6 <_usb_d_dev_in_next+0xc6>
		ept->flags.bits.is_busy = 1;
    1d3e:	7ceb      	ldrb	r3, [r5, #19]
    1d40:	2240      	movs	r2, #64	; 0x40
    1d42:	4313      	orrs	r3, r2
    1d44:	74eb      	strb	r3, [r5, #19]
    1d46:	e7e3      	b.n	1d10 <_usb_d_dev_in_next+0x130>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1d48:	224e      	movs	r2, #78	; 0x4e
    1d4a:	e7a0      	b.n	1c8e <_usb_d_dev_in_next+0xae>
    1d4c:	200006d8 	.word	0x200006d8
    1d50:	000003ff 	.word	0x000003ff
    1d54:	41005000 	.word	0x41005000
    1d58:	f0003fff 	.word	0xf0003fff
    1d5c:	41005109 	.word	0x41005109
    1d60:	41005108 	.word	0x41005108
    1d64:	20000610 	.word	0x20000610

00001d68 <_usb_d_dev_out_next>:
{
    1d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d6a:	46de      	mov	lr, fp
    1d6c:	4657      	mov	r7, sl
    1d6e:	464e      	mov	r6, r9
    1d70:	4645      	mov	r5, r8
    1d72:	b5e0      	push	{r5, r6, r7, lr}
    1d74:	0004      	movs	r4, r0
    1d76:	000f      	movs	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1d78:	7c83      	ldrb	r3, [r0, #18]
    1d7a:	250f      	movs	r5, #15
    1d7c:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1d7e:	2900      	cmp	r1, #0
    1d80:	d059      	beq.n	1e36 <_usb_d_dev_out_next+0xce>
    1d82:	016a      	lsls	r2, r5, #5
    1d84:	4b71      	ldr	r3, [pc, #452]	; (1f4c <_usb_d_dev_out_next+0x1e4>)
    1d86:	189b      	adds	r3, r3, r2
    1d88:	685b      	ldr	r3, [r3, #4]
    1d8a:	011b      	lsls	r3, r3, #4
    1d8c:	0c9b      	lsrs	r3, r3, #18
    1d8e:	469a      	mov	sl, r3
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1d90:	2f00      	cmp	r7, #0
    1d92:	d053      	beq.n	1e3c <_usb_d_dev_out_next+0xd4>
    1d94:	016a      	lsls	r2, r5, #5
    1d96:	4b6d      	ldr	r3, [pc, #436]	; (1f4c <_usb_d_dev_out_next+0x1e4>)
    1d98:	189b      	adds	r3, r3, r2
    1d9a:	685b      	ldr	r3, [r3, #4]
    1d9c:	049b      	lsls	r3, r3, #18
    1d9e:	0c9b      	lsrs	r3, r3, #18
    1da0:	4698      	mov	r8, r3
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1da2:	8a26      	ldrh	r6, [r4, #16]
    1da4:	4b6a      	ldr	r3, [pc, #424]	; (1f50 <_usb_d_dev_out_next+0x1e8>)
    1da6:	429e      	cmp	r6, r3
    1da8:	d001      	beq.n	1dae <_usb_d_dev_out_next+0x46>
    1daa:	3e01      	subs	r6, #1
    1dac:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1dae:	4643      	mov	r3, r8
    1db0:	4033      	ands	r3, r6
    1db2:	469b      	mov	fp, r3
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1db4:	7ce3      	ldrb	r3, [r4, #19]
    1db6:	2207      	movs	r2, #7
    1db8:	401a      	ands	r2, r3
    1dba:	4691      	mov	r9, r2
	if (isr) {
    1dbc:	2f00      	cmp	r7, #0
    1dbe:	d007      	beq.n	1dd0 <_usb_d_dev_out_next+0x68>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1dc0:	002b      	movs	r3, r5
    1dc2:	3308      	adds	r3, #8
    1dc4:	015b      	lsls	r3, r3, #5
    1dc6:	4a63      	ldr	r2, [pc, #396]	; (1f54 <_usb_d_dev_out_next+0x1ec>)
    1dc8:	4694      	mov	ip, r2
    1dca:	4463      	add	r3, ip
    1dcc:	2201      	movs	r2, #1
    1dce:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1dd0:	7ce3      	ldrb	r3, [r4, #19]
    1dd2:	069b      	lsls	r3, r3, #26
    1dd4:	d511      	bpl.n	1dfa <_usb_d_dev_out_next+0x92>
    1dd6:	6862      	ldr	r2, [r4, #4]
    1dd8:	2a00      	cmp	r2, #0
    1dda:	d00e      	beq.n	1dfa <_usb_d_dev_out_next+0x92>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1ddc:	b292      	uxth	r2, r2
    1dde:	8923      	ldrh	r3, [r4, #8]
    1de0:	1ad2      	subs	r2, r2, r3
    1de2:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1de4:	6823      	ldr	r3, [r4, #0]
    1de6:	68a1      	ldr	r1, [r4, #8]
    1de8:	468c      	mov	ip, r1
    1dea:	4463      	add	r3, ip
    1dec:	0018      	movs	r0, r3
    1dee:	68e1      	ldr	r1, [r4, #12]
    1df0:	4593      	cmp	fp, r2
    1df2:	d200      	bcs.n	1df6 <_usb_d_dev_out_next+0x8e>
    1df4:	465a      	mov	r2, fp
    1df6:	f002 fca7 	bl	4748 <memcpy>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1dfa:	6863      	ldr	r3, [r4, #4]
    1dfc:	2b00      	cmp	r3, #0
    1dfe:	d120      	bne.n	1e42 <_usb_d_dev_out_next+0xda>
    1e00:	7ce2      	ldrb	r2, [r4, #19]
    1e02:	06d2      	lsls	r2, r2, #27
    1e04:	d51d      	bpl.n	1e42 <_usb_d_dev_out_next+0xda>
		ept->flags.bits.need_zlp  = 0;
    1e06:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1e08:	2210      	movs	r2, #16
    1e0a:	4393      	bics	r3, r2
    1e0c:	2220      	movs	r2, #32
    1e0e:	4313      	orrs	r3, r2
    1e10:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    1e12:	494e      	ldr	r1, [pc, #312]	; (1f4c <_usb_d_dev_out_next+0x1e4>)
    1e14:	016a      	lsls	r2, r5, #5
    1e16:	68e3      	ldr	r3, [r4, #12]
    1e18:	5053      	str	r3, [r2, r1]
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    1e1a:	8a23      	ldrh	r3, [r4, #16]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1e1c:	188a      	adds	r2, r1, r2
    1e1e:	6851      	ldr	r1, [r2, #4]
    1e20:	049b      	lsls	r3, r3, #18
    1e22:	091b      	lsrs	r3, r3, #4
    1e24:	484c      	ldr	r0, [pc, #304]	; (1f58 <_usb_d_dev_out_next+0x1f0>)
    1e26:	4001      	ands	r1, r0
    1e28:	430b      	orrs	r3, r1
    1e2a:	6053      	str	r3, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1e2c:	6853      	ldr	r3, [r2, #4]
    1e2e:	0b9b      	lsrs	r3, r3, #14
    1e30:	0399      	lsls	r1, r3, #14
    1e32:	6051      	str	r1, [r2, #4]
    1e34:	e047      	b.n	1ec6 <_usb_d_dev_out_next+0x15e>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1e36:	2300      	movs	r3, #0
    1e38:	469a      	mov	sl, r3
    1e3a:	e7a9      	b.n	1d90 <_usb_d_dev_out_next+0x28>
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1e3c:	2300      	movs	r3, #0
    1e3e:	4698      	mov	r8, r3
    1e40:	e7af      	b.n	1da2 <_usb_d_dev_out_next+0x3a>
	} else if (isr && last_pkt < ept->size) {
    1e42:	2f00      	cmp	r7, #0
    1e44:	d01d      	beq.n	1e82 <_usb_d_dev_out_next+0x11a>
    1e46:	8a22      	ldrh	r2, [r4, #16]
    1e48:	4593      	cmp	fp, r2
    1e4a:	d21a      	bcs.n	1e82 <_usb_d_dev_out_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    1e4c:	7ce3      	ldrb	r3, [r4, #19]
    1e4e:	2210      	movs	r2, #16
    1e50:	4393      	bics	r3, r2
    1e52:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1e54:	68a3      	ldr	r3, [r4, #8]
    1e56:	4443      	add	r3, r8
    1e58:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    1e5a:	464b      	mov	r3, r9
    1e5c:	2b01      	cmp	r3, #1
    1e5e:	d066      	beq.n	1f2e <_usb_d_dev_out_next+0x1c6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1e60:	016b      	lsls	r3, r5, #5
    1e62:	4a3e      	ldr	r2, [pc, #248]	; (1f5c <_usb_d_dev_out_next+0x1f4>)
    1e64:	4694      	mov	ip, r2
    1e66:	4463      	add	r3, ip
    1e68:	2225      	movs	r2, #37	; 0x25
    1e6a:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    1e6c:	2d00      	cmp	r5, #0
    1e6e:	d103      	bne.n	1e78 <_usb_d_dev_out_next+0x110>
	bank->ADDR.reg          = addr;
    1e70:	016d      	lsls	r5, r5, #5
    1e72:	4b36      	ldr	r3, [pc, #216]	; (1f4c <_usb_d_dev_out_next+0x1e4>)
    1e74:	68e2      	ldr	r2, [r4, #12]
    1e76:	50ea      	str	r2, [r5, r3]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1e78:	2100      	movs	r1, #0
    1e7a:	0020      	movs	r0, r4
    1e7c:	f7ff fdb2 	bl	19e4 <_usb_d_dev_trans_done>
	return;
    1e80:	e033      	b.n	1eea <_usb_d_dev_out_next+0x182>
		ept->trans_count += trans_size;
    1e82:	68a2      	ldr	r2, [r4, #8]
    1e84:	4452      	add	r2, sl
    1e86:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1e88:	4293      	cmp	r3, r2
    1e8a:	d9e6      	bls.n	1e5a <_usb_d_dev_out_next+0xf2>
			trans_next = ept->trans_size - ept->trans_count;
    1e8c:	b29b      	uxth	r3, r3
    1e8e:	b291      	uxth	r1, r2
    1e90:	1a5b      	subs	r3, r3, r1
    1e92:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1e94:	7ce1      	ldrb	r1, [r4, #19]
    1e96:	0689      	lsls	r1, r1, #26
    1e98:	d52d      	bpl.n	1ef6 <_usb_d_dev_out_next+0x18e>
				if (trans_next > ept->size) {
    1e9a:	8a21      	ldrh	r1, [r4, #16]
    1e9c:	428b      	cmp	r3, r1
    1e9e:	d800      	bhi.n	1ea2 <_usb_d_dev_out_next+0x13a>
			trans_next = ept->trans_size - ept->trans_count;
    1ea0:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1ea2:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1ea4:	016b      	lsls	r3, r5, #5
    1ea6:	4a29      	ldr	r2, [pc, #164]	; (1f4c <_usb_d_dev_out_next+0x1e4>)
    1ea8:	5098      	str	r0, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1eaa:	016b      	lsls	r3, r5, #5
    1eac:	4827      	ldr	r0, [pc, #156]	; (1f4c <_usb_d_dev_out_next+0x1e4>)
    1eae:	18c0      	adds	r0, r0, r3
    1eb0:	6842      	ldr	r2, [r0, #4]
    1eb2:	048b      	lsls	r3, r1, #18
    1eb4:	091b      	lsrs	r3, r3, #4
    1eb6:	4928      	ldr	r1, [pc, #160]	; (1f58 <_usb_d_dev_out_next+0x1f0>)
    1eb8:	400a      	ands	r2, r1
    1eba:	4313      	orrs	r3, r2
    1ebc:	6043      	str	r3, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1ebe:	6843      	ldr	r3, [r0, #4]
    1ec0:	0b9b      	lsrs	r3, r3, #14
    1ec2:	039a      	lsls	r2, r3, #14
    1ec4:	6042      	str	r2, [r0, #4]
	if (!isr) {
    1ec6:	2f00      	cmp	r7, #0
    1ec8:	d108      	bne.n	1edc <_usb_d_dev_out_next+0x174>
		if (is_ctrl) {
    1eca:	464b      	mov	r3, r9
    1ecc:	2b01      	cmp	r3, #1
    1ece:	d035      	beq.n	1f3c <_usb_d_dev_out_next+0x1d4>
			inten = USB_D_BANK0_INT_FLAGS;
    1ed0:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1ed2:	016b      	lsls	r3, r5, #5
    1ed4:	4922      	ldr	r1, [pc, #136]	; (1f60 <_usb_d_dev_out_next+0x1f8>)
    1ed6:	468c      	mov	ip, r1
    1ed8:	4463      	add	r3, ip
    1eda:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1edc:	3508      	adds	r5, #8
    1ede:	016d      	lsls	r5, r5, #5
    1ee0:	4b1c      	ldr	r3, [pc, #112]	; (1f54 <_usb_d_dev_out_next+0x1ec>)
    1ee2:	469c      	mov	ip, r3
    1ee4:	4465      	add	r5, ip
    1ee6:	2340      	movs	r3, #64	; 0x40
    1ee8:	712b      	strb	r3, [r5, #4]
}
    1eea:	bc3c      	pop	{r2, r3, r4, r5}
    1eec:	4690      	mov	r8, r2
    1eee:	4699      	mov	r9, r3
    1ef0:	46a2      	mov	sl, r4
    1ef2:	46ab      	mov	fp, r5
    1ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    1ef6:	8a21      	ldrh	r1, [r4, #16]
    1ef8:	428b      	cmp	r3, r1
    1efa:	d90b      	bls.n	1f14 <_usb_d_dev_out_next+0x1ac>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1efc:	2180      	movs	r1, #128	; 0x80
    1efe:	0189      	lsls	r1, r1, #6
    1f00:	428b      	cmp	r3, r1
    1f02:	d80f      	bhi.n	1f24 <_usb_d_dev_out_next+0x1bc>
    1f04:	43b3      	bics	r3, r6
    1f06:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1f08:	6823      	ldr	r3, [r4, #0]
    1f0a:	189a      	adds	r2, r3, r2
	bank->ADDR.reg          = addr;
    1f0c:	016b      	lsls	r3, r5, #5
    1f0e:	480f      	ldr	r0, [pc, #60]	; (1f4c <_usb_d_dev_out_next+0x1e4>)
    1f10:	501a      	str	r2, [r3, r0]
    1f12:	e7ca      	b.n	1eaa <_usb_d_dev_out_next+0x142>
				} else if (trans_next < ept->size) {
    1f14:	428b      	cmp	r3, r1
    1f16:	d208      	bcs.n	1f2a <_usb_d_dev_out_next+0x1c2>
					ept->flags.bits.use_cache = 1;
    1f18:	7ce1      	ldrb	r1, [r4, #19]
    1f1a:	2020      	movs	r0, #32
    1f1c:	4301      	orrs	r1, r0
    1f1e:	74e1      	strb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
    1f20:	0019      	movs	r1, r3
    1f22:	e7f1      	b.n	1f08 <_usb_d_dev_out_next+0x1a0>
						trans_next = USB_D_DEV_TRANS_MAX;
    1f24:	2180      	movs	r1, #128	; 0x80
    1f26:	0189      	lsls	r1, r1, #6
    1f28:	e7ee      	b.n	1f08 <_usb_d_dev_out_next+0x1a0>
			trans_next = ept->trans_size - ept->trans_count;
    1f2a:	0019      	movs	r1, r3
    1f2c:	e7ec      	b.n	1f08 <_usb_d_dev_out_next+0x1a0>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1f2e:	016b      	lsls	r3, r5, #5
    1f30:	4a0a      	ldr	r2, [pc, #40]	; (1f5c <_usb_d_dev_out_next+0x1f4>)
    1f32:	4694      	mov	ip, r2
    1f34:	4463      	add	r3, ip
    1f36:	222d      	movs	r2, #45	; 0x2d
    1f38:	701a      	strb	r2, [r3, #0]
    1f3a:	e797      	b.n	1e6c <_usb_d_dev_out_next+0x104>
	bank->STATUS_BK.reg     = 0;
    1f3c:	016a      	lsls	r2, r5, #5
    1f3e:	4b03      	ldr	r3, [pc, #12]	; (1f4c <_usb_d_dev_out_next+0x1e4>)
    1f40:	189b      	adds	r3, r3, r2
    1f42:	2200      	movs	r2, #0
    1f44:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1f46:	322d      	adds	r2, #45	; 0x2d
    1f48:	e7c3      	b.n	1ed2 <_usb_d_dev_out_next+0x16a>
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	200006d8 	.word	0x200006d8
    1f50:	000003ff 	.word	0x000003ff
    1f54:	41005000 	.word	0x41005000
    1f58:	f0003fff 	.word	0xf0003fff
    1f5c:	41005108 	.word	0x41005108
    1f60:	41005109 	.word	0x41005109

00001f64 <_usb_d_dev_handler>:
{
    1f64:	b570      	push	{r4, r5, r6, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1f66:	4b89      	ldr	r3, [pc, #548]	; (218c <_usb_d_dev_handler+0x228>)
    1f68:	8c1d      	ldrh	r5, [r3, #32]
    1f6a:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    1f6c:	2d00      	cmp	r5, #0
    1f6e:	d001      	beq.n	1f74 <_usb_d_dev_handler+0x10>
	bool     rc    = true;
    1f70:	2400      	movs	r4, #0
    1f72:	e0bf      	b.n	20f4 <_usb_d_dev_handler+0x190>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1f74:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1f76:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1f78:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1f7a:	075a      	lsls	r2, r3, #29
    1f7c:	d40d      	bmi.n	1f9a <_usb_d_dev_handler+0x36>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1f7e:	059a      	lsls	r2, r3, #22
    1f80:	d415      	bmi.n	1fae <_usb_d_dev_handler+0x4a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1f82:	061a      	lsls	r2, r3, #24
    1f84:	d437      	bmi.n	1ff6 <_usb_d_dev_handler+0x92>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1f86:	2270      	movs	r2, #112	; 0x70
    1f88:	421a      	tst	r2, r3
    1f8a:	d13e      	bne.n	200a <_usb_d_dev_handler+0xa6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1f8c:	071a      	lsls	r2, r3, #28
    1f8e:	d457      	bmi.n	2040 <_usb_d_dev_handler+0xdc>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1f90:	07db      	lsls	r3, r3, #31
    1f92:	d500      	bpl.n	1f96 <_usb_d_dev_handler+0x32>
    1f94:	e068      	b.n	2068 <_usb_d_dev_handler+0x104>
		rc = false;
    1f96:	2300      	movs	r3, #0
    1f98:	e006      	b.n	1fa8 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1f9a:	2204      	movs	r2, #4
    1f9c:	4b7b      	ldr	r3, [pc, #492]	; (218c <_usb_d_dev_handler+0x228>)
    1f9e:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    1fa0:	4b7b      	ldr	r3, [pc, #492]	; (2190 <_usb_d_dev_handler+0x22c>)
    1fa2:	681b      	ldr	r3, [r3, #0]
    1fa4:	4798      	blx	r3
		return true;
    1fa6:	2301      	movs	r3, #1
		if (_usb_d_dev_handle_nep()) {
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d0e1      	beq.n	1f70 <_usb_d_dev_handler+0xc>
}
    1fac:	bd70      	pop	{r4, r5, r6, pc}
    1fae:	4b77      	ldr	r3, [pc, #476]	; (218c <_usb_d_dev_handler+0x228>)
    1fb0:	4a78      	ldr	r2, [pc, #480]	; (2194 <_usb_d_dev_handler+0x230>)
    1fb2:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1fb4:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1fb6:	3a92      	subs	r2, #146	; 0x92
    1fb8:	3aff      	subs	r2, #255	; 0xff
    1fba:	831a      	strh	r2, [r3, #24]
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    1fbc:	2300      	movs	r3, #0
    1fbe:	2b01      	cmp	r3, #1
    1fc0:	d812      	bhi.n	1fe8 <_usb_d_dev_handler+0x84>
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1fc2:	0158      	lsls	r0, r3, #5
    1fc4:	4a74      	ldr	r2, [pc, #464]	; (2198 <_usb_d_dev_handler+0x234>)
    1fc6:	1812      	adds	r2, r2, r0
    1fc8:	8912      	ldrh	r2, [r2, #8]
    1fca:	0712      	lsls	r2, r2, #28
    1fcc:	0f12      	lsrs	r2, r2, #28
    1fce:	2a03      	cmp	r2, #3
    1fd0:	d002      	beq.n	1fd8 <_usb_d_dev_handler+0x74>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    1fd2:	3301      	adds	r3, #1
    1fd4:	b2db      	uxtb	r3, r3
    1fd6:	e7f2      	b.n	1fbe <_usb_d_dev_handler+0x5a>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1fd8:	4b6f      	ldr	r3, [pc, #444]	; (2198 <_usb_d_dev_handler+0x234>)
    1fda:	181b      	adds	r3, r3, r0
    1fdc:	8919      	ldrh	r1, [r3, #8]
    1fde:	0449      	lsls	r1, r1, #17
    1fe0:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    1fe2:	2200      	movs	r2, #0
    1fe4:	811a      	strh	r2, [r3, #8]
    1fe6:	e000      	b.n	1fea <_usb_d_dev_handler+0x86>
	uint32_t lpm_variable = 0;
    1fe8:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1fea:	4b69      	ldr	r3, [pc, #420]	; (2190 <_usb_d_dev_handler+0x22c>)
    1fec:	685b      	ldr	r3, [r3, #4]
    1fee:	2003      	movs	r0, #3
    1ff0:	4798      	blx	r3
	bool     rc    = true;
    1ff2:	2301      	movs	r3, #1
    1ff4:	e7d8      	b.n	1fa8 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1ff6:	2280      	movs	r2, #128	; 0x80
    1ff8:	4b64      	ldr	r3, [pc, #400]	; (218c <_usb_d_dev_handler+0x228>)
    1ffa:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1ffc:	4b64      	ldr	r3, [pc, #400]	; (2190 <_usb_d_dev_handler+0x22c>)
    1ffe:	685b      	ldr	r3, [r3, #4]
    2000:	2100      	movs	r1, #0
    2002:	2005      	movs	r0, #5
    2004:	4798      	blx	r3
	bool     rc    = true;
    2006:	2301      	movs	r3, #1
    2008:	e7ce      	b.n	1fa8 <_usb_d_dev_handler+0x44>
    200a:	4b60      	ldr	r3, [pc, #384]	; (218c <_usb_d_dev_handler+0x228>)
    200c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    200e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2010:	4a60      	ldr	r2, [pc, #384]	; (2194 <_usb_d_dev_handler+0x230>)
    2012:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2014:	4b61      	ldr	r3, [pc, #388]	; (219c <_usb_d_dev_handler+0x238>)
    2016:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2018:	069b      	lsls	r3, r3, #26
    201a:	d40c      	bmi.n	2036 <_usb_d_dev_handler+0xd2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    201c:	4b5f      	ldr	r3, [pc, #380]	; (219c <_usb_d_dev_handler+0x238>)
    201e:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    2020:	23d0      	movs	r3, #208	; 0xd0
    2022:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    2024:	2bd0      	cmp	r3, #208	; 0xd0
    2026:	d1f9      	bne.n	201c <_usb_d_dev_handler+0xb8>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2028:	4b59      	ldr	r3, [pc, #356]	; (2190 <_usb_d_dev_handler+0x22c>)
    202a:	685b      	ldr	r3, [r3, #4]
    202c:	2100      	movs	r1, #0
    202e:	2002      	movs	r0, #2
    2030:	4798      	blx	r3
	bool     rc    = true;
    2032:	2301      	movs	r3, #1
    2034:	e7b8      	b.n	1fa8 <_usb_d_dev_handler+0x44>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2036:	4b59      	ldr	r3, [pc, #356]	; (219c <_usb_d_dev_handler+0x238>)
    2038:	68db      	ldr	r3, [r3, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    203a:	06db      	lsls	r3, r3, #27
    203c:	d5fb      	bpl.n	2036 <_usb_d_dev_handler+0xd2>
    203e:	e7f3      	b.n	2028 <_usb_d_dev_handler+0xc4>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2040:	4b52      	ldr	r3, [pc, #328]	; (218c <_usb_d_dev_handler+0x228>)
    2042:	2100      	movs	r1, #0
    2044:	2280      	movs	r2, #128	; 0x80
    2046:	0052      	lsls	r2, r2, #1
    2048:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    204a:	3af8      	subs	r2, #248	; 0xf8
    204c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    204e:	3268      	adds	r2, #104	; 0x68
    2050:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2052:	4a50      	ldr	r2, [pc, #320]	; (2194 <_usb_d_dev_handler+0x230>)
    2054:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    2056:	f7ff fd9b 	bl	1b90 <_usb_d_dev_reset_epts>
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    205a:	4b4d      	ldr	r3, [pc, #308]	; (2190 <_usb_d_dev_handler+0x22c>)
    205c:	685b      	ldr	r3, [r3, #4]
    205e:	2100      	movs	r1, #0
    2060:	2001      	movs	r0, #1
    2062:	4798      	blx	r3
	bool     rc    = true;
    2064:	2301      	movs	r3, #1
    2066:	e79f      	b.n	1fa8 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2068:	4b48      	ldr	r3, [pc, #288]	; (218c <_usb_d_dev_handler+0x228>)
    206a:	4a4a      	ldr	r2, [pc, #296]	; (2194 <_usb_d_dev_handler+0x230>)
    206c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    206e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2070:	3a92      	subs	r2, #146	; 0x92
    2072:	3aff      	subs	r2, #255	; 0xff
    2074:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2076:	4b46      	ldr	r3, [pc, #280]	; (2190 <_usb_d_dev_handler+0x22c>)
    2078:	685b      	ldr	r3, [r3, #4]
    207a:	2100      	movs	r1, #0
    207c:	2004      	movs	r0, #4
    207e:	4798      	blx	r3
	bool     rc    = true;
    2080:	2301      	movs	r3, #1
    2082:	e791      	b.n	1fa8 <_usb_d_dev_handler+0x44>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2084:	06da      	lsls	r2, r3, #27
    2086:	d407      	bmi.n	2098 <_usb_d_dev_handler+0x134>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2088:	065a      	lsls	r2, r3, #25
    208a:	d408      	bmi.n	209e <_usb_d_dev_handler+0x13a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    208c:	069b      	lsls	r3, r3, #26
    208e:	d52f      	bpl.n	20f0 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    2090:	2100      	movs	r1, #0
    2092:	f7ff fc8f 	bl	19b4 <_usb_d_dev_handle_stall>
    2096:	e02b      	b.n	20f0 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_setup(ept);
    2098:	f7ff fc44 	bl	1924 <_usb_d_dev_handle_setup>
    209c:	e028      	b.n	20f0 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    209e:	2101      	movs	r1, #1
    20a0:	f7ff fc88 	bl	19b4 <_usb_d_dev_handle_stall>
    20a4:	e024      	b.n	20f0 <_usb_d_dev_handler+0x18c>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    20a6:	065a      	lsls	r2, r3, #25
    20a8:	d40f      	bmi.n	20ca <_usb_d_dev_handler+0x166>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    20aa:	071a      	lsls	r2, r3, #28
    20ac:	d411      	bmi.n	20d2 <_usb_d_dev_handler+0x16e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    20ae:	079a      	lsls	r2, r3, #30
    20b0:	d413      	bmi.n	20da <_usb_d_dev_handler+0x176>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    20b2:	7cc1      	ldrb	r1, [r0, #19]
    20b4:	2207      	movs	r2, #7
    20b6:	400a      	ands	r2, r1
    20b8:	2a01      	cmp	r2, #1
    20ba:	d119      	bne.n	20f0 <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    20bc:	075a      	lsls	r2, r3, #29
    20be:	d410      	bmi.n	20e2 <_usb_d_dev_handler+0x17e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    20c0:	06db      	lsls	r3, r3, #27
    20c2:	d515      	bpl.n	20f0 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    20c4:	f7ff fc2e 	bl	1924 <_usb_d_dev_handle_setup>
    20c8:	e012      	b.n	20f0 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    20ca:	2101      	movs	r1, #1
    20cc:	f7ff fc72 	bl	19b4 <_usb_d_dev_handle_stall>
    20d0:	e00e      	b.n	20f0 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 1);
    20d2:	2101      	movs	r1, #1
    20d4:	f7ff fcd6 	bl	1a84 <_usb_d_dev_handle_trfail>
    20d8:	e00a      	b.n	20f0 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_in_next(ept, true);
    20da:	2101      	movs	r1, #1
    20dc:	f7ff fd80 	bl	1be0 <_usb_d_dev_in_next>
    20e0:	e006      	b.n	20f0 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 0);
    20e2:	2100      	movs	r1, #0
    20e4:	f7ff fcce 	bl	1a84 <_usb_d_dev_handle_trfail>
    20e8:	e002      	b.n	20f0 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    20ea:	2100      	movs	r1, #0
    20ec:	f7ff fc62 	bl	19b4 <_usb_d_dev_handle_stall>
	for (i = 0; i < USB_D_N_EP; i++) {
    20f0:	3401      	adds	r4, #1
    20f2:	b2e4      	uxtb	r4, r4
    20f4:	2c08      	cmp	r4, #8
    20f6:	d900      	bls.n	20fa <_usb_d_dev_handler+0x196>
    20f8:	e758      	b.n	1fac <_usb_d_dev_handler+0x48>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    20fa:	4b25      	ldr	r3, [pc, #148]	; (2190 <_usb_d_dev_handler+0x22c>)
    20fc:	00a2      	lsls	r2, r4, #2
    20fe:	1911      	adds	r1, r2, r4
    2100:	0088      	lsls	r0, r1, #2
    2102:	0001      	movs	r1, r0
    2104:	3010      	adds	r0, #16
    2106:	1818      	adds	r0, r3, r0
    2108:	3004      	adds	r0, #4
		if (ept->ep == 0xFF) {
    210a:	185b      	adds	r3, r3, r1
    210c:	3326      	adds	r3, #38	; 0x26
    210e:	781b      	ldrb	r3, [r3, #0]
    2110:	2bff      	cmp	r3, #255	; 0xff
    2112:	d0ed      	beq.n	20f0 <_usb_d_dev_handler+0x18c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2114:	7c82      	ldrb	r2, [r0, #18]
    2116:	230f      	movs	r3, #15
    2118:	4013      	ands	r3, r2
	if (!(epint & (1u << epn))) {
    211a:	2201      	movs	r2, #1
    211c:	409a      	lsls	r2, r3
    211e:	422a      	tst	r2, r5
    2120:	d0e6      	beq.n	20f0 <_usb_d_dev_handler+0x18c>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2122:	001a      	movs	r2, r3
    2124:	3208      	adds	r2, #8
    2126:	0152      	lsls	r2, r2, #5
    2128:	4918      	ldr	r1, [pc, #96]	; (218c <_usb_d_dev_handler+0x228>)
    212a:	468c      	mov	ip, r1
    212c:	4462      	add	r2, ip
    212e:	79d2      	ldrb	r2, [r2, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2130:	015b      	lsls	r3, r3, #5
    2132:	491b      	ldr	r1, [pc, #108]	; (21a0 <_usb_d_dev_handler+0x23c>)
    2134:	468c      	mov	ip, r1
    2136:	4463      	add	r3, ip
    2138:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    213a:	4013      	ands	r3, r2
	if (flags) {
    213c:	d0d8      	beq.n	20f0 <_usb_d_dev_handler+0x18c>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    213e:	7cc2      	ldrb	r2, [r0, #19]
    2140:	2147      	movs	r1, #71	; 0x47
    2142:	4011      	ands	r1, r2
    2144:	2901      	cmp	r1, #1
    2146:	d09d      	beq.n	2084 <_usb_d_dev_handler+0x120>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2148:	b252      	sxtb	r2, r2
    214a:	2a00      	cmp	r2, #0
    214c:	dbab      	blt.n	20a6 <_usb_d_dev_handler+0x142>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    214e:	069a      	lsls	r2, r3, #26
    2150:	d4cb      	bmi.n	20ea <_usb_d_dev_handler+0x186>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2152:	075a      	lsls	r2, r3, #29
    2154:	d40d      	bmi.n	2172 <_usb_d_dev_handler+0x20e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2156:	07da      	lsls	r2, r3, #31
    2158:	d40f      	bmi.n	217a <_usb_d_dev_handler+0x216>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    215a:	7cc1      	ldrb	r1, [r0, #19]
    215c:	2207      	movs	r2, #7
    215e:	400a      	ands	r2, r1
    2160:	2a01      	cmp	r2, #1
    2162:	d1c5      	bne.n	20f0 <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2164:	071a      	lsls	r2, r3, #28
    2166:	d40c      	bmi.n	2182 <_usb_d_dev_handler+0x21e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2168:	06db      	lsls	r3, r3, #27
    216a:	d5c1      	bpl.n	20f0 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    216c:	f7ff fbda 	bl	1924 <_usb_d_dev_handle_setup>
    2170:	e7be      	b.n	20f0 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 0);
    2172:	2100      	movs	r1, #0
    2174:	f7ff fc86 	bl	1a84 <_usb_d_dev_handle_trfail>
    2178:	e7ba      	b.n	20f0 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_out_next(ept, true);
    217a:	2101      	movs	r1, #1
    217c:	f7ff fdf4 	bl	1d68 <_usb_d_dev_out_next>
    2180:	e7b6      	b.n	20f0 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 1);
    2182:	2101      	movs	r1, #1
    2184:	f7ff fc7e 	bl	1a84 <_usb_d_dev_handle_trfail>
    2188:	e7b2      	b.n	20f0 <_usb_d_dev_handler+0x18c>
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	41005000 	.word	0x41005000
    2190:	20000610 	.word	0x20000610
    2194:	00000201 	.word	0x00000201
    2198:	200006d8 	.word	0x200006d8
    219c:	40000800 	.word	0x40000800
    21a0:	41005109 	.word	0x41005109

000021a4 <_usb_d_dev_init>:
{
    21a4:	b500      	push	{lr}
    21a6:	b083      	sub	sp, #12
	const uint8_t spdconf[4] = {
    21a8:	2200      	movs	r2, #0
    21aa:	ab01      	add	r3, sp, #4
    21ac:	705a      	strb	r2, [r3, #1]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    21ae:	4b21      	ldr	r3, [pc, #132]	; (2234 <_usb_d_dev_init+0x90>)
    21b0:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    21b2:	07db      	lsls	r3, r3, #31
    21b4:	d41b      	bmi.n	21ee <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    21b6:	4b1f      	ldr	r3, [pc, #124]	; (2234 <_usb_d_dev_init+0x90>)
    21b8:	789b      	ldrb	r3, [r3, #2]
    21ba:	079b      	lsls	r3, r3, #30
    21bc:	d1fb      	bne.n	21b6 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    21be:	4b1d      	ldr	r3, [pc, #116]	; (2234 <_usb_d_dev_init+0x90>)
    21c0:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    21c2:	079b      	lsls	r3, r3, #30
    21c4:	d50c      	bpl.n	21e0 <_usb_d_dev_init+0x3c>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    21c6:	4a1b      	ldr	r2, [pc, #108]	; (2234 <_usb_d_dev_init+0x90>)
    21c8:	7813      	ldrb	r3, [r2, #0]
    21ca:	2102      	movs	r1, #2
    21cc:	438b      	bics	r3, r1
    21ce:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    21d0:	4b18      	ldr	r3, [pc, #96]	; (2234 <_usb_d_dev_init+0x90>)
    21d2:	789b      	ldrb	r3, [r3, #2]
    21d4:	079b      	lsls	r3, r3, #30
    21d6:	d1fb      	bne.n	21d0 <_usb_d_dev_init+0x2c>
    21d8:	4b16      	ldr	r3, [pc, #88]	; (2234 <_usb_d_dev_init+0x90>)
    21da:	789b      	ldrb	r3, [r3, #2]
    21dc:	079b      	lsls	r3, r3, #30
    21de:	d4fb      	bmi.n	21d8 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    21e0:	2201      	movs	r2, #1
    21e2:	4b14      	ldr	r3, [pc, #80]	; (2234 <_usb_d_dev_init+0x90>)
    21e4:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    21e6:	4b13      	ldr	r3, [pc, #76]	; (2234 <_usb_d_dev_init+0x90>)
    21e8:	789b      	ldrb	r3, [r3, #2]
    21ea:	079b      	lsls	r3, r3, #30
    21ec:	d1fb      	bne.n	21e6 <_usb_d_dev_init+0x42>
    21ee:	4b11      	ldr	r3, [pc, #68]	; (2234 <_usb_d_dev_init+0x90>)
    21f0:	789b      	ldrb	r3, [r3, #2]
    21f2:	07db      	lsls	r3, r3, #31
    21f4:	d4fb      	bmi.n	21ee <_usb_d_dev_init+0x4a>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    21f6:	4b10      	ldr	r3, [pc, #64]	; (2238 <_usb_d_dev_init+0x94>)
    21f8:	4a10      	ldr	r2, [pc, #64]	; (223c <_usb_d_dev_init+0x98>)
    21fa:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    21fc:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    21fe:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2200:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2202:	611a      	str	r2, [r3, #16]
	_usb_d_dev_reset_epts();
    2204:	f7ff fcc4 	bl	1b90 <_usb_d_dev_reset_epts>
	_usb_load_calib();
    2208:	f7ff fb62 	bl	18d0 <_usb_load_calib>
	((Usb *)hw)->HOST.CTRLA.reg = data;
    220c:	2204      	movs	r2, #4
    220e:	4b09      	ldr	r3, [pc, #36]	; (2234 <_usb_d_dev_init+0x90>)
    2210:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2212:	4b08      	ldr	r3, [pc, #32]	; (2234 <_usb_d_dev_init+0x90>)
    2214:	789b      	ldrb	r3, [r3, #2]
    2216:	079b      	lsls	r3, r3, #30
    2218:	d1fb      	bne.n	2212 <_usb_d_dev_init+0x6e>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    221a:	4a06      	ldr	r2, [pc, #24]	; (2234 <_usb_d_dev_init+0x90>)
    221c:	4b08      	ldr	r3, [pc, #32]	; (2240 <_usb_d_dev_init+0x9c>)
    221e:	6253      	str	r3, [r2, #36]	; 0x24
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    2220:	ab01      	add	r3, sp, #4
    2222:	785b      	ldrb	r3, [r3, #1]
    2224:	2101      	movs	r1, #1
    2226:	430b      	orrs	r3, r1
    2228:	b2db      	uxtb	r3, r3
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    222a:	8113      	strh	r3, [r2, #8]
}
    222c:	2000      	movs	r0, #0
    222e:	b003      	add	sp, #12
    2230:	bd00      	pop	{pc}
    2232:	46c0      	nop			; (mov r8, r8)
    2234:	41005000 	.word	0x41005000
    2238:	20000610 	.word	0x20000610
    223c:	000018cd 	.word	0x000018cd
    2240:	200006d8 	.word	0x200006d8

00002244 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    2244:	4b10      	ldr	r3, [pc, #64]	; (2288 <_usb_d_dev_enable+0x44>)
    2246:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    2248:	079b      	lsls	r3, r3, #30
    224a:	d119      	bne.n	2280 <_usb_d_dev_enable+0x3c>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    224c:	4b0e      	ldr	r3, [pc, #56]	; (2288 <_usb_d_dev_enable+0x44>)
    224e:	789b      	ldrb	r3, [r3, #2]
    2250:	079b      	lsls	r3, r3, #30
    2252:	d1fb      	bne.n	224c <_usb_d_dev_enable+0x8>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    2254:	4b0c      	ldr	r3, [pc, #48]	; (2288 <_usb_d_dev_enable+0x44>)
    2256:	781b      	ldrb	r3, [r3, #0]
    2258:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    225a:	079a      	lsls	r2, r3, #30
    225c:	d408      	bmi.n	2270 <_usb_d_dev_enable+0x2c>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    225e:	2202      	movs	r2, #2
    2260:	4313      	orrs	r3, r2
    2262:	b2db      	uxtb	r3, r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2264:	4a08      	ldr	r2, [pc, #32]	; (2288 <_usb_d_dev_enable+0x44>)
    2266:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2268:	4b07      	ldr	r3, [pc, #28]	; (2288 <_usb_d_dev_enable+0x44>)
    226a:	789b      	ldrb	r3, [r3, #2]
    226c:	079b      	lsls	r3, r3, #30
    226e:	d1fb      	bne.n	2268 <_usb_d_dev_enable+0x24>
    2270:	2280      	movs	r2, #128	; 0x80
    2272:	4b06      	ldr	r3, [pc, #24]	; (228c <_usb_d_dev_enable+0x48>)
    2274:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2276:	4a06      	ldr	r2, [pc, #24]	; (2290 <_usb_d_dev_enable+0x4c>)
    2278:	4b03      	ldr	r3, [pc, #12]	; (2288 <_usb_d_dev_enable+0x44>)
    227a:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    227c:	2000      	movs	r0, #0
}
    227e:	4770      	bx	lr
		return -USB_ERR_DENIED;
    2280:	2011      	movs	r0, #17
    2282:	4240      	negs	r0, r0
    2284:	e7fb      	b.n	227e <_usb_d_dev_enable+0x3a>
    2286:	46c0      	nop			; (mov r8, r8)
    2288:	41005000 	.word	0x41005000
    228c:	e000e100 	.word	0xe000e100
    2290:	0000028d 	.word	0x0000028d

00002294 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2294:	4a02      	ldr	r2, [pc, #8]	; (22a0 <_usb_d_dev_attach+0xc>)
    2296:	8913      	ldrh	r3, [r2, #8]
    2298:	2101      	movs	r1, #1
    229a:	438b      	bics	r3, r1
    229c:	8113      	strh	r3, [r2, #8]
}
    229e:	4770      	bx	lr
    22a0:	41005000 	.word	0x41005000

000022a4 <_usb_d_dev_get_speed>:
{
    22a4:	b082      	sub	sp, #8
	return (((Usb *)hw)->DEVICE.STATUS.reg & USB_DEVICE_STATUS_SPEED_Msk) >> USB_DEVICE_STATUS_SPEED_Pos;
    22a6:	4b06      	ldr	r3, [pc, #24]	; (22c0 <_usb_d_dev_get_speed+0x1c>)
    22a8:	7b1a      	ldrb	r2, [r3, #12]
    22aa:	0892      	lsrs	r2, r2, #2
    22ac:	2303      	movs	r3, #3
    22ae:	4013      	ands	r3, r2
	const enum usb_speed speed[2] = {USB_SPEED_FS, USB_SPEED_LS};
    22b0:	aa01      	add	r2, sp, #4
    22b2:	2101      	movs	r1, #1
    22b4:	7011      	strb	r1, [r2, #0]
    22b6:	2100      	movs	r1, #0
    22b8:	7051      	strb	r1, [r2, #1]
	return speed[sp];
    22ba:	5cd0      	ldrb	r0, [r2, r3]
}
    22bc:	b002      	add	sp, #8
    22be:	4770      	bx	lr
    22c0:	41005000 	.word	0x41005000

000022c4 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    22c4:	2380      	movs	r3, #128	; 0x80
    22c6:	425b      	negs	r3, r3
    22c8:	4318      	orrs	r0, r3
    22ca:	b2c0      	uxtb	r0, r0
	((Usb *)hw)->DEVICE.DADD.reg = data;
    22cc:	4b01      	ldr	r3, [pc, #4]	; (22d4 <_usb_d_dev_set_address+0x10>)
    22ce:	7298      	strb	r0, [r3, #10]
}
    22d0:	4770      	bx	lr
    22d2:	46c0      	nop			; (mov r8, r8)
    22d4:	41005000 	.word	0x41005000

000022d8 <_usb_d_dev_ep_init>:
{
    22d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    22da:	46c6      	mov	lr, r8
    22dc:	b500      	push	{lr}
    22de:	4690      	mov	r8, r2
	uint8_t               epn = USB_EP_GET_N(ep);
    22e0:	230f      	movs	r3, #15
    22e2:	4003      	ands	r3, r0
    22e4:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    22e6:	2b00      	cmp	r3, #0
    22e8:	d005      	beq.n	22f6 <_usb_d_dev_ep_init+0x1e>
    22ea:	2f00      	cmp	r7, #0
    22ec:	db01      	blt.n	22f2 <_usb_d_dev_ep_init+0x1a>
    22ee:	001d      	movs	r5, r3
    22f0:	e002      	b.n	22f8 <_usb_d_dev_ep_init+0x20>
    22f2:	1c9d      	adds	r5, r3, #2
    22f4:	e000      	b.n	22f8 <_usb_d_dev_ep_init+0x20>
    22f6:	001d      	movs	r5, r3
	return &dev_inst.ep[ep_index];
    22f8:	002e      	movs	r6, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    22fa:	2403      	movs	r4, #3
    22fc:	4021      	ands	r1, r4
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    22fe:	001c      	movs	r4, r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    2300:	2b02      	cmp	r3, #2
    2302:	d900      	bls.n	2306 <_usb_d_dev_ep_init+0x2e>
    2304:	e06d      	b.n	23e2 <_usb_d_dev_ep_init+0x10a>
	if (ept->ep != 0xFF) {
    2306:	00aa      	lsls	r2, r5, #2
    2308:	4694      	mov	ip, r2
    230a:	4465      	add	r5, ip
    230c:	00aa      	lsls	r2, r5, #2
    230e:	4694      	mov	ip, r2
    2310:	4d3b      	ldr	r5, [pc, #236]	; (2400 <_usb_d_dev_ep_init+0x128>)
    2312:	4465      	add	r5, ip
    2314:	3526      	adds	r5, #38	; 0x26
    2316:	782d      	ldrb	r5, [r5, #0]
    2318:	2dff      	cmp	r5, #255	; 0xff
    231a:	d165      	bne.n	23e8 <_usb_d_dev_ep_init+0x110>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    231c:	2900      	cmp	r1, #0
    231e:	d115      	bne.n	234c <_usb_d_dev_ep_init+0x74>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2320:	2b00      	cmp	r3, #0
    2322:	d003      	beq.n	232c <_usb_d_dev_ep_init+0x54>
    2324:	2f00      	cmp	r7, #0
    2326:	db01      	blt.n	232c <_usb_d_dev_ep_init+0x54>
    2328:	3302      	adds	r3, #2
    232a:	b2db      	uxtb	r3, r3
		if (ept_in->ep != 0xFF) {
    232c:	009d      	lsls	r5, r3, #2
    232e:	18eb      	adds	r3, r5, r3
    2330:	009d      	lsls	r5, r3, #2
    2332:	4b33      	ldr	r3, [pc, #204]	; (2400 <_usb_d_dev_ep_init+0x128>)
    2334:	195b      	adds	r3, r3, r5
    2336:	3326      	adds	r3, #38	; 0x26
    2338:	781b      	ldrb	r3, [r3, #0]
    233a:	2bff      	cmp	r3, #255	; 0xff
    233c:	d157      	bne.n	23ee <_usb_d_dev_ep_init+0x116>
		if (pcfg->cache == NULL) {
    233e:	0063      	lsls	r3, r4, #1
    2340:	191b      	adds	r3, r3, r4
    2342:	009d      	lsls	r5, r3, #2
    2344:	4b2f      	ldr	r3, [pc, #188]	; (2404 <_usb_d_dev_ep_init+0x12c>)
    2346:	58eb      	ldr	r3, [r5, r3]
    2348:	2b00      	cmp	r3, #0
    234a:	d053      	beq.n	23f4 <_usb_d_dev_ep_init+0x11c>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    234c:	2f00      	cmp	r7, #0
    234e:	db2f      	blt.n	23b0 <_usb_d_dev_ep_init+0xd8>
    2350:	0063      	lsls	r3, r4, #1
    2352:	191b      	adds	r3, r3, r4
    2354:	009d      	lsls	r5, r3, #2
    2356:	4b2b      	ldr	r3, [pc, #172]	; (2404 <_usb_d_dev_ep_init+0x12c>)
    2358:	58eb      	ldr	r3, [r5, r3]
    235a:	1e5d      	subs	r5, r3, #1
    235c:	41ab      	sbcs	r3, r5
    235e:	b2db      	uxtb	r3, r3
    2360:	2b00      	cmp	r3, #0
    2362:	d009      	beq.n	2378 <_usb_d_dev_ep_init+0xa0>
    2364:	2f00      	cmp	r7, #0
    2366:	db2d      	blt.n	23c4 <_usb_d_dev_ep_init+0xec>
    2368:	0063      	lsls	r3, r4, #1
    236a:	191b      	adds	r3, r3, r4
    236c:	009d      	lsls	r5, r3, #2
    236e:	4b25      	ldr	r3, [pc, #148]	; (2404 <_usb_d_dev_ep_init+0x12c>)
    2370:	195b      	adds	r3, r3, r5
    2372:	891b      	ldrh	r3, [r3, #8]
    2374:	4543      	cmp	r3, r8
    2376:	db40      	blt.n	23fa <_usb_d_dev_ep_init+0x122>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2378:	2f00      	cmp	r7, #0
    237a:	db2a      	blt.n	23d2 <_usb_d_dev_ep_init+0xfa>
    237c:	0063      	lsls	r3, r4, #1
    237e:	191c      	adds	r4, r3, r4
    2380:	00a3      	lsls	r3, r4, #2
    2382:	4c20      	ldr	r4, [pc, #128]	; (2404 <_usb_d_dev_ep_init+0x12c>)
    2384:	591b      	ldr	r3, [r3, r4]
    2386:	469c      	mov	ip, r3
    2388:	4c1d      	ldr	r4, [pc, #116]	; (2400 <_usb_d_dev_ep_init+0x128>)
    238a:	00b5      	lsls	r5, r6, #2
    238c:	19af      	adds	r7, r5, r6
    238e:	00bb      	lsls	r3, r7, #2
    2390:	001f      	movs	r7, r3
    2392:	18e3      	adds	r3, r4, r3
    2394:	4662      	mov	r2, ip
    2396:	621a      	str	r2, [r3, #32]
	ept->size     = max_pkt_siz;
    2398:	4642      	mov	r2, r8
    239a:	849a      	strh	r2, [r3, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    239c:	3101      	adds	r1, #1
    239e:	3327      	adds	r3, #39	; 0x27
    23a0:	7019      	strb	r1, [r3, #0]
	ept->ep       = ep;
    23a2:	19e4      	adds	r4, r4, r7
    23a4:	3426      	adds	r4, #38	; 0x26
    23a6:	7020      	strb	r0, [r4, #0]
	return USB_OK;
    23a8:	2000      	movs	r0, #0
}
    23aa:	bc04      	pop	{r2}
    23ac:	4690      	mov	r8, r2
    23ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    23b0:	0063      	lsls	r3, r4, #1
    23b2:	191b      	adds	r3, r3, r4
    23b4:	009d      	lsls	r5, r3, #2
    23b6:	4b13      	ldr	r3, [pc, #76]	; (2404 <_usb_d_dev_ep_init+0x12c>)
    23b8:	195b      	adds	r3, r3, r5
    23ba:	685b      	ldr	r3, [r3, #4]
    23bc:	1e5d      	subs	r5, r3, #1
    23be:	41ab      	sbcs	r3, r5
    23c0:	b2db      	uxtb	r3, r3
    23c2:	e7cd      	b.n	2360 <_usb_d_dev_ep_init+0x88>
    23c4:	0063      	lsls	r3, r4, #1
    23c6:	191b      	adds	r3, r3, r4
    23c8:	009d      	lsls	r5, r3, #2
    23ca:	4b0e      	ldr	r3, [pc, #56]	; (2404 <_usb_d_dev_ep_init+0x12c>)
    23cc:	195b      	adds	r3, r3, r5
    23ce:	895b      	ldrh	r3, [r3, #10]
    23d0:	e7d0      	b.n	2374 <_usb_d_dev_ep_init+0x9c>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    23d2:	0063      	lsls	r3, r4, #1
    23d4:	191c      	adds	r4, r3, r4
    23d6:	00a5      	lsls	r5, r4, #2
    23d8:	4b0a      	ldr	r3, [pc, #40]	; (2404 <_usb_d_dev_ep_init+0x12c>)
    23da:	195b      	adds	r3, r3, r5
    23dc:	685b      	ldr	r3, [r3, #4]
    23de:	469c      	mov	ip, r3
    23e0:	e7d2      	b.n	2388 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    23e2:	2012      	movs	r0, #18
    23e4:	4240      	negs	r0, r0
    23e6:	e7e0      	b.n	23aa <_usb_d_dev_ep_init+0xd2>
		return -USB_ERR_REDO;
    23e8:	2014      	movs	r0, #20
    23ea:	4240      	negs	r0, r0
    23ec:	e7dd      	b.n	23aa <_usb_d_dev_ep_init+0xd2>
			return -USB_ERR_REDO;
    23ee:	2014      	movs	r0, #20
    23f0:	4240      	negs	r0, r0
    23f2:	e7da      	b.n	23aa <_usb_d_dev_ep_init+0xd2>
			return -USB_ERR_FUNC;
    23f4:	2013      	movs	r0, #19
    23f6:	4240      	negs	r0, r0
    23f8:	e7d7      	b.n	23aa <_usb_d_dev_ep_init+0xd2>
		return -USB_ERR_FUNC;
    23fa:	2013      	movs	r0, #19
    23fc:	4240      	negs	r0, r0
    23fe:	e7d4      	b.n	23aa <_usb_d_dev_ep_init+0xd2>
    2400:	20000610 	.word	0x20000610
    2404:	00004ae4 	.word	0x00004ae4

00002408 <_usb_d_dev_ep_deinit>:
{
    2408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    240a:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    240c:	240f      	movs	r4, #15
    240e:	4004      	ands	r4, r0
    2410:	b247      	sxtb	r7, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2412:	0ff9      	lsrs	r1, r7, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2414:	2c00      	cmp	r4, #0
    2416:	d005      	beq.n	2424 <_usb_d_dev_ep_deinit+0x1c>
    2418:	2f00      	cmp	r7, #0
    241a:	db01      	blt.n	2420 <_usb_d_dev_ep_deinit+0x18>
    241c:	0022      	movs	r2, r4
    241e:	e002      	b.n	2426 <_usb_d_dev_ep_deinit+0x1e>
    2420:	1ca2      	adds	r2, r4, #2
    2422:	e000      	b.n	2426 <_usb_d_dev_ep_deinit+0x1e>
    2424:	0022      	movs	r2, r4
	return &dev_inst.ep[ep_index];
    2426:	0016      	movs	r6, r2
    2428:	0093      	lsls	r3, r2, #2
    242a:	189b      	adds	r3, r3, r2
    242c:	0098      	lsls	r0, r3, #2
    242e:	3010      	adds	r0, #16
    2430:	4b21      	ldr	r3, [pc, #132]	; (24b8 <_usb_d_dev_ep_deinit+0xb0>)
    2432:	1818      	adds	r0, r3, r0
    2434:	3004      	adds	r0, #4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2436:	2c02      	cmp	r4, #2
    2438:	d82e      	bhi.n	2498 <_usb_d_dev_ep_deinit+0x90>
    243a:	0093      	lsls	r3, r2, #2
    243c:	189a      	adds	r2, r3, r2
    243e:	0093      	lsls	r3, r2, #2
    2440:	469c      	mov	ip, r3
    2442:	4b1d      	ldr	r3, [pc, #116]	; (24b8 <_usb_d_dev_ep_deinit+0xb0>)
    2444:	4463      	add	r3, ip
    2446:	3326      	adds	r3, #38	; 0x26
    2448:	781b      	ldrb	r3, [r3, #0]
    244a:	2bff      	cmp	r3, #255	; 0xff
    244c:	d024      	beq.n	2498 <_usb_d_dev_ep_deinit+0x90>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    244e:	2203      	movs	r2, #3
    2450:	f7ff fadc 	bl	1a0c <_usb_d_dev_trans_stop>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2454:	00b2      	lsls	r2, r6, #2
    2456:	1992      	adds	r2, r2, r6
    2458:	0091      	lsls	r1, r2, #2
    245a:	4b17      	ldr	r3, [pc, #92]	; (24b8 <_usb_d_dev_ep_deinit+0xb0>)
    245c:	185b      	adds	r3, r3, r1
    245e:	3320      	adds	r3, #32
    2460:	79da      	ldrb	r2, [r3, #7]
    2462:	2307      	movs	r3, #7
    2464:	4013      	ands	r3, r2
    2466:	2b01      	cmp	r3, #1
    2468:	d017      	beq.n	249a <_usb_d_dev_ep_deinit+0x92>
	} else if (USB_EP_GET_DIR(ep)) {
    246a:	2f00      	cmp	r7, #0
    246c:	db1b      	blt.n	24a6 <_usb_d_dev_ep_deinit+0x9e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    246e:	4a13      	ldr	r2, [pc, #76]	; (24bc <_usb_d_dev_ep_deinit+0xb4>)
    2470:	3508      	adds	r5, #8
    2472:	016d      	lsls	r5, r5, #5
    2474:	5cab      	ldrb	r3, [r5, r2]
    2476:	2107      	movs	r1, #7
    2478:	438b      	bics	r3, r1
    247a:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    247c:	4b0e      	ldr	r3, [pc, #56]	; (24b8 <_usb_d_dev_ep_deinit+0xb0>)
    247e:	00b1      	lsls	r1, r6, #2
    2480:	1988      	adds	r0, r1, r6
    2482:	0082      	lsls	r2, r0, #2
    2484:	189a      	adds	r2, r3, r2
    2486:	3227      	adds	r2, #39	; 0x27
    2488:	2000      	movs	r0, #0
    248a:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    248c:	198e      	adds	r6, r1, r6
    248e:	00b2      	lsls	r2, r6, #2
    2490:	189b      	adds	r3, r3, r2
    2492:	3326      	adds	r3, #38	; 0x26
    2494:	22ff      	movs	r2, #255	; 0xff
    2496:	701a      	strb	r2, [r3, #0]
}
    2498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    249a:	3508      	adds	r5, #8
    249c:	016d      	lsls	r5, r5, #5
    249e:	2200      	movs	r2, #0
    24a0:	4b06      	ldr	r3, [pc, #24]	; (24bc <_usb_d_dev_ep_deinit+0xb4>)
    24a2:	54ea      	strb	r2, [r5, r3]
    24a4:	e7ea      	b.n	247c <_usb_d_dev_ep_deinit+0x74>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    24a6:	4a05      	ldr	r2, [pc, #20]	; (24bc <_usb_d_dev_ep_deinit+0xb4>)
    24a8:	3408      	adds	r4, #8
    24aa:	0164      	lsls	r4, r4, #5
    24ac:	5ca3      	ldrb	r3, [r4, r2]
    24ae:	2170      	movs	r1, #112	; 0x70
    24b0:	438b      	bics	r3, r1
    24b2:	54a3      	strb	r3, [r4, r2]
    24b4:	e7e2      	b.n	247c <_usb_d_dev_ep_deinit+0x74>
    24b6:	46c0      	nop			; (mov r8, r8)
    24b8:	20000610 	.word	0x20000610
    24bc:	41005000 	.word	0x41005000

000024c0 <_usb_d_dev_ep_enable>:
{
    24c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    24c2:	230f      	movs	r3, #15
    24c4:	4003      	ands	r3, r0
    24c6:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    24c8:	2b00      	cmp	r3, #0
    24ca:	d005      	beq.n	24d8 <_usb_d_dev_ep_enable+0x18>
    24cc:	2800      	cmp	r0, #0
    24ce:	db01      	blt.n	24d4 <_usb_d_dev_ep_enable+0x14>
    24d0:	001e      	movs	r6, r3
    24d2:	e002      	b.n	24da <_usb_d_dev_ep_enable+0x1a>
    24d4:	1c9e      	adds	r6, r3, #2
    24d6:	e000      	b.n	24da <_usb_d_dev_ep_enable+0x1a>
    24d8:	001e      	movs	r6, r3
	return &dev_inst.ep[ep_index];
    24da:	0032      	movs	r2, r6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    24dc:	0019      	movs	r1, r3
    24de:	3108      	adds	r1, #8
    24e0:	0149      	lsls	r1, r1, #5
    24e2:	4caf      	ldr	r4, [pc, #700]	; (27a0 <_usb_d_dev_ep_enable+0x2e0>)
    24e4:	5d0c      	ldrb	r4, [r1, r4]
    24e6:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    24e8:	2b02      	cmp	r3, #2
    24ea:	d900      	bls.n	24ee <_usb_d_dev_ep_enable+0x2e>
    24ec:	e148      	b.n	2780 <_usb_d_dev_ep_enable+0x2c0>
    24ee:	00b5      	lsls	r5, r6, #2
    24f0:	19ad      	adds	r5, r5, r6
    24f2:	00ae      	lsls	r6, r5, #2
    24f4:	49ab      	ldr	r1, [pc, #684]	; (27a4 <_usb_d_dev_ep_enable+0x2e4>)
    24f6:	1989      	adds	r1, r1, r6
    24f8:	3126      	adds	r1, #38	; 0x26
    24fa:	7809      	ldrb	r1, [r1, #0]
    24fc:	29ff      	cmp	r1, #255	; 0xff
    24fe:	d100      	bne.n	2502 <_usb_d_dev_ep_enable+0x42>
    2500:	e141      	b.n	2786 <_usb_d_dev_ep_enable+0x2c6>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    2502:	0159      	lsls	r1, r3, #5
    2504:	4ea8      	ldr	r6, [pc, #672]	; (27a8 <_usb_d_dev_ep_enable+0x2e8>)
    2506:	1876      	adds	r6, r6, r1
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2508:	0095      	lsls	r5, r2, #2
    250a:	18ad      	adds	r5, r5, r2
    250c:	00af      	lsls	r7, r5, #2
    250e:	49a5      	ldr	r1, [pc, #660]	; (27a4 <_usb_d_dev_ep_enable+0x2e4>)
    2510:	19c9      	adds	r1, r1, r7
    2512:	3120      	adds	r1, #32
    2514:	79cd      	ldrb	r5, [r1, #7]
    2516:	2107      	movs	r1, #7
    2518:	4029      	ands	r1, r5
    251a:	2901      	cmp	r1, #1
    251c:	d036      	beq.n	258c <_usb_d_dev_ep_enable+0xcc>
	} else if (dir) {
    251e:	2800      	cmp	r0, #0
    2520:	da00      	bge.n	2524 <_usb_d_dev_ep_enable+0x64>
    2522:	e0c5      	b.n	26b0 <_usb_d_dev_ep_enable+0x1f0>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    2524:	0761      	lsls	r1, r4, #29
    2526:	d000      	beq.n	252a <_usb_d_dev_ep_enable+0x6a>
    2528:	e136      	b.n	2798 <_usb_d_dev_ep_enable+0x2d8>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    252a:	489e      	ldr	r0, [pc, #632]	; (27a4 <_usb_d_dev_ep_enable+0x2e4>)
    252c:	0095      	lsls	r5, r2, #2
    252e:	18af      	adds	r7, r5, r2
    2530:	00b9      	lsls	r1, r7, #2
    2532:	1841      	adds	r1, r0, r1
    2534:	3120      	adds	r1, #32
    2536:	79c9      	ldrb	r1, [r1, #7]
    2538:	0749      	lsls	r1, r1, #29
    253a:	0f49      	lsrs	r1, r1, #29
    253c:	430c      	orrs	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    253e:	0019      	movs	r1, r3
    2540:	3108      	adds	r1, #8
    2542:	0149      	lsls	r1, r1, #5
    2544:	4f96      	ldr	r7, [pc, #600]	; (27a0 <_usb_d_dev_ep_enable+0x2e0>)
    2546:	55cc      	strb	r4, [r1, r7]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2548:	18aa      	adds	r2, r5, r2
    254a:	0091      	lsls	r1, r2, #2
    254c:	1840      	adds	r0, r0, r1
    254e:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    2550:	0382      	lsls	r2, r0, #14
    2552:	4996      	ldr	r1, [pc, #600]	; (27ac <_usb_d_dev_ep_enable+0x2ec>)
    2554:	400a      	ands	r2, r1
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2556:	2180      	movs	r1, #128	; 0x80
    2558:	0089      	lsls	r1, r1, #2
    255a:	4288      	cmp	r0, r1
    255c:	d900      	bls.n	2560 <_usb_d_dev_ep_enable+0xa0>
    255e:	e0f2      	b.n	2746 <_usb_d_dev_ep_enable+0x286>
    2560:	3901      	subs	r1, #1
    2562:	39ff      	subs	r1, #255	; 0xff
    2564:	4288      	cmp	r0, r1
    2566:	d900      	bls.n	256a <_usb_d_dev_ep_enable+0xaa>
    2568:	e100      	b.n	276c <_usb_d_dev_ep_enable+0x2ac>
    256a:	2880      	cmp	r0, #128	; 0x80
    256c:	d900      	bls.n	2570 <_usb_d_dev_ep_enable+0xb0>
    256e:	e0ff      	b.n	2770 <_usb_d_dev_ep_enable+0x2b0>
    2570:	2840      	cmp	r0, #64	; 0x40
    2572:	d900      	bls.n	2576 <_usb_d_dev_ep_enable+0xb6>
    2574:	e0fe      	b.n	2774 <_usb_d_dev_ep_enable+0x2b4>
    2576:	2820      	cmp	r0, #32
    2578:	d900      	bls.n	257c <_usb_d_dev_ep_enable+0xbc>
    257a:	e0fd      	b.n	2778 <_usb_d_dev_ep_enable+0x2b8>
    257c:	2810      	cmp	r0, #16
    257e:	d900      	bls.n	2582 <_usb_d_dev_ep_enable+0xc2>
    2580:	e0fc      	b.n	277c <_usb_d_dev_ep_enable+0x2bc>
    2582:	39f8      	subs	r1, #248	; 0xf8
    2584:	4281      	cmp	r1, r0
    2586:	4189      	sbcs	r1, r1
    2588:	4249      	negs	r1, r1
    258a:	e0dd      	b.n	2748 <_usb_d_dev_ep_enable+0x288>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    258c:	3176      	adds	r1, #118	; 0x76
    258e:	4221      	tst	r1, r4
    2590:	d000      	beq.n	2594 <_usb_d_dev_ep_enable+0xd4>
    2592:	e0fb      	b.n	278c <_usb_d_dev_ep_enable+0x2cc>
    2594:	0019      	movs	r1, r3
    2596:	3108      	adds	r1, #8
    2598:	0149      	lsls	r1, r1, #5
    259a:	2411      	movs	r4, #17
    259c:	4880      	ldr	r0, [pc, #512]	; (27a0 <_usb_d_dev_ep_enable+0x2e0>)
    259e:	540c      	strb	r4, [r1, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    25a0:	4980      	ldr	r1, [pc, #512]	; (27a4 <_usb_d_dev_ep_enable+0x2e4>)
    25a2:	19c9      	adds	r1, r1, r7
    25a4:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    25a6:	0388      	lsls	r0, r1, #14
    25a8:	4c80      	ldr	r4, [pc, #512]	; (27ac <_usb_d_dev_ep_enable+0x2ec>)
    25aa:	4020      	ands	r0, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    25ac:	2480      	movs	r4, #128	; 0x80
    25ae:	00a4      	lsls	r4, r4, #2
    25b0:	42a1      	cmp	r1, r4
    25b2:	d810      	bhi.n	25d6 <_usb_d_dev_ep_enable+0x116>
    25b4:	3c01      	subs	r4, #1
    25b6:	3cff      	subs	r4, #255	; 0xff
    25b8:	42a1      	cmp	r1, r4
    25ba:	d827      	bhi.n	260c <_usb_d_dev_ep_enable+0x14c>
    25bc:	2980      	cmp	r1, #128	; 0x80
    25be:	d827      	bhi.n	2610 <_usb_d_dev_ep_enable+0x150>
    25c0:	2940      	cmp	r1, #64	; 0x40
    25c2:	d827      	bhi.n	2614 <_usb_d_dev_ep_enable+0x154>
    25c4:	2920      	cmp	r1, #32
    25c6:	d827      	bhi.n	2618 <_usb_d_dev_ep_enable+0x158>
    25c8:	2910      	cmp	r1, #16
    25ca:	d827      	bhi.n	261c <_usb_d_dev_ep_enable+0x15c>
    25cc:	3cf8      	subs	r4, #248	; 0xf8
    25ce:	428c      	cmp	r4, r1
    25d0:	41a4      	sbcs	r4, r4
    25d2:	4264      	negs	r4, r4
    25d4:	e000      	b.n	25d8 <_usb_d_dev_ep_enable+0x118>
    25d6:	2407      	movs	r4, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    25d8:	0724      	lsls	r4, r4, #28
    25da:	4320      	orrs	r0, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    25dc:	6070      	str	r0, [r6, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    25de:	0488      	lsls	r0, r1, #18
    25e0:	0c80      	lsrs	r0, r0, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    25e2:	2480      	movs	r4, #128	; 0x80
    25e4:	00a4      	lsls	r4, r4, #2
    25e6:	42a1      	cmp	r1, r4
    25e8:	d81a      	bhi.n	2620 <_usb_d_dev_ep_enable+0x160>
    25ea:	3c01      	subs	r4, #1
    25ec:	3cff      	subs	r4, #255	; 0xff
    25ee:	42a1      	cmp	r1, r4
    25f0:	d854      	bhi.n	269c <_usb_d_dev_ep_enable+0x1dc>
    25f2:	2980      	cmp	r1, #128	; 0x80
    25f4:	d854      	bhi.n	26a0 <_usb_d_dev_ep_enable+0x1e0>
    25f6:	2940      	cmp	r1, #64	; 0x40
    25f8:	d854      	bhi.n	26a4 <_usb_d_dev_ep_enable+0x1e4>
    25fa:	2920      	cmp	r1, #32
    25fc:	d854      	bhi.n	26a8 <_usb_d_dev_ep_enable+0x1e8>
    25fe:	2910      	cmp	r1, #16
    2600:	d854      	bhi.n	26ac <_usb_d_dev_ep_enable+0x1ec>
    2602:	3cf8      	subs	r4, #248	; 0xf8
    2604:	428c      	cmp	r4, r1
    2606:	4189      	sbcs	r1, r1
    2608:	4249      	negs	r1, r1
    260a:	e00a      	b.n	2622 <_usb_d_dev_ep_enable+0x162>
    260c:	2406      	movs	r4, #6
    260e:	e7e3      	b.n	25d8 <_usb_d_dev_ep_enable+0x118>
    2610:	2405      	movs	r4, #5
    2612:	e7e1      	b.n	25d8 <_usb_d_dev_ep_enable+0x118>
    2614:	2404      	movs	r4, #4
    2616:	e7df      	b.n	25d8 <_usb_d_dev_ep_enable+0x118>
    2618:	2403      	movs	r4, #3
    261a:	e7dd      	b.n	25d8 <_usb_d_dev_ep_enable+0x118>
    261c:	2402      	movs	r4, #2
    261e:	e7db      	b.n	25d8 <_usb_d_dev_ep_enable+0x118>
    2620:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2622:	0709      	lsls	r1, r1, #28
    2624:	4301      	orrs	r1, r0
    2626:	6171      	str	r1, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2628:	0019      	movs	r1, r3
    262a:	3108      	adds	r1, #8
    262c:	0149      	lsls	r1, r1, #5
    262e:	485c      	ldr	r0, [pc, #368]	; (27a0 <_usb_d_dev_ep_enable+0x2e0>)
    2630:	4684      	mov	ip, r0
    2632:	4461      	add	r1, ip
    2634:	2040      	movs	r0, #64	; 0x40
    2636:	7148      	strb	r0, [r1, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2638:	2480      	movs	r4, #128	; 0x80
    263a:	710c      	strb	r4, [r1, #4]
	bank->STATUS_BK.reg     = 0;
    263c:	4d5a      	ldr	r5, [pc, #360]	; (27a8 <_usb_d_dev_ep_enable+0x2e8>)
    263e:	015b      	lsls	r3, r3, #5
    2640:	18eb      	adds	r3, r5, r3
    2642:	2100      	movs	r1, #0
    2644:	7299      	strb	r1, [r3, #10]
    2646:	7699      	strb	r1, [r3, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2648:	4e56      	ldr	r6, [pc, #344]	; (27a4 <_usb_d_dev_ep_enable+0x2e4>)
    264a:	0094      	lsls	r4, r2, #2
    264c:	18a3      	adds	r3, r4, r2
    264e:	0099      	lsls	r1, r3, #2
    2650:	1871      	adds	r1, r6, r1
    2652:	000b      	movs	r3, r1
    2654:	3326      	adds	r3, #38	; 0x26
    2656:	781b      	ldrb	r3, [r3, #0]
    2658:	270f      	movs	r7, #15
    265a:	403b      	ands	r3, r7
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    265c:	6a0f      	ldr	r7, [r1, #32]
	bank->ADDR.reg          = addr;
    265e:	0159      	lsls	r1, r3, #5
    2660:	514f      	str	r7, [r1, r5]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    2662:	18a2      	adds	r2, r4, r2
    2664:	0094      	lsls	r4, r2, #2
    2666:	1936      	adds	r6, r6, r4
    2668:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    266a:	186c      	adds	r4, r5, r1
    266c:	6865      	ldr	r5, [r4, #4]
    266e:	0492      	lsls	r2, r2, #18
    2670:	0912      	lsrs	r2, r2, #4
    2672:	4e4f      	ldr	r6, [pc, #316]	; (27b0 <_usb_d_dev_ep_enable+0x2f0>)
    2674:	4035      	ands	r5, r6
    2676:	432a      	orrs	r2, r5
    2678:	6062      	str	r2, [r4, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    267a:	6862      	ldr	r2, [r4, #4]
    267c:	0b92      	lsrs	r2, r2, #14
    267e:	0395      	lsls	r5, r2, #14
    2680:	6065      	str	r5, [r4, #4]
    2682:	3308      	adds	r3, #8
    2684:	015b      	lsls	r3, r3, #5
    2686:	4463      	add	r3, ip
    2688:	22b0      	movs	r2, #176	; 0xb0
    268a:	711a      	strb	r2, [r3, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    268c:	7158      	strb	r0, [r3, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    268e:	4b49      	ldr	r3, [pc, #292]	; (27b4 <_usb_d_dev_ep_enable+0x2f4>)
    2690:	469c      	mov	ip, r3
    2692:	4461      	add	r1, ip
    2694:	2310      	movs	r3, #16
    2696:	700b      	strb	r3, [r1, #0]
	return USB_OK;
    2698:	2000      	movs	r0, #0
    269a:	e066      	b.n	276a <_usb_d_dev_ep_enable+0x2aa>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    269c:	2106      	movs	r1, #6
    269e:	e7c0      	b.n	2622 <_usb_d_dev_ep_enable+0x162>
    26a0:	2105      	movs	r1, #5
    26a2:	e7be      	b.n	2622 <_usb_d_dev_ep_enable+0x162>
    26a4:	2104      	movs	r1, #4
    26a6:	e7bc      	b.n	2622 <_usb_d_dev_ep_enable+0x162>
    26a8:	2103      	movs	r1, #3
    26aa:	e7ba      	b.n	2622 <_usb_d_dev_ep_enable+0x162>
    26ac:	2102      	movs	r1, #2
    26ae:	e7b8      	b.n	2622 <_usb_d_dev_ep_enable+0x162>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    26b0:	2170      	movs	r1, #112	; 0x70
    26b2:	4221      	tst	r1, r4
    26b4:	d000      	beq.n	26b8 <_usb_d_dev_ep_enable+0x1f8>
    26b6:	e06c      	b.n	2792 <_usb_d_dev_ep_enable+0x2d2>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    26b8:	483a      	ldr	r0, [pc, #232]	; (27a4 <_usb_d_dev_ep_enable+0x2e4>)
    26ba:	0095      	lsls	r5, r2, #2
    26bc:	18af      	adds	r7, r5, r2
    26be:	00b9      	lsls	r1, r7, #2
    26c0:	1841      	adds	r1, r0, r1
    26c2:	3120      	adds	r1, #32
    26c4:	79c9      	ldrb	r1, [r1, #7]
    26c6:	0749      	lsls	r1, r1, #29
    26c8:	0e49      	lsrs	r1, r1, #25
    26ca:	430c      	orrs	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    26cc:	0019      	movs	r1, r3
    26ce:	3108      	adds	r1, #8
    26d0:	0149      	lsls	r1, r1, #5
    26d2:	4f33      	ldr	r7, [pc, #204]	; (27a0 <_usb_d_dev_ep_enable+0x2e0>)
    26d4:	55cc      	strb	r4, [r1, r7]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    26d6:	18aa      	adds	r2, r5, r2
    26d8:	0091      	lsls	r1, r2, #2
    26da:	1840      	adds	r0, r0, r1
    26dc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    26de:	048a      	lsls	r2, r1, #18
    26e0:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    26e2:	2080      	movs	r0, #128	; 0x80
    26e4:	0080      	lsls	r0, r0, #2
    26e6:	4281      	cmp	r1, r0
    26e8:	d810      	bhi.n	270c <_usb_d_dev_ep_enable+0x24c>
    26ea:	3801      	subs	r0, #1
    26ec:	38ff      	subs	r0, #255	; 0xff
    26ee:	4281      	cmp	r1, r0
    26f0:	d81f      	bhi.n	2732 <_usb_d_dev_ep_enable+0x272>
    26f2:	2980      	cmp	r1, #128	; 0x80
    26f4:	d81f      	bhi.n	2736 <_usb_d_dev_ep_enable+0x276>
    26f6:	2940      	cmp	r1, #64	; 0x40
    26f8:	d81f      	bhi.n	273a <_usb_d_dev_ep_enable+0x27a>
    26fa:	2920      	cmp	r1, #32
    26fc:	d81f      	bhi.n	273e <_usb_d_dev_ep_enable+0x27e>
    26fe:	2910      	cmp	r1, #16
    2700:	d81f      	bhi.n	2742 <_usb_d_dev_ep_enable+0x282>
    2702:	38f8      	subs	r0, #248	; 0xf8
    2704:	4288      	cmp	r0, r1
    2706:	4189      	sbcs	r1, r1
    2708:	4249      	negs	r1, r1
    270a:	e000      	b.n	270e <_usb_d_dev_ep_enable+0x24e>
    270c:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    270e:	0709      	lsls	r1, r1, #28
    2710:	430a      	orrs	r2, r1
    2712:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2714:	001a      	movs	r2, r3
    2716:	3208      	adds	r2, #8
    2718:	0152      	lsls	r2, r2, #5
    271a:	4921      	ldr	r1, [pc, #132]	; (27a0 <_usb_d_dev_ep_enable+0x2e0>)
    271c:	468c      	mov	ip, r1
    271e:	4462      	add	r2, ip
    2720:	2180      	movs	r1, #128	; 0x80
    2722:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    2724:	015a      	lsls	r2, r3, #5
    2726:	4b20      	ldr	r3, [pc, #128]	; (27a8 <_usb_d_dev_ep_enable+0x2e8>)
    2728:	189b      	adds	r3, r3, r2
    272a:	2200      	movs	r2, #0
    272c:	769a      	strb	r2, [r3, #26]
	return USB_OK;
    272e:	2000      	movs	r0, #0
    2730:	e01b      	b.n	276a <_usb_d_dev_ep_enable+0x2aa>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2732:	2106      	movs	r1, #6
    2734:	e7eb      	b.n	270e <_usb_d_dev_ep_enable+0x24e>
    2736:	2105      	movs	r1, #5
    2738:	e7e9      	b.n	270e <_usb_d_dev_ep_enable+0x24e>
    273a:	2104      	movs	r1, #4
    273c:	e7e7      	b.n	270e <_usb_d_dev_ep_enable+0x24e>
    273e:	2103      	movs	r1, #3
    2740:	e7e5      	b.n	270e <_usb_d_dev_ep_enable+0x24e>
    2742:	2102      	movs	r1, #2
    2744:	e7e3      	b.n	270e <_usb_d_dev_ep_enable+0x24e>
    2746:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2748:	0709      	lsls	r1, r1, #28
    274a:	430a      	orrs	r2, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    274c:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    274e:	001a      	movs	r2, r3
    2750:	3208      	adds	r2, #8
    2752:	0152      	lsls	r2, r2, #5
    2754:	4912      	ldr	r1, [pc, #72]	; (27a0 <_usb_d_dev_ep_enable+0x2e0>)
    2756:	468c      	mov	ip, r1
    2758:	4462      	add	r2, ip
    275a:	2140      	movs	r1, #64	; 0x40
    275c:	7151      	strb	r1, [r2, #5]
	bank->STATUS_BK.reg     = 0;
    275e:	015b      	lsls	r3, r3, #5
    2760:	4a11      	ldr	r2, [pc, #68]	; (27a8 <_usb_d_dev_ep_enable+0x2e8>)
    2762:	18d3      	adds	r3, r2, r3
    2764:	2200      	movs	r2, #0
    2766:	729a      	strb	r2, [r3, #10]
	return USB_OK;
    2768:	2000      	movs	r0, #0
}
    276a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    276c:	2106      	movs	r1, #6
    276e:	e7eb      	b.n	2748 <_usb_d_dev_ep_enable+0x288>
    2770:	2105      	movs	r1, #5
    2772:	e7e9      	b.n	2748 <_usb_d_dev_ep_enable+0x288>
    2774:	2104      	movs	r1, #4
    2776:	e7e7      	b.n	2748 <_usb_d_dev_ep_enable+0x288>
    2778:	2103      	movs	r1, #3
    277a:	e7e5      	b.n	2748 <_usb_d_dev_ep_enable+0x288>
    277c:	2102      	movs	r1, #2
    277e:	e7e3      	b.n	2748 <_usb_d_dev_ep_enable+0x288>
		return -USB_ERR_PARAM;
    2780:	2012      	movs	r0, #18
    2782:	4240      	negs	r0, r0
    2784:	e7f1      	b.n	276a <_usb_d_dev_ep_enable+0x2aa>
    2786:	2012      	movs	r0, #18
    2788:	4240      	negs	r0, r0
    278a:	e7ee      	b.n	276a <_usb_d_dev_ep_enable+0x2aa>
			return -USB_ERR_REDO;
    278c:	2014      	movs	r0, #20
    278e:	4240      	negs	r0, r0
    2790:	e7eb      	b.n	276a <_usb_d_dev_ep_enable+0x2aa>
			return -USB_ERR_REDO;
    2792:	2014      	movs	r0, #20
    2794:	4240      	negs	r0, r0
    2796:	e7e8      	b.n	276a <_usb_d_dev_ep_enable+0x2aa>
			return -USB_ERR_REDO;
    2798:	2014      	movs	r0, #20
    279a:	4240      	negs	r0, r0
    279c:	e7e5      	b.n	276a <_usb_d_dev_ep_enable+0x2aa>
    279e:	46c0      	nop			; (mov r8, r8)
    27a0:	41005000 	.word	0x41005000
    27a4:	20000610 	.word	0x20000610
    27a8:	200006d8 	.word	0x200006d8
    27ac:	0fffc000 	.word	0x0fffc000
    27b0:	f0003fff 	.word	0xf0003fff
    27b4:	41005109 	.word	0x41005109

000027b8 <_usb_d_dev_ep_stall>:
{
    27b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    27ba:	230f      	movs	r3, #15
    27bc:	4003      	ands	r3, r0
    27be:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    27c0:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    27c2:	2b00      	cmp	r3, #0
    27c4:	d005      	beq.n	27d2 <_usb_d_dev_ep_stall+0x1a>
    27c6:	2800      	cmp	r0, #0
    27c8:	db01      	blt.n	27ce <_usb_d_dev_ep_stall+0x16>
    27ca:	001a      	movs	r2, r3
    27cc:	e002      	b.n	27d4 <_usb_d_dev_ep_stall+0x1c>
    27ce:	1c9a      	adds	r2, r3, #2
    27d0:	e000      	b.n	27d4 <_usb_d_dev_ep_stall+0x1c>
    27d2:	001a      	movs	r2, r3
	return &dev_inst.ep[ep_index];
    27d4:	0015      	movs	r5, r2
    27d6:	0090      	lsls	r0, r2, #2
    27d8:	1880      	adds	r0, r0, r2
    27da:	0082      	lsls	r2, r0, #2
    27dc:	3210      	adds	r2, #16
    27de:	4845      	ldr	r0, [pc, #276]	; (28f4 <_usb_d_dev_ep_stall+0x13c>)
    27e0:	1882      	adds	r2, r0, r2
    27e2:	3204      	adds	r2, #4
	if (epn > CONF_USB_D_MAX_EP_N) {
    27e4:	2b02      	cmp	r3, #2
    27e6:	d900      	bls.n	27ea <_usb_d_dev_ep_stall+0x32>
    27e8:	e080      	b.n	28ec <_usb_d_dev_ep_stall+0x134>
	if (USB_EP_STALL_SET == ctrl) {
    27ea:	2901      	cmp	r1, #1
    27ec:	d017      	beq.n	281e <_usb_d_dev_ep_stall+0x66>
	} else if (USB_EP_STALL_CLR == ctrl) {
    27ee:	2900      	cmp	r1, #0
    27f0:	d039      	beq.n	2866 <_usb_d_dev_ep_stall+0xae>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    27f2:	00aa      	lsls	r2, r5, #2
    27f4:	1952      	adds	r2, r2, r5
    27f6:	0091      	lsls	r1, r2, #2
    27f8:	4b3e      	ldr	r3, [pc, #248]	; (28f4 <_usb_d_dev_ep_stall+0x13c>)
    27fa:	185b      	adds	r3, r3, r1
    27fc:	3326      	adds	r3, #38	; 0x26
    27fe:	781a      	ldrb	r2, [r3, #0]
    2800:	230f      	movs	r3, #15
    2802:	4013      	ands	r3, r2
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2804:	3308      	adds	r3, #8
    2806:	015b      	lsls	r3, r3, #5
    2808:	4a3b      	ldr	r2, [pc, #236]	; (28f8 <_usb_d_dev_ep_stall+0x140>)
    280a:	4694      	mov	ip, r2
    280c:	4463      	add	r3, ip
    280e:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2810:	2310      	movs	r3, #16
    2812:	40a3      	lsls	r3, r4
    2814:	4018      	ands	r0, r3
    2816:	1e43      	subs	r3, r0, #1
    2818:	4198      	sbcs	r0, r3
    281a:	b2c0      	uxtb	r0, r0
}
    281c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    281e:	00aa      	lsls	r2, r5, #2
    2820:	1951      	adds	r1, r2, r5
    2822:	008b      	lsls	r3, r1, #2
    2824:	18c3      	adds	r3, r0, r3
    2826:	3326      	adds	r3, #38	; 0x26
    2828:	781b      	ldrb	r3, [r3, #0]
    282a:	210f      	movs	r1, #15
    282c:	400b      	ands	r3, r1
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    282e:	2610      	movs	r6, #16
    2830:	40a6      	lsls	r6, r4
    2832:	b2f6      	uxtb	r6, r6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2834:	0019      	movs	r1, r3
    2836:	3108      	adds	r1, #8
    2838:	0149      	lsls	r1, r1, #5
    283a:	4f2f      	ldr	r7, [pc, #188]	; (28f8 <_usb_d_dev_ep_stall+0x140>)
    283c:	46bc      	mov	ip, r7
    283e:	4461      	add	r1, ip
    2840:	714e      	strb	r6, [r1, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2842:	2120      	movs	r1, #32
    2844:	40a1      	lsls	r1, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    2846:	b2cc      	uxtb	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2848:	0159      	lsls	r1, r3, #5
    284a:	4b2c      	ldr	r3, [pc, #176]	; (28fc <_usb_d_dev_ep_stall+0x144>)
    284c:	469c      	mov	ip, r3
    284e:	4461      	add	r1, ip
    2850:	700c      	strb	r4, [r1, #0]
	ept->flags.bits.is_stalled = 1;
    2852:	1952      	adds	r2, r2, r5
    2854:	0093      	lsls	r3, r2, #2
    2856:	18c3      	adds	r3, r0, r3
    2858:	3320      	adds	r3, #32
    285a:	79da      	ldrb	r2, [r3, #7]
    285c:	2108      	movs	r1, #8
    285e:	430a      	orrs	r2, r1
    2860:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    2862:	2000      	movs	r0, #0
    2864:	e7da      	b.n	281c <_usb_d_dev_ep_stall+0x64>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    2866:	7c93      	ldrb	r3, [r2, #18]
    2868:	310f      	adds	r1, #15
    286a:	400b      	ands	r3, r1
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    286c:	0019      	movs	r1, r3
    286e:	3108      	adds	r1, #8
    2870:	0149      	lsls	r1, r1, #5
    2872:	4821      	ldr	r0, [pc, #132]	; (28f8 <_usb_d_dev_ep_stall+0x140>)
    2874:	4684      	mov	ip, r0
    2876:	4461      	add	r1, ip
    2878:	7988      	ldrb	r0, [r1, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    287a:	2110      	movs	r1, #16
    287c:	40a1      	lsls	r1, r4
	if (!is_stalled) {
    287e:	4208      	tst	r0, r1
    2880:	d024      	beq.n	28cc <_usb_d_dev_ep_stall+0x114>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2882:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2884:	0018      	movs	r0, r3
    2886:	3008      	adds	r0, #8
    2888:	0140      	lsls	r0, r0, #5
    288a:	4460      	add	r0, ip
    288c:	7101      	strb	r1, [r0, #4]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    288e:	2120      	movs	r1, #32
    2890:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2892:	b2ce      	uxtb	r6, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2894:	015d      	lsls	r5, r3, #5
    2896:	4f1a      	ldr	r7, [pc, #104]	; (2900 <_usb_d_dev_ep_stall+0x148>)
    2898:	46bc      	mov	ip, r7
    289a:	4465      	add	r5, ip
    289c:	702e      	strb	r6, [r5, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    289e:	79c0      	ldrb	r0, [r0, #7]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    28a0:	4208      	tst	r0, r1
    28a2:	d00a      	beq.n	28ba <_usb_d_dev_ep_stall+0x102>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    28a4:	0019      	movs	r1, r3
    28a6:	3108      	adds	r1, #8
    28a8:	0149      	lsls	r1, r1, #5
    28aa:	4813      	ldr	r0, [pc, #76]	; (28f8 <_usb_d_dev_ep_stall+0x140>)
    28ac:	4684      	mov	ip, r0
    28ae:	4461      	add	r1, ip
    28b0:	71ce      	strb	r6, [r1, #7]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    28b2:	2001      	movs	r0, #1
    28b4:	40a0      	lsls	r0, r4
    28b6:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    28b8:	7108      	strb	r0, [r1, #4]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    28ba:	7cd0      	ldrb	r0, [r2, #19]
    28bc:	2107      	movs	r1, #7
    28be:	4001      	ands	r1, r0
    28c0:	2901      	cmp	r1, #1
    28c2:	d005      	beq.n	28d0 <_usb_d_dev_ep_stall+0x118>
		ept->flags.bits.is_stalled = 0;
    28c4:	7cd3      	ldrb	r3, [r2, #19]
    28c6:	2108      	movs	r1, #8
    28c8:	438b      	bics	r3, r1
    28ca:	74d3      	strb	r3, [r2, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    28cc:	2000      	movs	r0, #0
    28ce:	e7a5      	b.n	281c <_usb_d_dev_ep_stall+0x64>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    28d0:	3308      	adds	r3, #8
    28d2:	015b      	lsls	r3, r3, #5
    28d4:	4908      	ldr	r1, [pc, #32]	; (28f8 <_usb_d_dev_ep_stall+0x140>)
    28d6:	468c      	mov	ip, r1
    28d8:	4463      	add	r3, ip
    28da:	7999      	ldrb	r1, [r3, #6]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    28dc:	2330      	movs	r3, #48	; 0x30
    28de:	4219      	tst	r1, r3
    28e0:	d1f4      	bne.n	28cc <_usb_d_dev_ep_stall+0x114>
			ept->flags.bits.is_stalled = 0;
    28e2:	0003      	movs	r3, r0
    28e4:	2108      	movs	r1, #8
    28e6:	438b      	bics	r3, r1
    28e8:	74d3      	strb	r3, [r2, #19]
    28ea:	e7ef      	b.n	28cc <_usb_d_dev_ep_stall+0x114>
		return -USB_ERR_PARAM;
    28ec:	2012      	movs	r0, #18
    28ee:	4240      	negs	r0, r0
    28f0:	e794      	b.n	281c <_usb_d_dev_ep_stall+0x64>
    28f2:	46c0      	nop			; (mov r8, r8)
    28f4:	20000610 	.word	0x20000610
    28f8:	41005000 	.word	0x41005000
    28fc:	41005109 	.word	0x41005109
    2900:	41005108 	.word	0x41005108

00002904 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    2904:	b570      	push	{r4, r5, r6, lr}
    2906:	000e      	movs	r6, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    2908:	240f      	movs	r4, #15
    290a:	4004      	ands	r4, r0
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    290c:	0162      	lsls	r2, r4, #5
    290e:	4b18      	ldr	r3, [pc, #96]	; (2970 <_usb_d_dev_ep_read_req+0x6c>)
    2910:	189b      	adds	r3, r3, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    2912:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    2914:	685d      	ldr	r5, [r3, #4]
    2916:	04ad      	lsls	r5, r5, #18
    2918:	0cad      	lsrs	r5, r5, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    291a:	2c02      	cmp	r4, #2
    291c:	d81f      	bhi.n	295e <_usb_d_dev_ep_read_req+0x5a>
    291e:	2e00      	cmp	r6, #0
    2920:	d020      	beq.n	2964 <_usb_d_dev_ep_read_req+0x60>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2922:	0023      	movs	r3, r4
    2924:	3308      	adds	r3, #8
    2926:	015b      	lsls	r3, r3, #5
    2928:	4a12      	ldr	r2, [pc, #72]	; (2974 <_usb_d_dev_ep_read_req+0x70>)
    292a:	5c9b      	ldrb	r3, [r3, r2]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    292c:	2b11      	cmp	r3, #17
    292e:	d11c      	bne.n	296a <_usb_d_dev_ep_read_req+0x66>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2930:	0023      	movs	r3, r4
    2932:	3308      	adds	r3, #8
    2934:	015b      	lsls	r3, r3, #5
    2936:	4694      	mov	ip, r2
    2938:	4463      	add	r3, ip
    293a:	79db      	ldrb	r3, [r3, #7]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    293c:	06db      	lsls	r3, r3, #27
    293e:	d401      	bmi.n	2944 <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
    2940:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    2942:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    2944:	2208      	movs	r2, #8
    2946:	0030      	movs	r0, r6
    2948:	f001 fefe 	bl	4748 <memcpy>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    294c:	3408      	adds	r4, #8
    294e:	0164      	lsls	r4, r4, #5
    2950:	4b08      	ldr	r3, [pc, #32]	; (2974 <_usb_d_dev_ep_read_req+0x70>)
    2952:	469c      	mov	ip, r3
    2954:	4464      	add	r4, ip
    2956:	2310      	movs	r3, #16
    2958:	71e3      	strb	r3, [r4, #7]
	return bytes;
    295a:	0028      	movs	r0, r5
    295c:	e7f1      	b.n	2942 <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_PARAM;
    295e:	2012      	movs	r0, #18
    2960:	4240      	negs	r0, r0
    2962:	e7ee      	b.n	2942 <_usb_d_dev_ep_read_req+0x3e>
    2964:	2012      	movs	r0, #18
    2966:	4240      	negs	r0, r0
    2968:	e7eb      	b.n	2942 <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_FUNC;
    296a:	2013      	movs	r0, #19
    296c:	4240      	negs	r0, r0
    296e:	e7e8      	b.n	2942 <_usb_d_dev_ep_read_req+0x3e>
    2970:	200006d8 	.word	0x200006d8
    2974:	41005000 	.word	0x41005000

00002978 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2978:	b5f0      	push	{r4, r5, r6, r7, lr}
    297a:	46de      	mov	lr, fp
    297c:	4657      	mov	r7, sl
    297e:	464e      	mov	r6, r9
    2980:	4645      	mov	r5, r8
    2982:	b5e0      	push	{r5, r6, r7, lr}
    2984:	b085      	sub	sp, #20
    2986:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    2988:	7a05      	ldrb	r5, [r0, #8]
    298a:	230f      	movs	r3, #15
    298c:	402b      	ands	r3, r5
    298e:	b26d      	sxtb	r5, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    2990:	0fea      	lsrs	r2, r5, #31
    2992:	4691      	mov	r9, r2
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2994:	2b00      	cmp	r3, #0
    2996:	d005      	beq.n	29a4 <_usb_d_dev_ep_trans+0x2c>
    2998:	2d00      	cmp	r5, #0
    299a:	db01      	blt.n	29a0 <_usb_d_dev_ep_trans+0x28>
    299c:	0018      	movs	r0, r3
    299e:	e002      	b.n	29a6 <_usb_d_dev_ep_trans+0x2e>
    29a0:	1c98      	adds	r0, r3, #2
    29a2:	e000      	b.n	29a6 <_usb_d_dev_ep_trans+0x2e>
    29a4:	0018      	movs	r0, r3
	return &dev_inst.ep[ep_index];
    29a6:	0006      	movs	r6, r0
    29a8:	495f      	ldr	r1, [pc, #380]	; (2b28 <_usb_d_dev_ep_trans+0x1b0>)
    29aa:	0082      	lsls	r2, r0, #2
    29ac:	1817      	adds	r7, r2, r0
    29ae:	00bc      	lsls	r4, r7, #2
    29b0:	3410      	adds	r4, #16
    29b2:	190c      	adds	r4, r1, r4
    29b4:	3404      	adds	r4, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    29b6:	00b8      	lsls	r0, r7, #2
    29b8:	1809      	adds	r1, r1, r0
    29ba:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    29bc:	495b      	ldr	r1, [pc, #364]	; (2b2c <_usb_d_dev_ep_trans+0x1b4>)
    29be:	428a      	cmp	r2, r1
    29c0:	d042      	beq.n	2a48 <_usb_d_dev_ep_trans+0xd0>
    29c2:	1e57      	subs	r7, r2, #1
    29c4:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    29c6:	4641      	mov	r1, r8
    29c8:	6849      	ldr	r1, [r1, #4]
    29ca:	400f      	ands	r7, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    29cc:	2b02      	cmp	r3, #2
    29ce:	d900      	bls.n	29d2 <_usb_d_dev_ep_trans+0x5a>
    29d0:	e0a1      	b.n	2b16 <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    29d2:	4643      	mov	r3, r8
    29d4:	681b      	ldr	r3, [r3, #0]
    29d6:	4856      	ldr	r0, [pc, #344]	; (2b30 <_usb_d_dev_ep_trans+0x1b8>)
    29d8:	4283      	cmp	r3, r0
    29da:	d90c      	bls.n	29f6 <_usb_d_dev_ep_trans+0x7e>
    29dc:	18c8      	adds	r0, r1, r3
    29de:	9001      	str	r0, [sp, #4]
    29e0:	4854      	ldr	r0, [pc, #336]	; (2b34 <_usb_d_dev_ep_trans+0x1bc>)
    29e2:	4684      	mov	ip, r0
    29e4:	9801      	ldr	r0, [sp, #4]
    29e6:	4560      	cmp	r0, ip
    29e8:	d805      	bhi.n	29f6 <_usb_d_dev_ep_trans+0x7e>
    29ea:	079b      	lsls	r3, r3, #30
    29ec:	d103      	bne.n	29f6 <_usb_d_dev_ep_trans+0x7e>
	    || (!dir && (trans->size < ept->size))) {
    29ee:	2d00      	cmp	r5, #0
    29f0:	db2c      	blt.n	2a4c <_usb_d_dev_ep_trans+0xd4>
    29f2:	4291      	cmp	r1, r2
    29f4:	d22d      	bcs.n	2a52 <_usb_d_dev_ep_trans+0xda>
		if (!ept->cache) {
    29f6:	00b3      	lsls	r3, r6, #2
    29f8:	199b      	adds	r3, r3, r6
    29fa:	009a      	lsls	r2, r3, #2
    29fc:	4b4a      	ldr	r3, [pc, #296]	; (2b28 <_usb_d_dev_ep_trans+0x1b0>)
    29fe:	189b      	adds	r3, r3, r2
    2a00:	6a1b      	ldr	r3, [r3, #32]
    2a02:	2b00      	cmp	r3, #0
    2a04:	d100      	bne.n	2a08 <_usb_d_dev_ep_trans+0x90>
    2a06:	e089      	b.n	2b1c <_usb_d_dev_ep_trans+0x1a4>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    2a08:	2301      	movs	r3, #1
    2a0a:	9301      	str	r3, [sp, #4]
	}
	if (!dir && size_n_aligned) {
    2a0c:	2d00      	cmp	r5, #0
    2a0e:	db0a      	blt.n	2a26 <_usb_d_dev_ep_trans+0xae>
    2a10:	2f00      	cmp	r7, #0
    2a12:	d008      	beq.n	2a26 <_usb_d_dev_ep_trans+0xae>
		if (!ept->cache) {
    2a14:	00b3      	lsls	r3, r6, #2
    2a16:	199b      	adds	r3, r3, r6
    2a18:	009a      	lsls	r2, r3, #2
    2a1a:	4b43      	ldr	r3, [pc, #268]	; (2b28 <_usb_d_dev_ep_trans+0x1b0>)
    2a1c:	189b      	adds	r3, r3, r2
    2a1e:	6a1b      	ldr	r3, [r3, #32]
    2a20:	2b00      	cmp	r3, #0
    2a22:	d100      	bne.n	2a26 <_usb_d_dev_ep_trans+0xae>
    2a24:	e07d      	b.n	2b22 <_usb_d_dev_ep_trans+0x1aa>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2a26:	00b2      	lsls	r2, r6, #2
    2a28:	1992      	adds	r2, r2, r6
    2a2a:	0091      	lsls	r1, r2, #2
    2a2c:	4b3e      	ldr	r3, [pc, #248]	; (2b28 <_usb_d_dev_ep_trans+0x1b0>)
    2a2e:	185b      	adds	r3, r3, r1
    2a30:	3320      	adds	r3, #32
    2a32:	79db      	ldrb	r3, [r3, #7]
    2a34:	071b      	lsls	r3, r3, #28
    2a36:	d50f      	bpl.n	2a58 <_usb_d_dev_ep_trans+0xe0>
		return USB_HALTED;
    2a38:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2a3a:	b005      	add	sp, #20
    2a3c:	bc3c      	pop	{r2, r3, r4, r5}
    2a3e:	4690      	mov	r8, r2
    2a40:	4699      	mov	r9, r3
    2a42:	46a2      	mov	sl, r4
    2a44:	46ab      	mov	fp, r5
    2a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2a48:	0017      	movs	r7, r2
    2a4a:	e7bc      	b.n	29c6 <_usb_d_dev_ep_trans+0x4e>
	bool use_cache = false;
    2a4c:	2300      	movs	r3, #0
    2a4e:	9301      	str	r3, [sp, #4]
    2a50:	e7dc      	b.n	2a0c <_usb_d_dev_ep_trans+0x94>
    2a52:	2300      	movs	r3, #0
    2a54:	9301      	str	r3, [sp, #4]
    2a56:	e7d9      	b.n	2a0c <_usb_d_dev_ep_trans+0x94>
	atomic_enter_critical(&flags);
    2a58:	a803      	add	r0, sp, #12
    2a5a:	f7fd fbbb 	bl	1d4 <atomic_enter_critical>
	if (_usb_d_dev_ep_is_busy(ept)) {
    2a5e:	00b2      	lsls	r2, r6, #2
    2a60:	1992      	adds	r2, r2, r6
    2a62:	0091      	lsls	r1, r2, #2
    2a64:	4b30      	ldr	r3, [pc, #192]	; (2b28 <_usb_d_dev_ep_trans+0x1b0>)
    2a66:	185b      	adds	r3, r3, r1
    2a68:	3320      	adds	r3, #32
    2a6a:	79db      	ldrb	r3, [r3, #7]
    2a6c:	065b      	lsls	r3, r3, #25
    2a6e:	d430      	bmi.n	2ad2 <_usb_d_dev_ep_trans+0x15a>
	ept->flags.bits.is_busy = 1;
    2a70:	00b3      	lsls	r3, r6, #2
    2a72:	199b      	adds	r3, r3, r6
    2a74:	009a      	lsls	r2, r3, #2
    2a76:	4b2c      	ldr	r3, [pc, #176]	; (2b28 <_usb_d_dev_ep_trans+0x1b0>)
    2a78:	469b      	mov	fp, r3
    2a7a:	4493      	add	fp, r2
    2a7c:	2320      	movs	r3, #32
    2a7e:	445b      	add	r3, fp
    2a80:	469a      	mov	sl, r3
    2a82:	79db      	ldrb	r3, [r3, #7]
    2a84:	2240      	movs	r2, #64	; 0x40
    2a86:	4313      	orrs	r3, r2
    2a88:	4652      	mov	r2, sl
    2a8a:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    2a8c:	a803      	add	r0, sp, #12
    2a8e:	f7fd fba8 	bl	1e2 <atomic_leave_critical>
	ept->trans_buf   = trans->buf;
    2a92:	465b      	mov	r3, fp
    2a94:	4642      	mov	r2, r8
    2a96:	6812      	ldr	r2, [r2, #0]
    2a98:	615a      	str	r2, [r3, #20]
	ept->trans_size  = trans->size;
    2a9a:	4642      	mov	r2, r8
    2a9c:	6852      	ldr	r2, [r2, #4]
    2a9e:	619a      	str	r2, [r3, #24]
	ept->trans_count = 0;
    2aa0:	2300      	movs	r3, #0
    2aa2:	465a      	mov	r2, fp
    2aa4:	61d3      	str	r3, [r2, #28]
	ept->flags.bits.dir       = dir;
    2aa6:	464b      	mov	r3, r9
    2aa8:	01db      	lsls	r3, r3, #7
    2aaa:	4652      	mov	r2, sl
    2aac:	79d2      	ldrb	r2, [r2, #7]
    2aae:	217f      	movs	r1, #127	; 0x7f
    2ab0:	4011      	ands	r1, r2
	ept->flags.bits.use_cache = use_cache;
    2ab2:	9a01      	ldr	r2, [sp, #4]
    2ab4:	0152      	lsls	r2, r2, #5
    2ab6:	430b      	orrs	r3, r1
    2ab8:	2120      	movs	r1, #32
    2aba:	438b      	bics	r3, r1
    2abc:	431a      	orrs	r2, r3
    2abe:	4653      	mov	r3, sl
    2ac0:	71da      	strb	r2, [r3, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2ac2:	4643      	mov	r3, r8
    2ac4:	7a5b      	ldrb	r3, [r3, #9]
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	d008      	beq.n	2adc <_usb_d_dev_ep_trans+0x164>
    2aca:	2f00      	cmp	r7, #0
    2acc:	d01b      	beq.n	2b06 <_usb_d_dev_ep_trans+0x18e>
    2ace:	2200      	movs	r2, #0
    2ad0:	e005      	b.n	2ade <_usb_d_dev_ep_trans+0x166>
		atomic_leave_critical(&flags);
    2ad2:	a803      	add	r0, sp, #12
    2ad4:	f7fd fb85 	bl	1e2 <atomic_leave_critical>
		return USB_BUSY;
    2ad8:	2001      	movs	r0, #1
    2ada:	e7ae      	b.n	2a3a <_usb_d_dev_ep_trans+0xc2>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2adc:	2200      	movs	r2, #0
    2ade:	00b3      	lsls	r3, r6, #2
    2ae0:	199e      	adds	r6, r3, r6
    2ae2:	00b1      	lsls	r1, r6, #2
    2ae4:	4b10      	ldr	r3, [pc, #64]	; (2b28 <_usb_d_dev_ep_trans+0x1b0>)
    2ae6:	185b      	adds	r3, r3, r1
    2ae8:	3320      	adds	r3, #32
    2aea:	0111      	lsls	r1, r2, #4
    2aec:	79da      	ldrb	r2, [r3, #7]
    2aee:	2010      	movs	r0, #16
    2af0:	4382      	bics	r2, r0
    2af2:	430a      	orrs	r2, r1
    2af4:	71da      	strb	r2, [r3, #7]
	if (dir) {
    2af6:	2d00      	cmp	r5, #0
    2af8:	db07      	blt.n	2b0a <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    2afa:	2100      	movs	r1, #0
    2afc:	0020      	movs	r0, r4
    2afe:	f7ff f933 	bl	1d68 <_usb_d_dev_out_next>
	return ERR_NONE;
    2b02:	2000      	movs	r0, #0
    2b04:	e799      	b.n	2a3a <_usb_d_dev_ep_trans+0xc2>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2b06:	2201      	movs	r2, #1
    2b08:	e7e9      	b.n	2ade <_usb_d_dev_ep_trans+0x166>
		_usb_d_dev_in_next(ept, false);
    2b0a:	2100      	movs	r1, #0
    2b0c:	0020      	movs	r0, r4
    2b0e:	f7ff f867 	bl	1be0 <_usb_d_dev_in_next>
	return ERR_NONE;
    2b12:	2000      	movs	r0, #0
    2b14:	e791      	b.n	2a3a <_usb_d_dev_ep_trans+0xc2>
		return -USB_ERR_PARAM;
    2b16:	2012      	movs	r0, #18
    2b18:	4240      	negs	r0, r0
    2b1a:	e78e      	b.n	2a3a <_usb_d_dev_ep_trans+0xc2>
			return -USB_ERR_FUNC;
    2b1c:	2013      	movs	r0, #19
    2b1e:	4240      	negs	r0, r0
    2b20:	e78b      	b.n	2a3a <_usb_d_dev_ep_trans+0xc2>
			return -USB_ERR_PARAM;
    2b22:	2012      	movs	r0, #18
    2b24:	4240      	negs	r0, r0
    2b26:	e788      	b.n	2a3a <_usb_d_dev_ep_trans+0xc2>
    2b28:	20000610 	.word	0x20000610
    2b2c:	000003ff 	.word	0x000003ff
    2b30:	1fffffff 	.word	0x1fffffff
    2b34:	20003fff 	.word	0x20003fff

00002b38 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2b38:	2900      	cmp	r1, #0
    2b3a:	d006      	beq.n	2b4a <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    2b3c:	2801      	cmp	r0, #1
    2b3e:	d006      	beq.n	2b4e <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2b40:	2800      	cmp	r0, #0
    2b42:	d101      	bne.n	2b48 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2b44:	4b03      	ldr	r3, [pc, #12]	; (2b54 <_usb_d_dev_register_callback+0x1c>)
    2b46:	6019      	str	r1, [r3, #0]
	}
}
    2b48:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2b4a:	4903      	ldr	r1, [pc, #12]	; (2b58 <_usb_d_dev_register_callback+0x20>)
    2b4c:	e7f6      	b.n	2b3c <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2b4e:	4b01      	ldr	r3, [pc, #4]	; (2b54 <_usb_d_dev_register_callback+0x1c>)
    2b50:	6059      	str	r1, [r3, #4]
    2b52:	e7f9      	b.n	2b48 <_usb_d_dev_register_callback+0x10>
    2b54:	20000610 	.word	0x20000610
    2b58:	000018cd 	.word	0x000018cd

00002b5c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2b5c:	2900      	cmp	r1, #0
    2b5e:	d008      	beq.n	2b72 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2b60:	2800      	cmp	r0, #0
    2b62:	d008      	beq.n	2b76 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2b64:	2801      	cmp	r0, #1
    2b66:	d009      	beq.n	2b7c <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2b68:	2802      	cmp	r0, #2
    2b6a:	d106      	bne.n	2b7a <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2b6c:	4b05      	ldr	r3, [pc, #20]	; (2b84 <_usb_d_dev_register_ep_callback+0x28>)
    2b6e:	6119      	str	r1, [r3, #16]
	}
}
    2b70:	e003      	b.n	2b7a <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2b72:	4905      	ldr	r1, [pc, #20]	; (2b88 <_usb_d_dev_register_ep_callback+0x2c>)
    2b74:	e7f4      	b.n	2b60 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2b76:	4b03      	ldr	r3, [pc, #12]	; (2b84 <_usb_d_dev_register_ep_callback+0x28>)
    2b78:	6099      	str	r1, [r3, #8]
}
    2b7a:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2b7c:	4b01      	ldr	r3, [pc, #4]	; (2b84 <_usb_d_dev_register_ep_callback+0x28>)
    2b7e:	60d9      	str	r1, [r3, #12]
    2b80:	e7fb      	b.n	2b7a <_usb_d_dev_register_ep_callback+0x1e>
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	20000610 	.word	0x20000610
    2b88:	000018cd 	.word	0x000018cd

00002b8c <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    2b8c:	b510      	push	{r4, lr}

	_usb_d_dev_handler();
    2b8e:	f7ff f9e9 	bl	1f64 <_usb_d_dev_handler>
}
    2b92:	bd10      	pop	{r4, pc}

00002b94 <EXT_I2C_IRQ_int_Handler>:
uint8_t GetBtnState(void){
	return btnState;
}

static void EXT_I2C_IRQ_int_Handler(void){
	i2cIntCount++;
    2b94:	4a02      	ldr	r2, [pc, #8]	; (2ba0 <EXT_I2C_IRQ_int_Handler+0xc>)
    2b96:	7813      	ldrb	r3, [r2, #0]
    2b98:	3301      	adds	r3, #1
    2b9a:	7013      	strb	r3, [r2, #0]
}
    2b9c:	4770      	bx	lr
    2b9e:	46c0      	nop			; (mov r8, r8)
    2ba0:	20000738 	.word	0x20000738

00002ba4 <I2C_RTC_Handler>:

static void I2C_RTC_Handler(void){
	rtcIntCount++;
    2ba4:	4a02      	ldr	r2, [pc, #8]	; (2bb0 <I2C_RTC_Handler+0xc>)
    2ba6:	7813      	ldrb	r3, [r2, #0]
    2ba8:	3301      	adds	r3, #1
    2baa:	7013      	strb	r3, [r2, #0]
}
    2bac:	4770      	bx	lr
    2bae:	46c0      	nop			; (mov r8, r8)
    2bb0:	2000073a 	.word	0x2000073a

00002bb4 <RF_int_Handler>:

static void RF_int_Handler(void){
	rfIntCount++;
    2bb4:	4a02      	ldr	r2, [pc, #8]	; (2bc0 <RF_int_Handler+0xc>)
    2bb6:	7813      	ldrb	r3, [r2, #0]
    2bb8:	3301      	adds	r3, #1
    2bba:	7013      	strb	r3, [r2, #0]
}
    2bbc:	4770      	bx	lr
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	20000739 	.word	0x20000739

00002bc4 <BTN_Handler>:
static void BTN_Handler(void){
    2bc4:	b510      	push	{r4, lr}
    2bc6:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    2bc8:	a801      	add	r0, sp, #4
    2bca:	f7fd fb03 	bl	1d4 <atomic_enter_critical>
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2bce:	21c0      	movs	r1, #192	; 0xc0
    2bd0:	05c9      	lsls	r1, r1, #23
    2bd2:	2380      	movs	r3, #128	; 0x80
    2bd4:	58cb      	ldr	r3, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2bd6:	22a0      	movs	r2, #160	; 0xa0
    2bd8:	4808      	ldr	r0, [pc, #32]	; (2bfc <BTN_Handler+0x38>)
    2bda:	5882      	ldr	r2, [r0, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2bdc:	2090      	movs	r0, #144	; 0x90
    2bde:	580c      	ldr	r4, [r1, r0]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2be0:	4054      	eors	r4, r2
    2be2:	401c      	ands	r4, r3
    2be4:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    2be6:	a801      	add	r0, sp, #4
    2be8:	f7fd fafb 	bl	1e2 <atomic_leave_critical>
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    2bec:	2302      	movs	r3, #2
    2bee:	4023      	ands	r3, r4
    2bf0:	1e5a      	subs	r2, r3, #1
    2bf2:	4193      	sbcs	r3, r2
	btnState = gpio_get_pin_level(BTN0);
    2bf4:	4a02      	ldr	r2, [pc, #8]	; (2c00 <BTN_Handler+0x3c>)
    2bf6:	7013      	strb	r3, [r2, #0]
}
    2bf8:	b002      	add	sp, #8
    2bfa:	bd10      	pop	{r4, pc}
    2bfc:	41004400 	.word	0x41004400
    2c00:	200028a4 	.word	0x200028a4

00002c04 <RTC_IRQ_Ready>:
	return res;
}


uint8_t RTC_IRQ_Ready(void){
	uint8_t res = rtcIntCount;
    2c04:	4b02      	ldr	r3, [pc, #8]	; (2c10 <RTC_IRQ_Ready+0xc>)
    2c06:	7818      	ldrb	r0, [r3, #0]
	rtcIntCount = 0;
    2c08:	2200      	movs	r2, #0
    2c0a:	701a      	strb	r2, [r3, #0]
	return res;
}
    2c0c:	4770      	bx	lr
    2c0e:	46c0      	nop			; (mov r8, r8)
    2c10:	2000073a 	.word	0x2000073a

00002c14 <gpio_init>:

//IRQ end



void gpio_init(void){
    2c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c16:	46c6      	mov	lr, r8
    2c18:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2c1a:	22c0      	movs	r2, #192	; 0xc0
    2c1c:	05d2      	lsls	r2, r2, #23
    2c1e:	2694      	movs	r6, #148	; 0x94
    2c20:	2380      	movs	r3, #128	; 0x80
    2c22:	061b      	lsls	r3, r3, #24
    2c24:	5193      	str	r3, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c26:	2588      	movs	r5, #136	; 0x88
    2c28:	5153      	str	r3, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c2a:	4b28      	ldr	r3, [pc, #160]	; (2ccc <gpio_init+0xb8>)
    2c2c:	20a8      	movs	r0, #168	; 0xa8
    2c2e:	2180      	movs	r1, #128	; 0x80
    2c30:	05c9      	lsls	r1, r1, #23
    2c32:	4688      	mov	r8, r1
    2c34:	5019      	str	r1, [r3, r0]
    2c36:	4926      	ldr	r1, [pc, #152]	; (2cd0 <gpio_init+0xbc>)
    2c38:	5019      	str	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c3a:	21df      	movs	r1, #223	; 0xdf
    2c3c:	468c      	mov	ip, r1
    2c3e:	5c5c      	ldrb	r4, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c40:	39de      	subs	r1, #222	; 0xde
    2c42:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c44:	4667      	mov	r7, ip
    2c46:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2c48:	5191      	str	r1, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c4a:	5151      	str	r1, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c4c:	4c21      	ldr	r4, [pc, #132]	; (2cd4 <gpio_init+0xc0>)
    2c4e:	501c      	str	r4, [r3, r0]
    2c50:	24c0      	movs	r4, #192	; 0xc0
    2c52:	0624      	lsls	r4, r4, #24
    2c54:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c56:	362c      	adds	r6, #44	; 0x2c
    2c58:	46b4      	mov	ip, r6
    2c5a:	5d9e      	ldrb	r6, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c5c:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c5e:	4667      	mov	r7, ip
    2c60:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2c62:	2608      	movs	r6, #8
    2c64:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c66:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c68:	4e1b      	ldr	r6, [pc, #108]	; (2cd8 <gpio_init+0xc4>)
    2c6a:	629e      	str	r6, [r3, #40]	; 0x28
    2c6c:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c6e:	2643      	movs	r6, #67	; 0x43
    2c70:	46b4      	mov	ip, r6
    2c72:	5d9e      	ldrb	r6, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c74:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c76:	4667      	mov	r7, ip
    2c78:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2c7a:	2610      	movs	r6, #16
    2c7c:	3755      	adds	r7, #85	; 0x55
    2c7e:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c80:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c82:	4d16      	ldr	r5, [pc, #88]	; (2cdc <gpio_init+0xc8>)
    2c84:	501d      	str	r5, [r3, r0]
    2c86:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c88:	25c4      	movs	r5, #196	; 0xc4
    2c8a:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c8c:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c8e:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2c90:	2480      	movs	r4, #128	; 0x80
    2c92:	0424      	lsls	r4, r4, #16
    2c94:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c96:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c98:	4644      	mov	r4, r8
    2c9a:	629c      	str	r4, [r3, #40]	; 0x28
    2c9c:	4c10      	ldr	r4, [pc, #64]	; (2ce0 <gpio_init+0xcc>)
    2c9e:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ca0:	3d6d      	subs	r5, #109	; 0x6d
    2ca2:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ca4:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2ca6:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2ca8:	3d37      	subs	r5, #55	; 0x37
    2caa:	2484      	movs	r4, #132	; 0x84
    2cac:	5115      	str	r5, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2cae:	4a0d      	ldr	r2, [pc, #52]	; (2ce4 <gpio_init+0xd0>)
    2cb0:	501a      	str	r2, [r3, r0]
    2cb2:	4a0d      	ldr	r2, [pc, #52]	; (2ce8 <gpio_init+0xd4>)
    2cb4:	501a      	str	r2, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2cb6:	22c5      	movs	r2, #197	; 0xc5
    2cb8:	5c98      	ldrb	r0, [r3, r2]
    2cba:	3c80      	subs	r4, #128	; 0x80
    2cbc:	43a0      	bics	r0, r4
    2cbe:	5498      	strb	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2cc0:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2cc2:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2cc4:	5498      	strb	r0, [r3, r2]
	
	gpio_set_pin_direction(SD_DETECT, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(SD_DETECT, GPIO_PULL_OFF);
	gpio_set_pin_function(SD_DETECT, GPIO_PIN_FUNCTION_OFF);
	
}
    2cc6:	bc04      	pop	{r2}
    2cc8:	4690      	mov	r8, r2
    2cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ccc:	41004400 	.word	0x41004400
    2cd0:	c0008000 	.word	0xc0008000
    2cd4:	40000001 	.word	0x40000001
    2cd8:	40000008 	.word	0x40000008
    2cdc:	40000010 	.word	0x40000010
    2ce0:	c0000080 	.word	0xc0000080
    2ce4:	40020020 	.word	0x40020020
    2ce8:	c0020000 	.word	0xc0020000

00002cec <ETH_SPI_Init>:

//ETHERNET HW DRIVER
void ETH_SPI_Init(void){
    2cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cee:	46de      	mov	lr, fp
    2cf0:	4657      	mov	r7, sl
    2cf2:	464e      	mov	r6, r9
    2cf4:	4645      	mov	r5, r8
    2cf6:	b5e0      	push	{r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cf8:	20c0      	movs	r0, #192	; 0xc0
    2cfa:	05c0      	lsls	r0, r0, #23
    2cfc:	2380      	movs	r3, #128	; 0x80
    2cfe:	039b      	lsls	r3, r3, #14
    2d00:	6183      	str	r3, [r0, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2d02:	6083      	str	r3, [r0, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d04:	4b3b      	ldr	r3, [pc, #236]	; (2df4 <ETH_SPI_Init+0x108>)
    2d06:	2280      	movs	r2, #128	; 0x80
    2d08:	05d2      	lsls	r2, r2, #23
    2d0a:	4690      	mov	r8, r2
    2d0c:	629a      	str	r2, [r3, #40]	; 0x28
    2d0e:	4a3a      	ldr	r2, [pc, #232]	; (2df8 <ETH_SPI_Init+0x10c>)
    2d10:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d12:	2155      	movs	r1, #85	; 0x55
    2d14:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d16:	2401      	movs	r4, #1
    2d18:	46a4      	mov	ip, r4
    2d1a:	43a2      	bics	r2, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d1c:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d1e:	2294      	movs	r2, #148	; 0x94
    2d20:	4692      	mov	sl, r2
    2d22:	2280      	movs	r2, #128	; 0x80
    2d24:	0252      	lsls	r2, r2, #9
    2d26:	4651      	mov	r1, sl
    2d28:	5042      	str	r2, [r0, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2d2a:	390c      	subs	r1, #12
    2d2c:	4689      	mov	r9, r1
    2d2e:	5042      	str	r2, [r0, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d30:	34a7      	adds	r4, #167	; 0xa7
    2d32:	4642      	mov	r2, r8
    2d34:	511a      	str	r2, [r3, r4]
    2d36:	4a31      	ldr	r2, [pc, #196]	; (2dfc <ETH_SPI_Init+0x110>)
    2d38:	511a      	str	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d3a:	3148      	adds	r1, #72	; 0x48
    2d3c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d3e:	4665      	mov	r5, ip
    2d40:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2d42:	2701      	movs	r7, #1
    2d44:	433a      	orrs	r2, r7
    2d46:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d48:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2d4a:	3918      	subs	r1, #24
    2d4c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2d4e:	260f      	movs	r6, #15
    2d50:	43b2      	bics	r2, r6
	tmp |= PORT_PMUX_PMUXE(data);
    2d52:	2502      	movs	r5, #2
    2d54:	46ab      	mov	fp, r5
    2d56:	465d      	mov	r5, fp
    2d58:	432a      	orrs	r2, r5
    2d5a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2d5c:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d5e:	2280      	movs	r2, #128	; 0x80
    2d60:	0292      	lsls	r2, r2, #10
    2d62:	4655      	mov	r5, sl
    2d64:	5142      	str	r2, [r0, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2d66:	464d      	mov	r5, r9
    2d68:	5142      	str	r2, [r0, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d6a:	4642      	mov	r2, r8
    2d6c:	511a      	str	r2, [r3, r4]
    2d6e:	4a24      	ldr	r2, [pc, #144]	; (2e00 <ETH_SPI_Init+0x114>)
    2d70:	511a      	str	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d72:	3429      	adds	r4, #41	; 0x29
    2d74:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d76:	4665      	mov	r5, ip
    2d78:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2d7a:	433a      	orrs	r2, r7
    2d7c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d7e:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2d80:	5c5c      	ldrb	r4, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2d82:	220f      	movs	r2, #15
    2d84:	4014      	ands	r4, r2
	tmp |= PORT_PMUX_PMUXO(data);
    2d86:	2220      	movs	r2, #32
    2d88:	4314      	orrs	r4, r2
    2d8a:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2d8c:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2d8e:	2280      	movs	r2, #128	; 0x80
    2d90:	0352      	lsls	r2, r2, #13
    2d92:	6042      	str	r2, [r0, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d94:	4a1b      	ldr	r2, [pc, #108]	; (2e04 <ETH_SPI_Init+0x118>)
    2d96:	629a      	str	r2, [r3, #40]	; 0x28
    2d98:	4a1b      	ldr	r2, [pc, #108]	; (2e08 <ETH_SPI_Init+0x11c>)
    2d9a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2d9c:	2254      	movs	r2, #84	; 0x54
    2d9e:	5c99      	ldrb	r1, [r3, r2]
    2da0:	2004      	movs	r0, #4
    2da2:	4381      	bics	r1, r0
    2da4:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2da6:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2da8:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2daa:	4339      	orrs	r1, r7
    2dac:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2dae:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2db0:	213a      	movs	r1, #58	; 0x3a
    2db2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2db4:	43b2      	bics	r2, r6
	tmp |= PORT_PMUX_PMUXE(data);
    2db6:	4658      	mov	r0, fp
    2db8:	4302      	orrs	r2, r0
    2dba:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2dbc:	545a      	strb	r2, [r3, r1]
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    2dbe:	4a13      	ldr	r2, [pc, #76]	; (2e0c <ETH_SPI_Init+0x120>)
    2dc0:	6a13      	ldr	r3, [r2, #32]
    2dc2:	3146      	adds	r1, #70	; 0x46
    2dc4:	430b      	orrs	r3, r1
    2dc6:	6213      	str	r3, [r2, #32]
	((Gclk *)hw)->CLKCTRL.reg = data;
    2dc8:	4a11      	ldr	r2, [pc, #68]	; (2e10 <ETH_SPI_Init+0x124>)
    2dca:	4b12      	ldr	r3, [pc, #72]	; (2e14 <ETH_SPI_Init+0x128>)
    2dcc:	805a      	strh	r2, [r3, #2]
	gpio_set_pin_function(PA20, PINMUX_PA20C_SERCOM5_PAD2);
	
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM5);
	_gclk_enable_channel(SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC);
	
	spi_m_sync_init(&SPI_ETH, SERCOM5);
    2dce:	4c12      	ldr	r4, [pc, #72]	; (2e18 <ETH_SPI_Init+0x12c>)
    2dd0:	4912      	ldr	r1, [pc, #72]	; (2e1c <ETH_SPI_Init+0x130>)
    2dd2:	0020      	movs	r0, r4
    2dd4:	f7fd fb84 	bl	4e0 <spi_m_sync_init>
	spi_m_sync_get_io_descriptor(&SPI_ETH, &eth_spi);
    2dd8:	4911      	ldr	r1, [pc, #68]	; (2e20 <ETH_SPI_Init+0x134>)
    2dda:	0020      	movs	r0, r4
    2ddc:	f7fd fc0c 	bl	5f8 <spi_m_sync_get_io_descriptor>
	spi_m_sync_enable(&SPI_ETH);
    2de0:	0020      	movs	r0, r4
    2de2:	f7fd fba5 	bl	530 <spi_m_sync_enable>
	
}
    2de6:	bc3c      	pop	{r2, r3, r4, r5}
    2de8:	4690      	mov	r8, r2
    2dea:	4699      	mov	r9, r3
    2dec:	46a2      	mov	sl, r4
    2dee:	46ab      	mov	fp, r5
    2df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	41004400 	.word	0x41004400
    2df8:	c0000020 	.word	0xc0000020
    2dfc:	c0000001 	.word	0xc0000001
    2e00:	c0000002 	.word	0xc0000002
    2e04:	40020000 	.word	0x40020000
    2e08:	c0020010 	.word	0xc0020010
    2e0c:	40000400 	.word	0x40000400
    2e10:	00004019 	.word	0x00004019
    2e14:	40000c00 	.word	0x40000c00
    2e18:	20002880 	.word	0x20002880
    2e1c:	42001c00 	.word	0x42001c00
    2e20:	200028ac 	.word	0x200028ac

00002e24 <ETH_SPI_WriteBuff>:

void ETH_SPI_ReadBuff(uint8_t* buff, uint16_t len){
	io_read(eth_spi,buff,len);
}

void ETH_SPI_WriteBuff(uint8_t* buff, uint16_t len){
    2e24:	b510      	push	{r4, lr}
    2e26:	0003      	movs	r3, r0
    2e28:	000a      	movs	r2, r1
	io_write(eth_spi,buff,len);
    2e2a:	4903      	ldr	r1, [pc, #12]	; (2e38 <ETH_SPI_WriteBuff+0x14>)
    2e2c:	6808      	ldr	r0, [r1, #0]
    2e2e:	0019      	movs	r1, r3
    2e30:	f7fd fb22 	bl	478 <io_write>
}
    2e34:	bd10      	pop	{r4, pc}
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	200028ac 	.word	0x200028ac

00002e3c <RTC_init>:
}
void W5500_Write_byte(uint8_t byte){
	io_write(eth_spi, &byte, 1);
}

void RTC_init(void){
    2e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e3e:	46ce      	mov	lr, r9
    2e40:	b500      	push	{lr}
    2e42:	4a2b      	ldr	r2, [pc, #172]	; (2ef0 <RTC_init+0xb4>)
    2e44:	6a13      	ldr	r3, [r2, #32]
    2e46:	2110      	movs	r1, #16
    2e48:	430b      	orrs	r3, r1
    2e4a:	6213      	str	r3, [r2, #32]
    2e4c:	4b29      	ldr	r3, [pc, #164]	; (2ef4 <RTC_init+0xb8>)
    2e4e:	4a2a      	ldr	r2, [pc, #168]	; (2ef8 <RTC_init+0xbc>)
    2e50:	805a      	strh	r2, [r3, #2]
    2e52:	4a2a      	ldr	r2, [pc, #168]	; (2efc <RTC_init+0xc0>)
    2e54:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
	_gclk_enable_channel(SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC);
	
	i2c_m_sync_init(&I2C_RTC, SERCOM2);
    2e56:	492a      	ldr	r1, [pc, #168]	; (2f00 <RTC_init+0xc4>)
    2e58:	482a      	ldr	r0, [pc, #168]	; (2f04 <RTC_init+0xc8>)
    2e5a:	f7fd fabd 	bl	3d8 <i2c_m_sync_init>
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2e5e:	4c2a      	ldr	r4, [pc, #168]	; (2f08 <RTC_init+0xcc>)
    2e60:	2248      	movs	r2, #72	; 0x48
    2e62:	5ca3      	ldrb	r3, [r4, r2]
    2e64:	2104      	movs	r1, #4
    2e66:	4689      	mov	r9, r1
    2e68:	438b      	bics	r3, r1
    2e6a:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e6c:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e6e:	2501      	movs	r5, #1
    2e70:	43ab      	bics	r3, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2e72:	2701      	movs	r7, #1
    2e74:	433b      	orrs	r3, r7
    2e76:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e78:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2e7a:	3a14      	subs	r2, #20
    2e7c:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2e7e:	260f      	movs	r6, #15
    2e80:	43b3      	bics	r3, r6
	tmp |= PORT_PMUX_PMUXE(data);
    2e82:	2103      	movs	r1, #3
    2e84:	430b      	orrs	r3, r1
    2e86:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2e88:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2e8a:	2149      	movs	r1, #73	; 0x49
    2e8c:	5c63      	ldrb	r3, [r4, r1]
    2e8e:	4648      	mov	r0, r9
    2e90:	4383      	bics	r3, r0
    2e92:	5463      	strb	r3, [r4, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e94:	5c63      	ldrb	r3, [r4, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e96:	43ab      	bics	r3, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2e98:	433b      	orrs	r3, r7
    2e9a:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e9c:	5463      	strb	r3, [r4, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2e9e:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2ea0:	393a      	subs	r1, #58	; 0x3a
    2ea2:	400b      	ands	r3, r1
	tmp |= PORT_PMUX_PMUXO(data);
    2ea4:	2130      	movs	r1, #48	; 0x30
    2ea6:	430b      	orrs	r3, r1
    2ea8:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2eaa:	54a3      	strb	r3, [r4, r2]
	gpio_set_pin_function(PA08, PINMUX_PA08D_SERCOM2_PAD0);

	gpio_set_pin_pull_mode(PA09, GPIO_PULL_OFF);
	gpio_set_pin_function(PA09, PINMUX_PA09D_SERCOM2_PAD1);
	
	i2c_m_sync_get_io_descriptor(&I2C_RTC, &rtc_i2c);
    2eac:	4917      	ldr	r1, [pc, #92]	; (2f0c <RTC_init+0xd0>)
    2eae:	4815      	ldr	r0, [pc, #84]	; (2f04 <RTC_init+0xc8>)
    2eb0:	f7fd fade 	bl	470 <i2c_m_sync_get_io_descriptor>
	i2c_m_sync_enable(&I2C_RTC);
    2eb4:	4813      	ldr	r0, [pc, #76]	; (2f04 <RTC_init+0xc8>)
    2eb6:	f7fd faab 	bl	410 <i2c_m_sync_enable>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2eba:	2280      	movs	r2, #128	; 0x80
    2ebc:	00d2      	lsls	r2, r2, #3
    2ebe:	23c0      	movs	r3, #192	; 0xc0
    2ec0:	05db      	lsls	r3, r3, #23
    2ec2:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ec4:	4b12      	ldr	r3, [pc, #72]	; (2f10 <RTC_init+0xd4>)
    2ec6:	62a3      	str	r3, [r4, #40]	; 0x28
    2ec8:	4b12      	ldr	r3, [pc, #72]	; (2f14 <RTC_init+0xd8>)
    2eca:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2ecc:	224a      	movs	r2, #74	; 0x4a
    2ece:	5ca3      	ldrb	r3, [r4, r2]
    2ed0:	4649      	mov	r1, r9
    2ed2:	438b      	bics	r3, r1
    2ed4:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ed6:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ed8:	43ab      	bics	r3, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2eda:	433b      	orrs	r3, r7
    2edc:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2ede:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2ee0:	3a15      	subs	r2, #21
    2ee2:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2ee4:	43b3      	bics	r3, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2ee6:	54a3      	strb	r3, [r4, r2]
	
	gpio_set_pin_direction(RTC_IRQ, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(RTC_IRQ, GPIO_PULL_OFF);
	gpio_set_pin_function(RTC_IRQ, PINMUX_PA10A_EIC_EXTINT10);
	
}
    2ee8:	bc04      	pop	{r2}
    2eea:	4691      	mov	r9, r2
    2eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	40000400 	.word	0x40000400
    2ef4:	40000c00 	.word	0x40000c00
    2ef8:	00004016 	.word	0x00004016
    2efc:	00004313 	.word	0x00004313
    2f00:	42001000 	.word	0x42001000
    2f04:	20002810 	.word	0x20002810
    2f08:	41004400 	.word	0x41004400
    2f0c:	200028a8 	.word	0x200028a8
    2f10:	40020400 	.word	0x40020400
    2f14:	c0020000 	.word	0xc0020000

00002f18 <RTC_read_batch>:
	i2c_m_sync_set_slaveaddr(&I2C_RTC, addres, I2C_M_SEVEN);
	//i2c_m_sync_cmd_write(&EXT_I2C, 0x00, data, data_len);
	return (io_write(rtc_i2c, (uint8_t *)data, data_len) >= 0) ? true : false;
}

bool RTC_read_batch(uint8_t addres ,uint8_t *data, uint8_t data_len){
    2f18:	b570      	push	{r4, r5, r6, lr}
    2f1a:	000c      	movs	r4, r1
    2f1c:	0015      	movs	r5, r2
	i2c_m_sync_set_slaveaddr(&I2C_RTC, addres, I2C_M_SEVEN);
    2f1e:	b201      	sxth	r1, r0
    2f20:	4e06      	ldr	r6, [pc, #24]	; (2f3c <RTC_read_batch+0x24>)
    2f22:	2280      	movs	r2, #128	; 0x80
    2f24:	0112      	lsls	r2, r2, #4
    2f26:	0030      	movs	r0, r6
    2f28:	f7fd fa76 	bl	418 <i2c_m_sync_set_slaveaddr>
	i2c_m_sync_cmd_read(&I2C_RTC, 0x00, data, data_len);
    2f2c:	002b      	movs	r3, r5
    2f2e:	0022      	movs	r2, r4
    2f30:	2100      	movs	r1, #0
    2f32:	0030      	movs	r0, r6
    2f34:	f7fd fa7a 	bl	42c <i2c_m_sync_cmd_read>
	//return (io_read(I2C_io, (uint8_t *)data, data_len) >= 0) ? true : false;
}
    2f38:	bd70      	pop	{r4, r5, r6, pc}
    2f3a:	46c0      	nop			; (mov r8, r8)
    2f3c:	20002810 	.word	0x20002810

00002f40 <I2C_init>:


void I2C_init(void)
{
    2f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f42:	4a1e      	ldr	r2, [pc, #120]	; (2fbc <I2C_init+0x7c>)
    2f44:	6a13      	ldr	r3, [r2, #32]
    2f46:	2140      	movs	r1, #64	; 0x40
    2f48:	430b      	orrs	r3, r1
    2f4a:	6213      	str	r3, [r2, #32]
    2f4c:	4b1c      	ldr	r3, [pc, #112]	; (2fc0 <I2C_init+0x80>)
    2f4e:	4a1d      	ldr	r2, [pc, #116]	; (2fc4 <I2C_init+0x84>)
    2f50:	805a      	strh	r2, [r3, #2]
    2f52:	4a1d      	ldr	r2, [pc, #116]	; (2fc8 <I2C_init+0x88>)
    2f54:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM4);
	_gclk_enable_channel(SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC);
	_gclk_enable_channel(SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC);
	
	i2c_m_sync_init(&I2C_EXT, SERCOM4);
    2f56:	4c1d      	ldr	r4, [pc, #116]	; (2fcc <I2C_init+0x8c>)
    2f58:	491d      	ldr	r1, [pc, #116]	; (2fd0 <I2C_init+0x90>)
    2f5a:	0020      	movs	r0, r4
    2f5c:	f7fd fa3c 	bl	3d8 <i2c_m_sync_init>
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2f60:	4b1c      	ldr	r3, [pc, #112]	; (2fd4 <I2C_init+0x94>)
    2f62:	20cc      	movs	r0, #204	; 0xcc
    2f64:	5c19      	ldrb	r1, [r3, r0]
    2f66:	2204      	movs	r2, #4
    2f68:	4391      	bics	r1, r2
    2f6a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2f6c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f6e:	2601      	movs	r6, #1
    2f70:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2f72:	2501      	movs	r5, #1
    2f74:	4329      	orrs	r1, r5
    2f76:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f78:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2f7a:	3816      	subs	r0, #22
    2f7c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2f7e:	270f      	movs	r7, #15
    2f80:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
    2f82:	2702      	movs	r7, #2
    2f84:	4339      	orrs	r1, r7
    2f86:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2f88:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2f8a:	21cd      	movs	r1, #205	; 0xcd
    2f8c:	5c5f      	ldrb	r7, [r3, r1]
    2f8e:	4397      	bics	r7, r2
    2f90:	545f      	strb	r7, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2f92:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f94:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2f96:	432a      	orrs	r2, r5
    2f98:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f9a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2f9c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2f9e:	39be      	subs	r1, #190	; 0xbe
    2fa0:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    2fa2:	2120      	movs	r1, #32
    2fa4:	430a      	orrs	r2, r1
    2fa6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2fa8:	541a      	strb	r2, [r3, r0]
	gpio_set_pin_pull_mode(PB12, GPIO_PULL_OFF);
	gpio_set_pin_function(PB12, PINMUX_PB12C_SERCOM4_PAD0);
	gpio_set_pin_pull_mode(PB13, GPIO_PULL_OFF);
	gpio_set_pin_function(PB13, PINMUX_PB13C_SERCOM4_PAD1);
	
	i2c_m_sync_get_io_descriptor(&I2C_EXT, &ext_i2c);
    2faa:	490b      	ldr	r1, [pc, #44]	; (2fd8 <I2C_init+0x98>)
    2fac:	0020      	movs	r0, r4
    2fae:	f7fd fa5f 	bl	470 <i2c_m_sync_get_io_descriptor>
	i2c_m_sync_enable(&I2C_EXT);
    2fb2:	0020      	movs	r0, r4
    2fb4:	f7fd fa2c 	bl	410 <i2c_m_sync_enable>
}
    2fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fba:	46c0      	nop			; (mov r8, r8)
    2fbc:	40000400 	.word	0x40000400
    2fc0:	40000c00 	.word	0x40000c00
    2fc4:	00004018 	.word	0x00004018
    2fc8:	00004313 	.word	0x00004313
    2fcc:	20002848 	.word	0x20002848
    2fd0:	42001800 	.word	0x42001800
    2fd4:	41004400 	.word	0x41004400
    2fd8:	2000289c 	.word	0x2000289c

00002fdc <SPI_ReadBuff>:
	io_write(rf_spi, &addr, 1);
	io_read(rf_spi,&addr,1);
	return addr;
}

void SPI_ReadBuff(uint8_t* buff, uint16_t len){
    2fdc:	b510      	push	{r4, lr}
    2fde:	0003      	movs	r3, r0
    2fe0:	000a      	movs	r2, r1
	io_read(rf_spi,buff,len);
    2fe2:	4903      	ldr	r1, [pc, #12]	; (2ff0 <SPI_ReadBuff+0x14>)
    2fe4:	6808      	ldr	r0, [r1, #0]
    2fe6:	0019      	movs	r1, r3
    2fe8:	f7fd fa60 	bl	4ac <io_read>
}
    2fec:	bd10      	pop	{r4, pc}
    2fee:	46c0      	nop			; (mov r8, r8)
    2ff0:	20002898 	.word	0x20002898

00002ff4 <SPI_write>:

void RFM_69_sel(bool arg){
	gpio_set_pin_level(RF_CS , arg);
}

void SPI_write(uint8_t arg){
    2ff4:	b500      	push	{lr}
    2ff6:	b083      	sub	sp, #12
    2ff8:	466b      	mov	r3, sp
    2ffa:	1dd9      	adds	r1, r3, #7
    2ffc:	7008      	strb	r0, [r1, #0]
	io_write(rf_spi, &arg, 1);
    2ffe:	4b03      	ldr	r3, [pc, #12]	; (300c <SPI_write+0x18>)
    3000:	6818      	ldr	r0, [r3, #0]
    3002:	2201      	movs	r2, #1
    3004:	f7fd fa38 	bl	478 <io_write>
}
    3008:	b003      	add	sp, #12
    300a:	bd00      	pop	{pc}
    300c:	20002898 	.word	0x20002898

00003010 <SPI_read>:


uint8_t SPI_read(){
    3010:	b510      	push	{r4, lr}
    3012:	b082      	sub	sp, #8
	uint8_t data_byte = 0;
    3014:	466b      	mov	r3, sp
    3016:	1ddc      	adds	r4, r3, #7
    3018:	2300      	movs	r3, #0
    301a:	7023      	strb	r3, [r4, #0]
	io_read(rf_spi,&data_byte,1);
    301c:	4b04      	ldr	r3, [pc, #16]	; (3030 <SPI_read+0x20>)
    301e:	6818      	ldr	r0, [r3, #0]
    3020:	2201      	movs	r2, #1
    3022:	0021      	movs	r1, r4
    3024:	f7fd fa42 	bl	4ac <io_read>
	return data_byte;
    3028:	7820      	ldrb	r0, [r4, #0]
}
    302a:	b002      	add	sp, #8
    302c:	bd10      	pop	{r4, pc}
    302e:	46c0      	nop			; (mov r8, r8)
    3030:	20002898 	.word	0x20002898

00003034 <RF_HW_Reset>:

void RF_HW_Reset(void){
    3034:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3036:	24c0      	movs	r4, #192	; 0xc0
    3038:	05e4      	lsls	r4, r4, #23
    303a:	2504      	movs	r5, #4
    303c:	61a5      	str	r5, [r4, #24]
	gpio_set_pin_level(RF_RST, true);
	delay_ms(1);
    303e:	2001      	movs	r0, #1
    3040:	f7fd f8e2 	bl	208 <delay_ms>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3044:	6165      	str	r5, [r4, #20]
	gpio_set_pin_level(RF_RST, false);
	delay_ms(20);
    3046:	2014      	movs	r0, #20
    3048:	f7fd f8de 	bl	208 <delay_ms>
}
    304c:	bd70      	pop	{r4, r5, r6, pc}
	...

00003050 <RF_init>:
void RF_init(void){
    3050:	b5f0      	push	{r4, r5, r6, r7, lr}
    3052:	46c6      	mov	lr, r8
    3054:	b500      	push	{lr}
    3056:	4a3e      	ldr	r2, [pc, #248]	; (3150 <RF_init+0x100>)
    3058:	6a13      	ldr	r3, [r2, #32]
    305a:	2108      	movs	r1, #8
    305c:	430b      	orrs	r3, r1
    305e:	6213      	str	r3, [r2, #32]
    3060:	4a3c      	ldr	r2, [pc, #240]	; (3154 <RF_init+0x104>)
    3062:	4b3d      	ldr	r3, [pc, #244]	; (3158 <RF_init+0x108>)
    3064:	805a      	strh	r2, [r3, #2]
	spi_m_sync_init(&SPI_RF, SERCOM1);
    3066:	4c3d      	ldr	r4, [pc, #244]	; (315c <RF_init+0x10c>)
    3068:	493d      	ldr	r1, [pc, #244]	; (3160 <RF_init+0x110>)
    306a:	0020      	movs	r0, r4
    306c:	f7fd fa38 	bl	4e0 <spi_m_sync_init>
	spi_m_sync_get_io_descriptor(&SPI_RF, &rf_spi);
    3070:	493c      	ldr	r1, [pc, #240]	; (3164 <RF_init+0x114>)
    3072:	0020      	movs	r0, r4
    3074:	f7fd fac0 	bl	5f8 <spi_m_sync_get_io_descriptor>
	spi_m_sync_enable(&SPI_RF);
    3078:	0020      	movs	r0, r4
    307a:	f7fd fa59 	bl	530 <spi_m_sync_enable>
    307e:	25c0      	movs	r5, #192	; 0xc0
    3080:	05ed      	lsls	r5, r5, #23
    3082:	2601      	movs	r6, #1
    3084:	616e      	str	r6, [r5, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3086:	60ae      	str	r6, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3088:	4c37      	ldr	r4, [pc, #220]	; (3168 <RF_init+0x118>)
    308a:	4b38      	ldr	r3, [pc, #224]	; (316c <RF_init+0x11c>)
    308c:	62a3      	str	r3, [r4, #40]	; 0x28
    308e:	21c0      	movs	r1, #192	; 0xc0
    3090:	0609      	lsls	r1, r1, #24
    3092:	62a1      	str	r1, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3094:	2240      	movs	r2, #64	; 0x40
    3096:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3098:	43b3      	bics	r3, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    309a:	2701      	movs	r7, #1
    309c:	433b      	orrs	r3, r7
    309e:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    30a0:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    30a2:	2330      	movs	r3, #48	; 0x30
    30a4:	469c      	mov	ip, r3
    30a6:	5ce3      	ldrb	r3, [r4, r3]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    30a8:	3a31      	subs	r2, #49	; 0x31
    30aa:	4690      	mov	r8, r2
    30ac:	4393      	bics	r3, r2
	tmp |= PORT_PMUX_PMUXE(data);
    30ae:	2203      	movs	r2, #3
    30b0:	4313      	orrs	r3, r2
    30b2:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    30b4:	4662      	mov	r2, ip
    30b6:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30b8:	2302      	movs	r3, #2
    30ba:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    30bc:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    30be:	4b2c      	ldr	r3, [pc, #176]	; (3170 <RF_init+0x120>)
    30c0:	62a3      	str	r3, [r4, #40]	; 0x28
    30c2:	62a1      	str	r1, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    30c4:	3211      	adds	r2, #17
    30c6:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    30c8:	43b3      	bics	r3, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    30ca:	433b      	orrs	r3, r7
    30cc:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    30ce:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    30d0:	4663      	mov	r3, ip
    30d2:	5ce2      	ldrb	r2, [r4, r3]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    30d4:	3b21      	subs	r3, #33	; 0x21
    30d6:	401a      	ands	r2, r3
	tmp |= PORT_PMUX_PMUXO(data);
    30d8:	2330      	movs	r3, #48	; 0x30
    30da:	431a      	orrs	r2, r3
    30dc:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    30de:	4663      	mov	r3, ip
    30e0:	54e2      	strb	r2, [r4, r3]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    30e2:	2380      	movs	r3, #128	; 0x80
    30e4:	02db      	lsls	r3, r3, #11
    30e6:	606b      	str	r3, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    30e8:	4b22      	ldr	r3, [pc, #136]	; (3174 <RF_init+0x124>)
    30ea:	62a3      	str	r3, [r4, #40]	; 0x28
    30ec:	4b22      	ldr	r3, [pc, #136]	; (3178 <RF_init+0x128>)
    30ee:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    30f0:	2352      	movs	r3, #82	; 0x52
    30f2:	469c      	mov	ip, r3
    30f4:	5ce3      	ldrb	r3, [r4, r3]
    30f6:	2204      	movs	r2, #4
    30f8:	4393      	bics	r3, r2
    30fa:	4660      	mov	r0, ip
    30fc:	5423      	strb	r3, [r4, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    30fe:	5c23      	ldrb	r3, [r4, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3100:	43b3      	bics	r3, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3102:	433b      	orrs	r3, r7
    3104:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3106:	5423      	strb	r3, [r4, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3108:	2739      	movs	r7, #57	; 0x39
    310a:	5de3      	ldrb	r3, [r4, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    310c:	4640      	mov	r0, r8
    310e:	4383      	bics	r3, r0
	tmp |= PORT_PMUX_PMUXE(data);
    3110:	2002      	movs	r0, #2
    3112:	4303      	orrs	r3, r0
    3114:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3116:	55e3      	strb	r3, [r4, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3118:	616a      	str	r2, [r5, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    311a:	60aa      	str	r2, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    311c:	4b17      	ldr	r3, [pc, #92]	; (317c <RF_init+0x12c>)
    311e:	62a3      	str	r3, [r4, #40]	; 0x28
    3120:	62a1      	str	r1, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3122:	323e      	adds	r2, #62	; 0x3e
    3124:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3126:	43b3      	bics	r3, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3128:	54a3      	strb	r3, [r4, r2]
	RF_HW_Reset();
    312a:	f7ff ff83 	bl	3034 <RF_HW_Reset>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    312e:	2380      	movs	r3, #128	; 0x80
    3130:	055b      	lsls	r3, r3, #21
    3132:	61ab      	str	r3, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3134:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3136:	2380      	movs	r3, #128	; 0x80
    3138:	05db      	lsls	r3, r3, #23
    313a:	62a3      	str	r3, [r4, #40]	; 0x28
    313c:	4b10      	ldr	r3, [pc, #64]	; (3180 <RF_init+0x130>)
    313e:	62a3      	str	r3, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3140:	225c      	movs	r2, #92	; 0x5c
    3142:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3144:	43b3      	bics	r3, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3146:	54a3      	strb	r3, [r4, r2]
}
    3148:	bc04      	pop	{r2}
    314a:	4690      	mov	r8, r2
    314c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    314e:	46c0      	nop			; (mov r8, r8)
    3150:	40000400 	.word	0x40000400
    3154:	00004015 	.word	0x00004015
    3158:	40000c00 	.word	0x40000c00
    315c:	20002830 	.word	0x20002830
    3160:	42000c00 	.word	0x42000c00
    3164:	20002898 	.word	0x20002898
    3168:	41004400 	.word	0x41004400
    316c:	40000001 	.word	0x40000001
    3170:	40000002 	.word	0x40000002
    3174:	40020000 	.word	0x40020000
    3178:	c0020004 	.word	0xc0020004
    317c:	40000004 	.word	0x40000004
    3180:	c0001000 	.word	0xc0001000

00003184 <SPI_RAM_sel>:
	if (level) {
    3184:	2800      	cmp	r0, #0
    3186:	d105      	bne.n	3194 <SPI_RAM_sel+0x10>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3188:	2280      	movs	r2, #128	; 0x80
    318a:	0412      	lsls	r2, r2, #16
    318c:	23c0      	movs	r3, #192	; 0xc0
    318e:	05db      	lsls	r3, r3, #23
    3190:	615a      	str	r2, [r3, #20]
	gpio_set_pin_level(SD_CS, true);
}

void SPI_RAM_sel(bool newValue){
	gpio_set_pin_level(ROM_CS, newValue);
}
    3192:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3194:	2280      	movs	r2, #128	; 0x80
    3196:	0412      	lsls	r2, r2, #16
    3198:	23c0      	movs	r3, #192	; 0xc0
    319a:	05db      	lsls	r3, r3, #23
    319c:	619a      	str	r2, [r3, #24]
    319e:	e7f8      	b.n	3192 <SPI_RAM_sel+0xe>

000031a0 <EXT_SPI_init>:


void EXT_SPI_init(void)
{
    31a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31a2:	46de      	mov	lr, fp
    31a4:	4657      	mov	r7, sl
    31a6:	464e      	mov	r6, r9
    31a8:	4645      	mov	r5, r8
    31aa:	b5e0      	push	{r5, r6, r7, lr}
    31ac:	4a63      	ldr	r2, [pc, #396]	; (333c <EXT_SPI_init+0x19c>)
    31ae:	6a13      	ldr	r3, [r2, #32]
    31b0:	2404      	movs	r4, #4
    31b2:	4323      	orrs	r3, r4
    31b4:	6213      	str	r3, [r2, #32]
    31b6:	4a62      	ldr	r2, [pc, #392]	; (3340 <EXT_SPI_init+0x1a0>)
    31b8:	4b62      	ldr	r3, [pc, #392]	; (3344 <EXT_SPI_init+0x1a4>)
    31ba:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	
	
	spi_m_sync_init(&SPI_EXT, SERCOM0);
    31bc:	4d62      	ldr	r5, [pc, #392]	; (3348 <EXT_SPI_init+0x1a8>)
    31be:	4963      	ldr	r1, [pc, #396]	; (334c <EXT_SPI_init+0x1ac>)
    31c0:	0028      	movs	r0, r5
    31c2:	f7fd f98d 	bl	4e0 <spi_m_sync_init>
	spi_m_sync_get_io_descriptor(&SPI_EXT, &ext_spi);
    31c6:	4962      	ldr	r1, [pc, #392]	; (3350 <EXT_SPI_init+0x1b0>)
    31c8:	0028      	movs	r0, r5
    31ca:	f7fd fa15 	bl	5f8 <spi_m_sync_get_io_descriptor>
	spi_m_sync_enable(&SPI_EXT);
    31ce:	0028      	movs	r0, r5
    31d0:	f7fd f9ae 	bl	530 <spi_m_sync_enable>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    31d4:	22c0      	movs	r2, #192	; 0xc0
    31d6:	05d2      	lsls	r2, r2, #23
    31d8:	2310      	movs	r3, #16
    31da:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    31dc:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    31de:	4b5d      	ldr	r3, [pc, #372]	; (3354 <EXT_SPI_init+0x1b4>)
    31e0:	495d      	ldr	r1, [pc, #372]	; (3358 <EXT_SPI_init+0x1b8>)
    31e2:	6299      	str	r1, [r3, #40]	; 0x28
    31e4:	21c0      	movs	r1, #192	; 0xc0
    31e6:	0609      	lsls	r1, r1, #24
    31e8:	468b      	mov	fp, r1
    31ea:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    31ec:	2644      	movs	r6, #68	; 0x44
    31ee:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    31f0:	2101      	movs	r1, #1
    31f2:	438d      	bics	r5, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    31f4:	2001      	movs	r0, #1
    31f6:	4681      	mov	r9, r0
    31f8:	4648      	mov	r0, r9
    31fa:	4305      	orrs	r5, r0
    31fc:	b2ed      	uxtb	r5, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    31fe:	559d      	strb	r5, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3200:	2532      	movs	r5, #50	; 0x32
    3202:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3204:	200f      	movs	r0, #15
    3206:	4684      	mov	ip, r0
    3208:	4386      	bics	r6, r0
	tmp |= PORT_PMUX_PMUXE(data);
    320a:	2703      	movs	r7, #3
    320c:	433e      	orrs	r6, r7
    320e:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3210:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3212:	2620      	movs	r6, #32
    3214:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3216:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3218:	4e50      	ldr	r6, [pc, #320]	; (335c <EXT_SPI_init+0x1bc>)
    321a:	629e      	str	r6, [r3, #40]	; 0x28
    321c:	4658      	mov	r0, fp
    321e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3220:	2045      	movs	r0, #69	; 0x45
    3222:	4680      	mov	r8, r0
    3224:	5c1e      	ldrb	r6, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3226:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3228:	4648      	mov	r0, r9
    322a:	4306      	orrs	r6, r0
    322c:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    322e:	4640      	mov	r0, r8
    3230:	541e      	strb	r6, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3232:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3234:	3836      	subs	r0, #54	; 0x36
    3236:	4006      	ands	r6, r0
	tmp |= PORT_PMUX_PMUXO(data);
    3238:	2030      	movs	r0, #48	; 0x30
    323a:	4680      	mov	r8, r0
    323c:	4640      	mov	r0, r8
    323e:	4306      	orrs	r6, r0
    3240:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3242:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3244:	2640      	movs	r6, #64	; 0x40
    3246:	6056      	str	r6, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3248:	4d45      	ldr	r5, [pc, #276]	; (3360 <EXT_SPI_init+0x1c0>)
    324a:	629d      	str	r5, [r3, #40]	; 0x28
    324c:	4d45      	ldr	r5, [pc, #276]	; (3364 <EXT_SPI_init+0x1c4>)
    324e:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    3250:	2046      	movs	r0, #70	; 0x46
    3252:	4680      	mov	r8, r0
    3254:	5c1d      	ldrb	r5, [r3, r0]
    3256:	43a5      	bics	r5, r4
    3258:	541d      	strb	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    325a:	5c1d      	ldrb	r5, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    325c:	438d      	bics	r5, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    325e:	4648      	mov	r0, r9
    3260:	4305      	orrs	r5, r0
    3262:	b2ed      	uxtb	r5, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3264:	4640      	mov	r0, r8
    3266:	541d      	strb	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3268:	2533      	movs	r5, #51	; 0x33
    326a:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    326c:	4660      	mov	r0, ip
    326e:	4384      	bics	r4, r0
	tmp |= PORT_PMUX_PMUXE(data);
    3270:	433c      	orrs	r4, r7
    3272:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3274:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3276:	2480      	movs	r4, #128	; 0x80
    3278:	6194      	str	r4, [r2, #24]
    327a:	3089      	adds	r0, #137	; 0x89
    327c:	5016      	str	r6, [r2, r0]
    327e:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3280:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3282:	4839      	ldr	r0, [pc, #228]	; (3368 <EXT_SPI_init+0x1c8>)
    3284:	4680      	mov	r8, r0
    3286:	6298      	str	r0, [r3, #40]	; 0x28
    3288:	4658      	mov	r0, fp
    328a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    328c:	3514      	adds	r5, #20
    328e:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3290:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3292:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3294:	2098      	movs	r0, #152	; 0x98
    3296:	5016      	str	r6, [r2, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3298:	3810      	subs	r0, #16
    329a:	4681      	mov	r9, r0
    329c:	5016      	str	r6, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    329e:	3668      	adds	r6, #104	; 0x68
    32a0:	4832      	ldr	r0, [pc, #200]	; (336c <EXT_SPI_init+0x1cc>)
    32a2:	5198      	str	r0, [r3, r6]
    32a4:	4658      	mov	r0, fp
    32a6:	5198      	str	r0, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    32a8:	20c6      	movs	r0, #198	; 0xc6
    32aa:	4682      	mov	sl, r0
    32ac:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    32ae:	4388      	bics	r0, r1
    32b0:	4684      	mov	ip, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    32b2:	4650      	mov	r0, sl
    32b4:	4667      	mov	r7, ip
    32b6:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    32b8:	303b      	adds	r0, #59	; 0x3b
    32ba:	30ff      	adds	r0, #255	; 0xff
    32bc:	4684      	mov	ip, r0
    32be:	2798      	movs	r7, #152	; 0x98
    32c0:	51d0      	str	r0, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    32c2:	4648      	mov	r0, r9
    32c4:	4667      	mov	r7, ip
    32c6:	5017      	str	r7, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    32c8:	4f29      	ldr	r7, [pc, #164]	; (3370 <EXT_SPI_init+0x1d0>)
    32ca:	519f      	str	r7, [r3, r6]
    32cc:	4658      	mov	r0, fp
    32ce:	5198      	str	r0, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    32d0:	27c9      	movs	r7, #201	; 0xc9
    32d2:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    32d4:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    32d6:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    32d8:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    32da:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    32dc:	4640      	mov	r0, r8
    32de:	6298      	str	r0, [r3, #40]	; 0x28
    32e0:	4658      	mov	r0, fp
    32e2:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    32e4:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    32e6:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    32e8:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    32ea:	2480      	movs	r4, #128	; 0x80
    32ec:	0324      	lsls	r4, r4, #12
    32ee:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    32f0:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    32f2:	2480      	movs	r4, #128	; 0x80
    32f4:	05e4      	lsls	r4, r4, #23
    32f6:	629c      	str	r4, [r3, #40]	; 0x28
    32f8:	4c1e      	ldr	r4, [pc, #120]	; (3374 <EXT_SPI_init+0x1d4>)
    32fa:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    32fc:	350c      	adds	r5, #12
    32fe:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3300:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3302:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3304:	2480      	movs	r4, #128	; 0x80
    3306:	0224      	lsls	r4, r4, #8
    3308:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    330a:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    330c:	4c1a      	ldr	r4, [pc, #104]	; (3378 <EXT_SPI_init+0x1d8>)
    330e:	629c      	str	r4, [r3, #40]	; 0x28
    3310:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3312:	3d04      	subs	r5, #4
    3314:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3316:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3318:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    331a:	2480      	movs	r4, #128	; 0x80
    331c:	01e4      	lsls	r4, r4, #7
    331e:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3320:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3322:	4a16      	ldr	r2, [pc, #88]	; (337c <EXT_SPI_init+0x1dc>)
    3324:	629a      	str	r2, [r3, #40]	; 0x28
    3326:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3328:	204e      	movs	r0, #78	; 0x4e
    332a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    332c:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    332e:	541a      	strb	r2, [r3, r0]
	
	
	
	
	
}
    3330:	bc3c      	pop	{r2, r3, r4, r5}
    3332:	4690      	mov	r8, r2
    3334:	4699      	mov	r9, r3
    3336:	46a2      	mov	sl, r4
    3338:	46ab      	mov	fp, r5
    333a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    333c:	40000400 	.word	0x40000400
    3340:	00004014 	.word	0x00004014
    3344:	40000c00 	.word	0x40000c00
    3348:	20002868 	.word	0x20002868
    334c:	42000800 	.word	0x42000800
    3350:	200028b0 	.word	0x200028b0
    3354:	41004400 	.word	0x41004400
    3358:	40000010 	.word	0x40000010
    335c:	40000020 	.word	0x40000020
    3360:	40020040 	.word	0x40020040
    3364:	c0020000 	.word	0xc0020000
    3368:	40000080 	.word	0x40000080
    336c:	40000040 	.word	0x40000040
    3370:	40000200 	.word	0x40000200
    3374:	c0000008 	.word	0xc0000008
    3378:	40008000 	.word	0x40008000
    337c:	40004000 	.word	0x40004000

00003380 <IRQ_init>:

void cmd_pin_handle(bool state){
	gpio_set_pin_level(FILAMENT_EN, state);
}

void IRQ_init(void){
    3380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3382:	46de      	mov	lr, fp
    3384:	4657      	mov	r7, sl
    3386:	464e      	mov	r6, r9
    3388:	4645      	mov	r5, r8
    338a:	b5e0      	push	{r5, r6, r7, lr}
    338c:	4a43      	ldr	r2, [pc, #268]	; (349c <IRQ_init+0x11c>)
    338e:	4b44      	ldr	r3, [pc, #272]	; (34a0 <IRQ_init+0x120>)
    3390:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3392:	22c0      	movs	r2, #192	; 0xc0
    3394:	05d2      	lsls	r2, r2, #23
    3396:	2584      	movs	r5, #132	; 0x84
    3398:	2302      	movs	r3, #2
    339a:	5153      	str	r3, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    339c:	4b41      	ldr	r3, [pc, #260]	; (34a4 <IRQ_init+0x124>)
    339e:	20a8      	movs	r0, #168	; 0xa8
    33a0:	4941      	ldr	r1, [pc, #260]	; (34a8 <IRQ_init+0x128>)
    33a2:	5019      	str	r1, [r3, r0]
    33a4:	4941      	ldr	r1, [pc, #260]	; (34ac <IRQ_init+0x12c>)
    33a6:	468a      	mov	sl, r1
    33a8:	5019      	str	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    33aa:	24c1      	movs	r4, #193	; 0xc1
    33ac:	5d19      	ldrb	r1, [r3, r4]
    33ae:	2604      	movs	r6, #4
    33b0:	46b1      	mov	r9, r6
    33b2:	43b1      	bics	r1, r6
    33b4:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    33b6:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    33b8:	2701      	movs	r7, #1
    33ba:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    33bc:	2601      	movs	r6, #1
    33be:	4331      	orrs	r1, r6
    33c0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    33c2:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    33c4:	21b0      	movs	r1, #176	; 0xb0
    33c6:	468c      	mov	ip, r1
    33c8:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    33ca:	3cb2      	subs	r4, #178	; 0xb2
    33cc:	4021      	ands	r1, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    33ce:	4664      	mov	r4, ip
    33d0:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    33d2:	2180      	movs	r1, #128	; 0x80
    33d4:	0049      	lsls	r1, r1, #1
    33d6:	468b      	mov	fp, r1
    33d8:	5151      	str	r1, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    33da:	4935      	ldr	r1, [pc, #212]	; (34b0 <IRQ_init+0x130>)
    33dc:	5019      	str	r1, [r3, r0]
    33de:	4651      	mov	r1, sl
    33e0:	5019      	str	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    33e2:	4659      	mov	r1, fp
    33e4:	5151      	str	r1, [r2, r5]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    33e6:	3938      	subs	r1, #56	; 0x38
    33e8:	4688      	mov	r8, r1
    33ea:	5c59      	ldrb	r1, [r3, r1]
    33ec:	2404      	movs	r4, #4
    33ee:	46a4      	mov	ip, r4
    33f0:	4664      	mov	r4, ip
    33f2:	4321      	orrs	r1, r4
    33f4:	b2c9      	uxtb	r1, r1
    33f6:	4644      	mov	r4, r8
    33f8:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33fa:	2198      	movs	r1, #152	; 0x98
    33fc:	465c      	mov	r4, fp
    33fe:	5054      	str	r4, [r2, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3400:	4641      	mov	r1, r8
    3402:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3404:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3406:	4331      	orrs	r1, r6
    3408:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    340a:	4644      	mov	r4, r8
    340c:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    340e:	21b4      	movs	r1, #180	; 0xb4
    3410:	4688      	mov	r8, r1
    3412:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3414:	3cb9      	subs	r4, #185	; 0xb9
    3416:	43a1      	bics	r1, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3418:	4644      	mov	r4, r8
    341a:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    341c:	2180      	movs	r1, #128	; 0x80
    341e:	00c9      	lsls	r1, r1, #3
    3420:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3422:	4924      	ldr	r1, [pc, #144]	; (34b4 <IRQ_init+0x134>)
    3424:	6299      	str	r1, [r3, #40]	; 0x28
    3426:	4651      	mov	r1, sl
    3428:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    342a:	214a      	movs	r1, #74	; 0x4a
    342c:	4688      	mov	r8, r1
    342e:	5c59      	ldrb	r1, [r3, r1]
    3430:	464c      	mov	r4, r9
    3432:	43a1      	bics	r1, r4
    3434:	4644      	mov	r4, r8
    3436:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3438:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    343a:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    343c:	4331      	orrs	r1, r6
    343e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3440:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3442:	2135      	movs	r1, #53	; 0x35
    3444:	4688      	mov	r8, r1
    3446:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3448:	3c3b      	subs	r4, #59	; 0x3b
    344a:	43a1      	bics	r1, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    344c:	4644      	mov	r4, r8
    344e:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3450:	2180      	movs	r1, #128	; 0x80
    3452:	05c9      	lsls	r1, r1, #23
    3454:	4688      	mov	r8, r1
    3456:	5151      	str	r1, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3458:	4917      	ldr	r1, [pc, #92]	; (34b8 <IRQ_init+0x138>)
    345a:	5019      	str	r1, [r3, r0]
    345c:	4917      	ldr	r1, [pc, #92]	; (34bc <IRQ_init+0x13c>)
    345e:	5019      	str	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3460:	4641      	mov	r1, r8
    3462:	5151      	str	r1, [r2, r5]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3464:	3036      	adds	r0, #54	; 0x36
    3466:	5c19      	ldrb	r1, [r3, r0]
    3468:	4664      	mov	r4, ip
    346a:	4321      	orrs	r1, r4
    346c:	b2c9      	uxtb	r1, r1
    346e:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3470:	2194      	movs	r1, #148	; 0x94
    3472:	4644      	mov	r4, r8
    3474:	5054      	str	r4, [r2, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3476:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3478:	43ba      	bics	r2, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    347a:	4332      	orrs	r2, r6
    347c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    347e:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3480:	312b      	adds	r1, #43	; 0x2b
    3482:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3484:	38cf      	subs	r0, #207	; 0xcf
    3486:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3488:	545a      	strb	r2, [r3, r1]
	gpio_set_pin_direction(RF_IRQ, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(RF_IRQ, GPIO_PULL_DOWN);
	gpio_set_pin_function(RF_IRQ, PINMUX_PB30A_EIC_EXTINT14);
	
	
	ext_irq_init();
    348a:	f7fc feeb 	bl	264 <ext_irq_init>
}
    348e:	bc3c      	pop	{r2, r3, r4, r5}
    3490:	4690      	mov	r8, r2
    3492:	4699      	mov	r9, r3
    3494:	46a2      	mov	sl, r4
    3496:	46ab      	mov	fp, r5
    3498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	00004005 	.word	0x00004005
    34a0:	40000c00 	.word	0x40000c00
    34a4:	41004400 	.word	0x41004400
    34a8:	40020002 	.word	0x40020002
    34ac:	c0020000 	.word	0xc0020000
    34b0:	40020100 	.word	0x40020100
    34b4:	40020400 	.word	0x40020400
    34b8:	40020000 	.word	0x40020000
    34bc:	c0024000 	.word	0xc0024000

000034c0 <USB_INSTANCE_init>:


void USB_INSTANCE_init(void)
{
    34c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    34c2:	46c6      	mov	lr, r8
    34c4:	b500      	push	{lr}
			PM->APBBMASK.reg |= 1 << peripheral;
    34c6:	4b26      	ldr	r3, [pc, #152]	; (3560 <USB_INSTANCE_init+0xa0>)
    34c8:	69da      	ldr	r2, [r3, #28]
    34ca:	2120      	movs	r1, #32
    34cc:	430a      	orrs	r2, r1
    34ce:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
    34d0:	695a      	ldr	r2, [r3, #20]
    34d2:	3120      	adds	r1, #32
    34d4:	430a      	orrs	r2, r1
    34d6:	615a      	str	r2, [r3, #20]
    34d8:	4a22      	ldr	r2, [pc, #136]	; (3564 <USB_INSTANCE_init+0xa4>)
    34da:	4b23      	ldr	r3, [pc, #140]	; (3568 <USB_INSTANCE_init+0xa8>)
    34dc:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
	
	usb_d_init();
    34de:	f7fd f9b7 	bl	850 <usb_d_init>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    34e2:	24c0      	movs	r4, #192	; 0xc0
    34e4:	05e4      	lsls	r4, r4, #23
    34e6:	2280      	movs	r2, #128	; 0x80
    34e8:	0452      	lsls	r2, r2, #17
    34ea:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    34ec:	4b1f      	ldr	r3, [pc, #124]	; (356c <USB_INSTANCE_init+0xac>)
    34ee:	2780      	movs	r7, #128	; 0x80
    34f0:	05ff      	lsls	r7, r7, #23
    34f2:	629f      	str	r7, [r3, #40]	; 0x28
    34f4:	491e      	ldr	r1, [pc, #120]	; (3570 <USB_INSTANCE_init+0xb0>)
    34f6:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    34f8:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    34fa:	2058      	movs	r0, #88	; 0x58
    34fc:	5c19      	ldrb	r1, [r3, r0]
    34fe:	2204      	movs	r2, #4
    3500:	4690      	mov	r8, r2
    3502:	4391      	bics	r1, r2
    3504:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3506:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3508:	2601      	movs	r6, #1
    350a:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    350c:	2501      	movs	r5, #1
    350e:	4329      	orrs	r1, r5
    3510:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3512:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3514:	381c      	subs	r0, #28
    3516:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3518:	320b      	adds	r2, #11
    351a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    351c:	2206      	movs	r2, #6
    351e:	4694      	mov	ip, r2
    3520:	4662      	mov	r2, ip
    3522:	4311      	orrs	r1, r2
    3524:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3526:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3528:	2180      	movs	r1, #128	; 0x80
    352a:	0489      	lsls	r1, r1, #18
    352c:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    352e:	629f      	str	r7, [r3, #40]	; 0x28
    3530:	4f10      	ldr	r7, [pc, #64]	; (3574 <USB_INSTANCE_init+0xb4>)
    3532:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3534:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    3536:	2159      	movs	r1, #89	; 0x59
    3538:	5c5c      	ldrb	r4, [r3, r1]
    353a:	4642      	mov	r2, r8
    353c:	4394      	bics	r4, r2
    353e:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3540:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3542:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3544:	432a      	orrs	r2, r5
    3546:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3548:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    354a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    354c:	394a      	subs	r1, #74	; 0x4a
    354e:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    3550:	2160      	movs	r1, #96	; 0x60
    3552:	430a      	orrs	r2, r1
    3554:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3556:	541a      	strb	r2, [r3, r0]
	gpio_set_pin_function(PA24, PINMUX_PA24G_USB_DM);
	gpio_set_pin_direction(PA25, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(PA25, false);
	gpio_set_pin_pull_mode(PA25, GPIO_PULL_OFF);
	gpio_set_pin_function(PA25, PINMUX_PA25G_USB_DP);
}
    3558:	bc04      	pop	{r2}
    355a:	4690      	mov	r8, r2
    355c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    355e:	46c0      	nop			; (mov r8, r8)
    3560:	40000400 	.word	0x40000400
    3564:	00004006 	.word	0x00004006
    3568:	40000c00 	.word	0x40000c00
    356c:	41004400 	.word	0x41004400
    3570:	c0000100 	.word	0xc0000100
    3574:	c0000200 	.word	0xc0000200

00003578 <sys_hw_init>:

void sys_hw_init(void)
{
    3578:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    357a:	f7fd fb37 	bl	bec <_init_chip>
	init_mcu();
	gpio_init();
    357e:	f7ff fb49 	bl	2c14 <gpio_init>
	ETH_SPI_Init();
    3582:	f7ff fbb3 	bl	2cec <ETH_SPI_Init>
	EXT_SPI_init();
    3586:	f7ff fe0b 	bl	31a0 <EXT_SPI_init>
	I2C_init(); //External port
    358a:	f7ff fcd9 	bl	2f40 <I2C_init>
	RTC_init();
    358e:	f7ff fc55 	bl	2e3c <RTC_init>
	
	RF_init();
    3592:	f7ff fd5d 	bl	3050 <RF_init>
	
	IRQ_init();
    3596:	f7ff fef3 	bl	3380 <IRQ_init>
	
	
	USB_INSTANCE_init();
    359a:	f7ff ff91 	bl	34c0 <USB_INSTANCE_init>
	
	ext_irq_register(BTN0, BTN_Handler);
    359e:	4908      	ldr	r1, [pc, #32]	; (35c0 <sys_hw_init+0x48>)
    35a0:	2021      	movs	r0, #33	; 0x21
    35a2:	f7fc fe77 	bl	294 <ext_irq_register>
	ext_irq_register(IO3, EXT_I2C_IRQ_int_Handler);
    35a6:	4907      	ldr	r1, [pc, #28]	; (35c4 <sys_hw_init+0x4c>)
    35a8:	2028      	movs	r0, #40	; 0x28
    35aa:	f7fc fe73 	bl	294 <ext_irq_register>
	ext_irq_register(RTC_IRQ, I2C_RTC_Handler);
    35ae:	4906      	ldr	r1, [pc, #24]	; (35c8 <sys_hw_init+0x50>)
    35b0:	200a      	movs	r0, #10
    35b2:	f7fc fe6f 	bl	294 <ext_irq_register>
	ext_irq_register(RF_IRQ, RF_int_Handler);
    35b6:	4905      	ldr	r1, [pc, #20]	; (35cc <sys_hw_init+0x54>)
    35b8:	203e      	movs	r0, #62	; 0x3e
    35ba:	f7fc fe6b 	bl	294 <ext_irq_register>
}
    35be:	bd10      	pop	{r4, pc}
    35c0:	00002bc5 	.word	0x00002bc5
    35c4:	00002b95 	.word	0x00002b95
    35c8:	00002ba5 	.word	0x00002ba5
    35cc:	00002bb5 	.word	0x00002bb5

000035d0 <BCDtoDEC>:
	rtc_raw[7]=DECtoBCD(RTCx->year);
	RTC_write_batch(RTC_ADDR, rtc_raw,sizeof(rtc_raw));
}

uint8_t BCDtoDEC(uint8_t val)
{
    35d0:	0001      	movs	r1, r0
	return ((val / 0x10) * 10) + (val % 0x10);
    35d2:	0902      	lsrs	r2, r0, #4
    35d4:	0093      	lsls	r3, r2, #2
    35d6:	18d2      	adds	r2, r2, r3
    35d8:	0053      	lsls	r3, r2, #1
    35da:	b2db      	uxtb	r3, r3
    35dc:	200f      	movs	r0, #15
    35de:	4008      	ands	r0, r1
    35e0:	1818      	adds	r0, r3, r0
    35e2:	b2c0      	uxtb	r0, r0
}
    35e4:	4770      	bx	lr

000035e6 <rtc_sync>:
void rtc_sync(rtc_date *RTCx){
    35e6:	b510      	push	{r4, lr}
    35e8:	b082      	sub	sp, #8
    35ea:	0004      	movs	r4, r0
	RTC_read_batch(RTC_ADDR, rtc_raw, sizeof(rtc_raw));
    35ec:	2207      	movs	r2, #7
    35ee:	4669      	mov	r1, sp
    35f0:	2032      	movs	r0, #50	; 0x32
    35f2:	f7ff fc91 	bl	2f18 <RTC_read_batch>
	RTCx->second=BCDtoDEC(rtc_raw[0]);
    35f6:	466b      	mov	r3, sp
    35f8:	7818      	ldrb	r0, [r3, #0]
    35fa:	f7ff ffe9 	bl	35d0 <BCDtoDEC>
    35fe:	7020      	strb	r0, [r4, #0]
	RTCx->minute=BCDtoDEC(rtc_raw[1]);
    3600:	466b      	mov	r3, sp
    3602:	7858      	ldrb	r0, [r3, #1]
    3604:	f7ff ffe4 	bl	35d0 <BCDtoDEC>
    3608:	7060      	strb	r0, [r4, #1]
	RTCx->hour=BCDtoDEC(rtc_raw[2]);
    360a:	466b      	mov	r3, sp
    360c:	7898      	ldrb	r0, [r3, #2]
    360e:	f7ff ffdf 	bl	35d0 <BCDtoDEC>
    3612:	70a0      	strb	r0, [r4, #2]
	RTCx->dayofweek=rtc_raw[3];
    3614:	466b      	mov	r3, sp
    3616:	78db      	ldrb	r3, [r3, #3]
    3618:	7223      	strb	r3, [r4, #8]
	RTCx->date=BCDtoDEC(rtc_raw[4]);
    361a:	466b      	mov	r3, sp
    361c:	7918      	ldrb	r0, [r3, #4]
    361e:	f7ff ffd7 	bl	35d0 <BCDtoDEC>
    3622:	70e0      	strb	r0, [r4, #3]
	RTCx->month=BCDtoDEC(rtc_raw[5]);
    3624:	466b      	mov	r3, sp
    3626:	7958      	ldrb	r0, [r3, #5]
    3628:	f7ff ffd2 	bl	35d0 <BCDtoDEC>
    362c:	7120      	strb	r0, [r4, #4]
	RTCx->year=BCDtoDEC(rtc_raw[6]);
    362e:	466b      	mov	r3, sp
    3630:	7998      	ldrb	r0, [r3, #6]
    3632:	f7ff ffcd 	bl	35d0 <BCDtoDEC>
    3636:	80e0      	strh	r0, [r4, #6]
}
    3638:	b002      	add	sp, #8
    363a:	bd10      	pop	{r4, pc}

0000363c <readRAMReg>:

uint8_t writeRAMCmd(uint8_t cmd){
	SPI_write(cmd);
	return true;
}
uint8_t readRAMReg(uint8_t addr){
    363c:	b510      	push	{r4, lr}
	SPI_write(addr);
    363e:	f7ff fcd9 	bl	2ff4 <SPI_write>
	uint8_t regval = SPI_read();
    3642:	f7ff fce5 	bl	3010 <SPI_read>
    3646:	b2c0      	uxtb	r0, r0
	return regval;
}
    3648:	bd10      	pop	{r4, pc}

0000364a <spiRamSelect>:


void spiRamSelect(){
    364a:	b510      	push	{r4, lr}
	SPI_RAM_sel(false);
    364c:	2000      	movs	r0, #0
    364e:	f7ff fd99 	bl	3184 <SPI_RAM_sel>
}
    3652:	bd10      	pop	{r4, pc}

00003654 <spiRamRelease>:

void spiRamRelease(){
    3654:	b510      	push	{r4, lr}
	SPI_RAM_sel(true);
    3656:	2001      	movs	r0, #1
    3658:	f7ff fd94 	bl	3184 <SPI_RAM_sel>
    365c:	bd10      	pop	{r4, pc}

0000365e <chipGetIDS>:
uint8_t chipGetIDS(ramIDS * idData){
    365e:	b530      	push	{r4, r5, lr}
    3660:	b083      	sub	sp, #12
    3662:	0005      	movs	r5, r0
	spiRamSelect();
    3664:	f7ff fff1 	bl	364a <spiRamSelect>
	readRAMReg(SPI_RDID);
    3668:	209f      	movs	r0, #159	; 0x9f
    366a:	f7ff ffe7 	bl	363c <readRAMReg>
	SPI_ReadBuff(&ramData, sizeof(ramData));
    366e:	ac01      	add	r4, sp, #4
    3670:	2103      	movs	r1, #3
    3672:	0020      	movs	r0, r4
    3674:	f7ff fcb2 	bl	2fdc <SPI_ReadBuff>
	idData->memoryType = ramData[0];
    3678:	7823      	ldrb	r3, [r4, #0]
    367a:	706b      	strb	r3, [r5, #1]
	idData->memoryDensity=ramData[1];
    367c:	7863      	ldrb	r3, [r4, #1]
    367e:	70ab      	strb	r3, [r5, #2]
	idData->manufacturerID = ramData[2];
    3680:	78a3      	ldrb	r3, [r4, #2]
    3682:	702b      	strb	r3, [r5, #0]
	spiRamRelease();
    3684:	f7ff ffe6 	bl	3654 <spiRamRelease>
	spiRamSelect();
    3688:	f7ff ffdf 	bl	364a <spiRamSelect>
	readRAMReg(SPI_RES);
    368c:	20ab      	movs	r0, #171	; 0xab
    368e:	f7ff ffd5 	bl	363c <readRAMReg>
	SPI_ReadBuff(&ramData, sizeof(ramData));
    3692:	2103      	movs	r1, #3
    3694:	0020      	movs	r0, r4
    3696:	f7ff fca1 	bl	2fdc <SPI_ReadBuff>
	idData->electronicID |= (ramData[0] << 16);
    369a:	7823      	ldrb	r3, [r4, #0]
    369c:	041b      	lsls	r3, r3, #16
    369e:	686a      	ldr	r2, [r5, #4]
    36a0:	4313      	orrs	r3, r2
	idData->electronicID |= (ramData[1] << 8);
    36a2:	7862      	ldrb	r2, [r4, #1]
    36a4:	0212      	lsls	r2, r2, #8
    36a6:	4313      	orrs	r3, r2
	idData->electronicID |= (ramData[2]);    
    36a8:	78a2      	ldrb	r2, [r4, #2]
    36aa:	4313      	orrs	r3, r2
    36ac:	606b      	str	r3, [r5, #4]
	spiRamRelease();
    36ae:	f7ff ffd1 	bl	3654 <spiRamRelease>
	spiRamSelect();
    36b2:	f7ff ffca 	bl	364a <spiRamSelect>
	readRAMReg(SPI_REMS);
    36b6:	2090      	movs	r0, #144	; 0x90
    36b8:	f7ff ffc0 	bl	363c <readRAMReg>
	SPI_ReadBuff(&ramData, sizeof(ramData));
    36bc:	2103      	movs	r1, #3
    36be:	0020      	movs	r0, r4
    36c0:	f7ff fc8c 	bl	2fdc <SPI_ReadBuff>
	idData->deviceID = ramData[1];
    36c4:	7863      	ldrb	r3, [r4, #1]
    36c6:	722b      	strb	r3, [r5, #8]
	spiRamRelease();
    36c8:	f7ff ffc4 	bl	3654 <spiRamRelease>
	return (idData->manufacturerID == 0xc2) ? true : false;
    36cc:	7828      	ldrb	r0, [r5, #0]
    36ce:	38c2      	subs	r0, #194	; 0xc2
    36d0:	4242      	negs	r2, r0
    36d2:	4142      	adcs	r2, r0
    36d4:	b2d0      	uxtb	r0, r2
}
    36d6:	b003      	add	sp, #12
    36d8:	bd30      	pop	{r4, r5, pc}
	...

000036dc <usb_HID_init>:
}



void usb_HID_init(void)
{
    36dc:	b510      	push	{r4, lr}
	usbdc_init(ctrl_buffer);
    36de:	4808      	ldr	r0, [pc, #32]	; (3700 <usb_HID_init+0x24>)
    36e0:	f000 fe7c 	bl	43dc <usbdc_init>
	hiddf_generic_init(customer_hid_report, sizeof(customer_hid_report));
    36e4:	2135      	movs	r1, #53	; 0x35
    36e6:	4807      	ldr	r0, [pc, #28]	; (3704 <usb_HID_init+0x28>)
    36e8:	f000 f9e8 	bl	3abc <hiddf_generic_init>
	usbdc_start(single_desc);
    36ec:	4806      	ldr	r0, [pc, #24]	; (3708 <usb_HID_init+0x2c>)
    36ee:	f000 fea7 	bl	4440 <usbdc_start>
	usbdc_attach();
    36f2:	f000 fec3 	bl	447c <usbdc_attach>
	delay_ms(500);
    36f6:	20fa      	movs	r0, #250	; 0xfa
    36f8:	0040      	lsls	r0, r0, #1
    36fa:	f7fc fd85 	bl	208 <delay_ms>
	//while (!hiddf_generic_is_enabled()) {
		 //wait hid generic to be installed
	//};
    36fe:	bd10      	pop	{r4, pc}
    3700:	2000073c 	.word	0x2000073c
    3704:	00004b08 	.word	0x00004b08
    3708:	20000000 	.word	0x20000000

0000370c <usb_device_cb_generic_out>:
uint8_t labelData[1024][8] = {0};
uint8_t emptuWord[8] = {0};
uint16_t pixToPrint = 0;
uint8_t rollAfterPrint = 0;
static bool usb_device_cb_generic_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{	
    370c:	b510      	push	{r4, lr}
	hiddf_generic_read(hid_generic_out_report, sizeof(hid_generic_out_report));
    370e:	4c17      	ldr	r4, [pc, #92]	; (376c <usb_device_cb_generic_out+0x60>)
    3710:	2140      	movs	r1, #64	; 0x40
    3712:	0020      	movs	r0, r4
    3714:	f000 fa04 	bl	3b20 <hiddf_generic_read>
	if (hid_generic_out_report[0] == 164) {
    3718:	7823      	ldrb	r3, [r4, #0]
    371a:	2ba4      	cmp	r3, #164	; 0xa4
    371c:	d00e      	beq.n	373c <usb_device_cb_generic_out+0x30>
		pixToPrint = hid_generic_out_report[5];
		pixToPrint = (pixToPrint << 8) + hid_generic_out_report[6];
		printDataReady = hid_generic_out_report[3];
		rollAfterPrint = hid_generic_out_report[1];
	}
	if (hid_generic_out_report[0] == 161 || hid_generic_out_report[0] == 162 || hid_generic_out_report[0] == 163) {
    371e:	335f      	adds	r3, #95	; 0x5f
    3720:	b2db      	uxtb	r3, r3
    3722:	2b02      	cmp	r3, #2
    3724:	d808      	bhi.n	3738 <usb_device_cb_generic_out+0x2c>
		uint16_t blockIndex = hid_generic_out_report[2];
    3726:	4b11      	ldr	r3, [pc, #68]	; (376c <usb_device_cb_generic_out+0x60>)
    3728:	7898      	ldrb	r0, [r3, #2]
		blockIndex = (blockIndex << 8) + hid_generic_out_report[3];
    372a:	0200      	lsls	r0, r0, #8
    372c:	78db      	ldrb	r3, [r3, #3]
    372e:	18c0      	adds	r0, r0, r3
    3730:	b280      	uxth	r0, r0
		if (blockIndex < 512) {
    3732:	4b0f      	ldr	r3, [pc, #60]	; (3770 <usb_device_cb_generic_out+0x64>)
    3734:	4298      	cmp	r0, r3
    3736:	d90f      	bls.n	3758 <usb_device_cb_generic_out+0x4c>
			memcpy(labelData[blockIndex], &hid_generic_out_report[5], 8);
		}
	}
	return true;
}
    3738:	2001      	movs	r0, #1
    373a:	bd10      	pop	{r4, pc}
		pixToPrint = hid_generic_out_report[5];
    373c:	490b      	ldr	r1, [pc, #44]	; (376c <usb_device_cb_generic_out+0x60>)
    373e:	794a      	ldrb	r2, [r1, #5]
		pixToPrint = (pixToPrint << 8) + hid_generic_out_report[6];
    3740:	0212      	lsls	r2, r2, #8
    3742:	7988      	ldrb	r0, [r1, #6]
    3744:	1812      	adds	r2, r2, r0
    3746:	480b      	ldr	r0, [pc, #44]	; (3774 <usb_device_cb_generic_out+0x68>)
    3748:	8002      	strh	r2, [r0, #0]
		printDataReady = hid_generic_out_report[3];
    374a:	78c8      	ldrb	r0, [r1, #3]
    374c:	4a0a      	ldr	r2, [pc, #40]	; (3778 <usb_device_cb_generic_out+0x6c>)
    374e:	7010      	strb	r0, [r2, #0]
		rollAfterPrint = hid_generic_out_report[1];
    3750:	7849      	ldrb	r1, [r1, #1]
    3752:	4a0a      	ldr	r2, [pc, #40]	; (377c <usb_device_cb_generic_out+0x70>)
    3754:	7011      	strb	r1, [r2, #0]
    3756:	e7e2      	b.n	371e <usb_device_cb_generic_out+0x12>
			memcpy(labelData[blockIndex], &hid_generic_out_report[5], 8);
    3758:	00c0      	lsls	r0, r0, #3
    375a:	4b09      	ldr	r3, [pc, #36]	; (3780 <usb_device_cb_generic_out+0x74>)
    375c:	1818      	adds	r0, r3, r0
    375e:	2208      	movs	r2, #8
    3760:	4902      	ldr	r1, [pc, #8]	; (376c <usb_device_cb_generic_out+0x60>)
    3762:	3105      	adds	r1, #5
    3764:	f000 fff0 	bl	4748 <memcpy>
    3768:	e7e6      	b.n	3738 <usb_device_cb_generic_out+0x2c>
    376a:	46c0      	nop			; (mov r8, r8)
    376c:	20000784 	.word	0x20000784
    3770:	000001ff 	.word	0x000001ff
    3774:	200027c4 	.word	0x200027c4
    3778:	200027c6 	.word	0x200027c6
    377c:	200027c7 	.word	0x200027c7
    3780:	200007c4 	.word	0x200007c4

00003784 <main>:




int main(void)
{
    3784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//atmel_start_init();
	sys_hw_init();
    3786:	f7ff fef7 	bl	3578 <sys_hw_init>
	
	
	
	
	
	chipGetIDS(&spiFlash);
    378a:	4836      	ldr	r0, [pc, #216]	; (3864 <main+0xe0>)
    378c:	f7ff ff67 	bl	365e <chipGetIDS>
	
	
	usb_HID_init();
    3790:	f7ff ffa4 	bl	36dc <usb_HID_init>
	hiddf_generic_register_callback(HIDDF_GENERIC_CB_READ, (FUNC_PTR)usb_device_cb_generic_out);
    3794:	4934      	ldr	r1, [pc, #208]	; (3868 <main+0xe4>)
    3796:	2000      	movs	r0, #0
    3798:	f000 f9d6 	bl	3b48 <hiddf_generic_register_callback>
	//hiddf_generic_register_callback(HIDDF_GENERIC_CB_WRITE, (FUNC_PTR)usb_device_cb_generic_in);
	hiddf_generic_read(hid_generic_out_report, sizeof(hid_generic_out_report));
    379c:	2140      	movs	r1, #64	; 0x40
    379e:	4833      	ldr	r0, [pc, #204]	; (386c <main+0xe8>)
    37a0:	f000 f9be 	bl	3b20 <hiddf_generic_read>
    37a4:	e038      	b.n	3818 <main+0x94>
			gpio_set_pin_level(TH_MOT, true);
			delay_ms(150);
			printDataReady=0;
			for(uint16_t i = 0; i<pixToPrint; i++){
				
				ETH_SPI_WriteBuff(&labelData[i], sizeof(labelData[i]));
    37a6:	00eb      	lsls	r3, r5, #3
    37a8:	4831      	ldr	r0, [pc, #196]	; (3870 <main+0xec>)
    37aa:	18c0      	adds	r0, r0, r3
    37ac:	2108      	movs	r1, #8
    37ae:	f7ff fb39 	bl	2e24 <ETH_SPI_WriteBuff>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    37b2:	24c0      	movs	r4, #192	; 0xc0
    37b4:	05e4      	lsls	r4, r4, #23
    37b6:	2680      	movs	r6, #128	; 0x80
    37b8:	0336      	lsls	r6, r6, #12
    37ba:	6166      	str	r6, [r4, #20]
				gpio_set_pin_level(TH_LATCH, false);
				delay_us(1);
    37bc:	2001      	movs	r0, #1
    37be:	f7fc fd17 	bl	1f0 <delay_us>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    37c2:	61a6      	str	r6, [r4, #24]
    37c4:	2780      	movs	r7, #128	; 0x80
    37c6:	023f      	lsls	r7, r7, #8
    37c8:	61a7      	str	r7, [r4, #24]
			
				//
				gpio_set_pin_level(TH_EXPO, true);
				
				
				delay_us(2500);
    37ca:	482a      	ldr	r0, [pc, #168]	; (3874 <main+0xf0>)
    37cc:	f7fc fd10 	bl	1f0 <delay_us>
				
				ETH_SPI_WriteBuff(&emptuWord, sizeof(emptuWord));
    37d0:	2108      	movs	r1, #8
    37d2:	4829      	ldr	r0, [pc, #164]	; (3878 <main+0xf4>)
    37d4:	f7ff fb26 	bl	2e24 <ETH_SPI_WriteBuff>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    37d8:	6166      	str	r6, [r4, #20]
				gpio_set_pin_level(TH_LATCH, false);
				delay_us(10);
    37da:	200a      	movs	r0, #10
    37dc:	f7fc fd08 	bl	1f0 <delay_us>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    37e0:	61a6      	str	r6, [r4, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    37e2:	6167      	str	r7, [r4, #20]
				gpio_set_pin_level(TH_LATCH, true);
				
				gpio_set_pin_level(TH_EXPO, false);
				delay_us(4000);
    37e4:	20fa      	movs	r0, #250	; 0xfa
    37e6:	0100      	lsls	r0, r0, #4
    37e8:	f7fc fd02 	bl	1f0 <delay_us>
			for(uint16_t i = 0; i<pixToPrint; i++){
    37ec:	3501      	adds	r5, #1
    37ee:	b2ad      	uxth	r5, r5
    37f0:	4b22      	ldr	r3, [pc, #136]	; (387c <main+0xf8>)
    37f2:	881b      	ldrh	r3, [r3, #0]
    37f4:	429d      	cmp	r5, r3
    37f6:	d3d6      	bcc.n	37a6 <main+0x22>
				
			}
			if(rollAfterPrint != 0){
    37f8:	4b21      	ldr	r3, [pc, #132]	; (3880 <main+0xfc>)
    37fa:	781b      	ldrb	r3, [r3, #0]
    37fc:	2b00      	cmp	r3, #0
    37fe:	d122      	bne.n	3846 <main+0xc2>
    3800:	23c0      	movs	r3, #192	; 0xc0
    3802:	05db      	lsls	r3, r3, #23
    3804:	2280      	movs	r2, #128	; 0x80
    3806:	01d2      	lsls	r2, r2, #7
    3808:	615a      	str	r2, [r3, #20]
    380a:	2101      	movs	r1, #1
    380c:	2294      	movs	r2, #148	; 0x94
    380e:	5099      	str	r1, [r3, r2]
			
			
		}
		
		
		if (RTC_IRQ_Ready())
    3810:	f7ff f9f8 	bl	2c04 <RTC_IRQ_Ready>
    3814:	2800      	cmp	r0, #0
    3816:	d11b      	bne.n	3850 <main+0xcc>
		delay_ms(1);
    3818:	2001      	movs	r0, #1
    381a:	f7fc fcf5 	bl	208 <delay_ms>
		if(printDataReady){
    381e:	4b19      	ldr	r3, [pc, #100]	; (3884 <main+0x100>)
    3820:	781b      	ldrb	r3, [r3, #0]
    3822:	2b00      	cmp	r3, #0
    3824:	d0f4      	beq.n	3810 <main+0x8c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3826:	23c0      	movs	r3, #192	; 0xc0
    3828:	05db      	lsls	r3, r3, #23
    382a:	2101      	movs	r1, #1
    382c:	2298      	movs	r2, #152	; 0x98
    382e:	5099      	str	r1, [r3, r2]
    3830:	2280      	movs	r2, #128	; 0x80
    3832:	01d2      	lsls	r2, r2, #7
    3834:	619a      	str	r2, [r3, #24]
			delay_ms(150);
    3836:	2096      	movs	r0, #150	; 0x96
    3838:	f7fc fce6 	bl	208 <delay_ms>
			printDataReady=0;
    383c:	2200      	movs	r2, #0
    383e:	4b11      	ldr	r3, [pc, #68]	; (3884 <main+0x100>)
    3840:	701a      	strb	r2, [r3, #0]
			for(uint16_t i = 0; i<pixToPrint; i++){
    3842:	2500      	movs	r5, #0
    3844:	e7d4      	b.n	37f0 <main+0x6c>
				delay_ms(1000);
    3846:	20fa      	movs	r0, #250	; 0xfa
    3848:	0080      	lsls	r0, r0, #2
    384a:	f7fc fcdd 	bl	208 <delay_ms>
    384e:	e7d7      	b.n	3800 <main+0x7c>
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    3850:	2180      	movs	r1, #128	; 0x80
    3852:	0609      	lsls	r1, r1, #24
    3854:	239c      	movs	r3, #156	; 0x9c
    3856:	22c0      	movs	r2, #192	; 0xc0
    3858:	05d2      	lsls	r2, r2, #23
    385a:	50d1      	str	r1, [r2, r3]
		{
			gpio_toggle_pin_level(RLD);
			rtc_sync(&sys_rtc);
    385c:	480a      	ldr	r0, [pc, #40]	; (3888 <main+0x104>)
    385e:	f7ff fec2 	bl	35e6 <rtc_sync>
    3862:	e7d9      	b.n	3818 <main+0x94>
    3864:	200028b4 	.word	0x200028b4
    3868:	0000370d 	.word	0x0000370d
    386c:	20000784 	.word	0x20000784
    3870:	200007c4 	.word	0x200007c4
    3874:	000009c4 	.word	0x000009c4
    3878:	2000077c 	.word	0x2000077c
    387c:	200027c4 	.word	0x200027c4
    3880:	200027c7 	.word	0x200027c7
    3884:	200027c6 	.word	0x200027c6
    3888:	2000004c 	.word	0x2000004c

0000388c <hid_generic_get_desc>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_generic_get_desc(uint8_t ep, struct usb_req *req)
{
    388c:	b510      	push	{r4, lr}
	switch (req->wValue >> 8) {
    388e:	78cb      	ldrb	r3, [r1, #3]
    3890:	2b21      	cmp	r3, #33	; 0x21
    3892:	d004      	beq.n	389e <hid_generic_get_desc+0x12>
    3894:	2b22      	cmp	r3, #34	; 0x22
    3896:	d009      	beq.n	38ac <hid_generic_get_desc+0x20>
	case USB_DT_HID:
		return usbdc_xfer(ep, _hiddf_generic_funcd.hid_desc, _hiddf_generic_funcd.hid_desc[0], false);
	case USB_DT_HID_REPORT:
		return usbdc_xfer(ep, (uint8_t *)_hiddf_generic_funcd.report_desc, _hiddf_generic_funcd.report_desc_len, false);
	default:
		return ERR_INVALID_ARG;
    3898:	200d      	movs	r0, #13
    389a:	4240      	negs	r0, r0
    389c:	e005      	b.n	38aa <hid_generic_get_desc+0x1e>
		return usbdc_xfer(ep, _hiddf_generic_funcd.hid_desc, _hiddf_generic_funcd.hid_desc[0], false);
    389e:	4b07      	ldr	r3, [pc, #28]	; (38bc <hid_generic_get_desc+0x30>)
    38a0:	6819      	ldr	r1, [r3, #0]
    38a2:	780a      	ldrb	r2, [r1, #0]
    38a4:	2300      	movs	r3, #0
    38a6:	f000 faa6 	bl	3df6 <usbdc_xfer>
	}
}
    38aa:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)_hiddf_generic_funcd.report_desc, _hiddf_generic_funcd.report_desc_len, false);
    38ac:	4b03      	ldr	r3, [pc, #12]	; (38bc <hid_generic_get_desc+0x30>)
    38ae:	6859      	ldr	r1, [r3, #4]
    38b0:	689a      	ldr	r2, [r3, #8]
    38b2:	2300      	movs	r3, #0
    38b4:	f000 fa9f 	bl	3df6 <usbdc_xfer>
    38b8:	e7f7      	b.n	38aa <hid_generic_get_desc+0x1e>
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	200027d4 	.word	0x200027d4

000038c0 <hid_generic_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_generic_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    38c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38c2:	0005      	movs	r5, r0
    38c4:	000c      	movs	r4, r1
    38c6:	0016      	movs	r6, r2
	uint8_t *ctrl_buf = usbdc_get_ctrl_buffer();
    38c8:	f000 fddc 	bl	4484 <usbdc_get_ctrl_buffer>
	uint16_t len      = req->wLength;
    38cc:	79a1      	ldrb	r1, [r4, #6]
    38ce:	79e2      	ldrb	r2, [r4, #7]
    38d0:	0212      	lsls	r2, r2, #8
    38d2:	430a      	orrs	r2, r1

	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_generic_funcd.func_iface)) {
    38d4:	7823      	ldrb	r3, [r4, #0]
    38d6:	2b81      	cmp	r3, #129	; 0x81
    38d8:	d019      	beq.n	390e <hid_generic_req+0x4e>
		return hid_generic_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    38da:	095f      	lsrs	r7, r3, #5
    38dc:	2103      	movs	r1, #3
    38de:	4039      	ands	r1, r7
    38e0:	2901      	cmp	r1, #1
    38e2:	d146      	bne.n	3972 <hid_generic_req+0xb2>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_generic_funcd.func_iface) {
    38e4:	7921      	ldrb	r1, [r4, #4]
    38e6:	7967      	ldrb	r7, [r4, #5]
    38e8:	023f      	lsls	r7, r7, #8
    38ea:	430f      	orrs	r7, r1
    38ec:	4926      	ldr	r1, [pc, #152]	; (3988 <hid_generic_req+0xc8>)
    38ee:	7b09      	ldrb	r1, [r1, #12]
    38f0:	428f      	cmp	r7, r1
    38f2:	d141      	bne.n	3978 <hid_generic_req+0xb8>
			if (req->bmRequestType & USB_EP_DIR_IN) {
    38f4:	b25b      	sxtb	r3, r3
    38f6:	2b00      	cmp	r3, #0
    38f8:	db41      	blt.n	397e <hid_generic_req+0xbe>
				return ERR_INVALID_ARG;
			} else {
				switch (req->bRequest) {
    38fa:	7863      	ldrb	r3, [r4, #1]
    38fc:	2b09      	cmp	r3, #9
    38fe:	d028      	beq.n	3952 <hid_generic_req+0x92>
    3900:	2b0b      	cmp	r3, #11
    3902:	d01c      	beq.n	393e <hid_generic_req+0x7e>
    3904:	2b03      	cmp	r3, #3
    3906:	d012      	beq.n	392e <hid_generic_req+0x6e>
							hiddf_generic_set_report(ctrl_buf, len);
						}
						return ERR_NONE;
					}
				default:
					return ERR_INVALID_ARG;
    3908:	200d      	movs	r0, #13
    390a:	4240      	negs	r0, r0
    390c:	e016      	b.n	393c <hid_generic_req+0x7c>
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_generic_funcd.func_iface)) {
    390e:	7861      	ldrb	r1, [r4, #1]
    3910:	2906      	cmp	r1, #6
    3912:	d1e2      	bne.n	38da <hid_generic_req+0x1a>
    3914:	7927      	ldrb	r7, [r4, #4]
    3916:	7961      	ldrb	r1, [r4, #5]
    3918:	0209      	lsls	r1, r1, #8
    391a:	4339      	orrs	r1, r7
    391c:	4f1a      	ldr	r7, [pc, #104]	; (3988 <hid_generic_req+0xc8>)
    391e:	7b3f      	ldrb	r7, [r7, #12]
    3920:	42b9      	cmp	r1, r7
    3922:	d1da      	bne.n	38da <hid_generic_req+0x1a>
		return hid_generic_get_desc(ep, req);
    3924:	0021      	movs	r1, r4
    3926:	0028      	movs	r0, r5
    3928:	f7ff ffb0 	bl	388c <hid_generic_get_desc>
    392c:	e006      	b.n	393c <hid_generic_req+0x7c>
					return usbdc_xfer(ep, &_hiddf_generic_funcd.protocol, 1, 0);
    392e:	2300      	movs	r3, #0
    3930:	2201      	movs	r2, #1
    3932:	4915      	ldr	r1, [pc, #84]	; (3988 <hid_generic_req+0xc8>)
    3934:	310f      	adds	r1, #15
    3936:	0028      	movs	r0, r5
    3938:	f000 fa5d 	bl	3df6 <usbdc_xfer>
			}
		} else {
			return ERR_NOT_FOUND;
		}
	}
}
    393c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_hiddf_generic_funcd.protocol = req->wValue;
    393e:	78a2      	ldrb	r2, [r4, #2]
    3940:	4b11      	ldr	r3, [pc, #68]	; (3988 <hid_generic_req+0xc8>)
    3942:	73da      	strb	r2, [r3, #15]
					return usbdc_xfer(ep, NULL, 0, 0);
    3944:	2300      	movs	r3, #0
    3946:	2200      	movs	r2, #0
    3948:	2100      	movs	r1, #0
    394a:	0028      	movs	r0, r5
    394c:	f000 fa53 	bl	3df6 <usbdc_xfer>
    3950:	e7f4      	b.n	393c <hid_generic_req+0x7c>
					if (USB_SETUP_STAGE == stage) {
    3952:	2e00      	cmp	r6, #0
    3954:	d007      	beq.n	3966 <hid_generic_req+0xa6>
						if (NULL != hiddf_generic_set_report) {
    3956:	4b0d      	ldr	r3, [pc, #52]	; (398c <hid_generic_req+0xcc>)
    3958:	681b      	ldr	r3, [r3, #0]
    395a:	2b00      	cmp	r3, #0
    395c:	d012      	beq.n	3984 <hid_generic_req+0xc4>
							hiddf_generic_set_report(ctrl_buf, len);
    395e:	0011      	movs	r1, r2
    3960:	4798      	blx	r3
						return ERR_NONE;
    3962:	2000      	movs	r0, #0
    3964:	e7ea      	b.n	393c <hid_generic_req+0x7c>
						return usbdc_xfer(ep, ctrl_buf, len, false);
    3966:	2300      	movs	r3, #0
    3968:	0001      	movs	r1, r0
    396a:	0028      	movs	r0, r5
    396c:	f000 fa43 	bl	3df6 <usbdc_xfer>
    3970:	e7e4      	b.n	393c <hid_generic_req+0x7c>
			return ERR_NOT_FOUND;
    3972:	200a      	movs	r0, #10
    3974:	4240      	negs	r0, r0
    3976:	e7e1      	b.n	393c <hid_generic_req+0x7c>
			return ERR_NOT_FOUND;
    3978:	200a      	movs	r0, #10
    397a:	4240      	negs	r0, r0
    397c:	e7de      	b.n	393c <hid_generic_req+0x7c>
				return ERR_INVALID_ARG;
    397e:	200d      	movs	r0, #13
    3980:	4240      	negs	r0, r0
    3982:	e7db      	b.n	393c <hid_generic_req+0x7c>
						return ERR_NONE;
    3984:	2000      	movs	r0, #0
    3986:	e7d9      	b.n	393c <hid_generic_req+0x7c>
    3988:	200027d4 	.word	0x200027d4
    398c:	200027e8 	.word	0x200027e8

00003990 <hid_generic_enable>:
{
    3990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3992:	000e      	movs	r6, r1
	struct hiddf_generic_func_data *func_data = (struct hiddf_generic_func_data *)(drv->func_data);
    3994:	6887      	ldr	r7, [r0, #8]
	ifc = desc->sod;
    3996:	680b      	ldr	r3, [r1, #0]
	if (NULL == ifc) {
    3998:	2b00      	cmp	r3, #0
    399a:	d03f      	beq.n	3a1c <hid_generic_enable+0x8c>
	ifc_desc.bInterfaceNumber = ifc[2];
    399c:	789a      	ldrb	r2, [r3, #2]
	ifc_desc.bInterfaceClass  = ifc[5];
    399e:	795b      	ldrb	r3, [r3, #5]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    39a0:	2b03      	cmp	r3, #3
    39a2:	d13e      	bne.n	3a22 <hid_generic_enable+0x92>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    39a4:	7b3b      	ldrb	r3, [r7, #12]
    39a6:	429a      	cmp	r2, r3
    39a8:	d03e      	beq.n	3a28 <hid_generic_enable+0x98>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    39aa:	2bff      	cmp	r3, #255	; 0xff
    39ac:	d13f      	bne.n	3a2e <hid_generic_enable+0x9e>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    39ae:	733a      	strb	r2, [r7, #12]
	_hiddf_generic_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    39b0:	6808      	ldr	r0, [r1, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    39b2:	7803      	ldrb	r3, [r0, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    39b4:	18c0      	adds	r0, r0, r3
    39b6:	2221      	movs	r2, #33	; 0x21
    39b8:	6849      	ldr	r1, [r1, #4]
    39ba:	f000 fd71 	bl	44a0 <usb_find_desc>
    39be:	4b20      	ldr	r3, [pc, #128]	; (3a40 <hid_generic_enable+0xb0>)
    39c0:	6018      	str	r0, [r3, #0]
	for (i = 0; i < 2; i++) {
    39c2:	2400      	movs	r4, #0
    39c4:	e005      	b.n	39d2 <hid_generic_enable+0x42>
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    39c6:	737d      	strb	r5, [r7, #13]
				usb_d_ep_enable(func_data->func_ep_in);
    39c8:	0028      	movs	r0, r5
    39ca:	f7fc ffc7 	bl	95c <usb_d_ep_enable>
	for (i = 0; i < 2; i++) {
    39ce:	3401      	adds	r4, #1
    39d0:	b2e4      	uxtb	r4, r4
    39d2:	2c01      	cmp	r4, #1
    39d4:	d81c      	bhi.n	3a10 <hid_generic_enable+0x80>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    39d6:	6830      	ldr	r0, [r6, #0]
	return desc[0];
    39d8:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    39da:	18c0      	adds	r0, r0, r3
    39dc:	6871      	ldr	r1, [r6, #4]
    39de:	f000 fd6e 	bl	44be <usb_find_ep_desc>
		desc->sod = ep;
    39e2:	6030      	str	r0, [r6, #0]
		if (NULL != ep) {
    39e4:	2800      	cmp	r0, #0
    39e6:	d025      	beq.n	3a34 <hid_generic_enable+0xa4>
			ep_desc.bEndpointAddress = ep[2];
    39e8:	7885      	ldrb	r5, [r0, #2]
			ep_desc.bmAttributes     = ep[3];
    39ea:	78c1      	ldrb	r1, [r0, #3]
	return (ptr[0] + (ptr[1] << 8));
    39ec:	7902      	ldrb	r2, [r0, #4]
    39ee:	7943      	ldrb	r3, [r0, #5]
    39f0:	021b      	lsls	r3, r3, #8
    39f2:	18d2      	adds	r2, r2, r3
    39f4:	b292      	uxth	r2, r2
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    39f6:	0028      	movs	r0, r5
    39f8:	f7fc ff70 	bl	8dc <usb_d_ep_init>
    39fc:	2800      	cmp	r0, #0
    39fe:	d11c      	bne.n	3a3a <hid_generic_enable+0xaa>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    3a00:	b26b      	sxtb	r3, r5
    3a02:	2b00      	cmp	r3, #0
    3a04:	dbdf      	blt.n	39c6 <hid_generic_enable+0x36>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    3a06:	73bd      	strb	r5, [r7, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    3a08:	0028      	movs	r0, r5
    3a0a:	f7fc ffa7 	bl	95c <usb_d_ep_enable>
    3a0e:	e7de      	b.n	39ce <hid_generic_enable+0x3e>
	_hiddf_generic_funcd.protocol = 1;
    3a10:	4b0b      	ldr	r3, [pc, #44]	; (3a40 <hid_generic_enable+0xb0>)
    3a12:	2201      	movs	r2, #1
    3a14:	73da      	strb	r2, [r3, #15]
	_hiddf_generic_funcd.enabled  = true;
    3a16:	741a      	strb	r2, [r3, #16]
	return ERR_NONE;
    3a18:	2000      	movs	r0, #0
}
    3a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_NOT_FOUND;
    3a1c:	200a      	movs	r0, #10
    3a1e:	4240      	negs	r0, r0
    3a20:	e7fb      	b.n	3a1a <hid_generic_enable+0x8a>
		return ERR_NOT_FOUND;
    3a22:	200a      	movs	r0, #10
    3a24:	4240      	negs	r0, r0
    3a26:	e7f8      	b.n	3a1a <hid_generic_enable+0x8a>
			return ERR_ALREADY_INITIALIZED;
    3a28:	2012      	movs	r0, #18
    3a2a:	4240      	negs	r0, r0
    3a2c:	e7f5      	b.n	3a1a <hid_generic_enable+0x8a>
			return ERR_NO_RESOURCE;
    3a2e:	201c      	movs	r0, #28
    3a30:	4240      	negs	r0, r0
    3a32:	e7f2      	b.n	3a1a <hid_generic_enable+0x8a>
			return ERR_NOT_FOUND;
    3a34:	200a      	movs	r0, #10
    3a36:	4240      	negs	r0, r0
    3a38:	e7ef      	b.n	3a1a <hid_generic_enable+0x8a>
				return ERR_NOT_INITIALIZED;
    3a3a:	2014      	movs	r0, #20
    3a3c:	4240      	negs	r0, r0
    3a3e:	e7ec      	b.n	3a1a <hid_generic_enable+0x8a>
    3a40:	200027d4 	.word	0x200027d4

00003a44 <hid_generic_disable>:
{
    3a44:	b510      	push	{r4, lr}
	struct hiddf_generic_func_data *func_data = (struct hiddf_generic_func_data *)(drv->func_data);
    3a46:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    3a48:	2900      	cmp	r1, #0
    3a4a:	d003      	beq.n	3a54 <hid_generic_disable+0x10>
		ifc_desc.bInterfaceClass = desc->sod[5];
    3a4c:	680b      	ldr	r3, [r1, #0]
    3a4e:	795b      	ldrb	r3, [r3, #5]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    3a50:	2b03      	cmp	r3, #3
    3a52:	d117      	bne.n	3a84 <hid_generic_disable+0x40>
	if (func_data->func_iface != 0xFF) {
    3a54:	7b23      	ldrb	r3, [r4, #12]
    3a56:	2bff      	cmp	r3, #255	; 0xff
    3a58:	d001      	beq.n	3a5e <hid_generic_disable+0x1a>
		func_data->func_iface = 0xFF;
    3a5a:	23ff      	movs	r3, #255	; 0xff
    3a5c:	7323      	strb	r3, [r4, #12]
	if (func_data->func_ep_in != 0xFF) {
    3a5e:	7b60      	ldrb	r0, [r4, #13]
    3a60:	28ff      	cmp	r0, #255	; 0xff
    3a62:	d003      	beq.n	3a6c <hid_generic_disable+0x28>
		usb_d_ep_deinit(func_data->func_ep_in);
    3a64:	f7fc ff68 	bl	938 <usb_d_ep_deinit>
		func_data->func_ep_in = 0xFF;
    3a68:	23ff      	movs	r3, #255	; 0xff
    3a6a:	7363      	strb	r3, [r4, #13]
	if (func_data->func_ep_out != 0xFF) {
    3a6c:	7ba0      	ldrb	r0, [r4, #14]
    3a6e:	28ff      	cmp	r0, #255	; 0xff
    3a70:	d003      	beq.n	3a7a <hid_generic_disable+0x36>
		usb_d_ep_deinit(func_data->func_ep_out);
    3a72:	f7fc ff61 	bl	938 <usb_d_ep_deinit>
		func_data->func_ep_out = 0xFF;
    3a76:	23ff      	movs	r3, #255	; 0xff
    3a78:	73a3      	strb	r3, [r4, #14]
	_hiddf_generic_funcd.enabled = false;
    3a7a:	2200      	movs	r2, #0
    3a7c:	4b03      	ldr	r3, [pc, #12]	; (3a8c <hid_generic_disable+0x48>)
    3a7e:	741a      	strb	r2, [r3, #16]
	return ERR_NONE;
    3a80:	2000      	movs	r0, #0
}
    3a82:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    3a84:	200a      	movs	r0, #10
    3a86:	4240      	negs	r0, r0
    3a88:	e7fb      	b.n	3a82 <hid_generic_disable+0x3e>
    3a8a:	46c0      	nop			; (mov r8, r8)
    3a8c:	200027d4 	.word	0x200027d4

00003a90 <hid_generic_ctrl>:
{
    3a90:	b510      	push	{r4, lr}
	switch (ctrl) {
    3a92:	2901      	cmp	r1, #1
    3a94:	d00a      	beq.n	3aac <hid_generic_ctrl+0x1c>
    3a96:	2900      	cmp	r1, #0
    3a98:	d004      	beq.n	3aa4 <hid_generic_ctrl+0x14>
    3a9a:	2902      	cmp	r1, #2
    3a9c:	d10a      	bne.n	3ab4 <hid_generic_ctrl+0x24>
		return ERR_UNSUPPORTED_OP;
    3a9e:	201b      	movs	r0, #27
    3aa0:	4240      	negs	r0, r0
}
    3aa2:	bd10      	pop	{r4, pc}
		return hid_generic_enable(drv, (struct usbd_descriptors *)param);
    3aa4:	0011      	movs	r1, r2
    3aa6:	f7ff ff73 	bl	3990 <hid_generic_enable>
    3aaa:	e7fa      	b.n	3aa2 <hid_generic_ctrl+0x12>
		return hid_generic_disable(drv, (struct usbd_descriptors *)param);
    3aac:	0011      	movs	r1, r2
    3aae:	f7ff ffc9 	bl	3a44 <hid_generic_disable>
    3ab2:	e7f6      	b.n	3aa2 <hid_generic_ctrl+0x12>
		return ERR_INVALID_ARG;
    3ab4:	200d      	movs	r0, #13
    3ab6:	4240      	negs	r0, r0
    3ab8:	e7f3      	b.n	3aa2 <hid_generic_ctrl+0x12>
	...

00003abc <hiddf_generic_init>:

/**
 * \brief Initialize the USB HID Generic Function Driver
 */
int32_t hiddf_generic_init(const uint8_t *report_desc, uint32_t len)
{
    3abc:	b570      	push	{r4, r5, r6, lr}
    3abe:	0004      	movs	r4, r0
    3ac0:	000d      	movs	r5, r1
	if (NULL == report_desc || 0 == len) {
    3ac2:	2800      	cmp	r0, #0
    3ac4:	d014      	beq.n	3af0 <hiddf_generic_init+0x34>
    3ac6:	2900      	cmp	r1, #0
    3ac8:	d015      	beq.n	3af6 <hiddf_generic_init+0x3a>
		return ERR_INVALID_ARG;
	}

	if (usbdc_get_state() > USBD_S_POWER) {
    3aca:	f000 fce1 	bl	4490 <usbdc_get_state>
    3ace:	2801      	cmp	r0, #1
    3ad0:	d814      	bhi.n	3afc <hiddf_generic_init+0x40>
		return ERR_DENIED;
	}

	_hiddf_generic_funcd.report_desc     = report_desc;
    3ad2:	4b0c      	ldr	r3, [pc, #48]	; (3b04 <hiddf_generic_init+0x48>)
    3ad4:	605c      	str	r4, [r3, #4]
	_hiddf_generic_funcd.report_desc_len = len;
    3ad6:	609d      	str	r5, [r3, #8]
	_hiddf_generic.ctrl                  = hid_generic_ctrl;
    3ad8:	480b      	ldr	r0, [pc, #44]	; (3b08 <hiddf_generic_init+0x4c>)
    3ada:	4a0c      	ldr	r2, [pc, #48]	; (3b0c <hiddf_generic_init+0x50>)
    3adc:	6042      	str	r2, [r0, #4]
	_hiddf_generic.func_data             = &_hiddf_generic_funcd;
    3ade:	6083      	str	r3, [r0, #8]

	usbdc_register_function(&_hiddf_generic);
    3ae0:	f000 fca4 	bl	442c <usbdc_register_function>
	usbdc_register_handler(USBDC_HDL_REQ, &hid_generic_req_h);
    3ae4:	490a      	ldr	r1, [pc, #40]	; (3b10 <hiddf_generic_init+0x54>)
    3ae6:	2001      	movs	r0, #1
    3ae8:	f000 fc5e 	bl	43a8 <usbdc_register_handler>

	return ERR_NONE;
    3aec:	2000      	movs	r0, #0
}
    3aee:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_INVALID_ARG;
    3af0:	200d      	movs	r0, #13
    3af2:	4240      	negs	r0, r0
    3af4:	e7fb      	b.n	3aee <hiddf_generic_init+0x32>
    3af6:	200d      	movs	r0, #13
    3af8:	4240      	negs	r0, r0
    3afa:	e7f8      	b.n	3aee <hiddf_generic_init+0x32>
		return ERR_DENIED;
    3afc:	2011      	movs	r0, #17
    3afe:	4240      	negs	r0, r0
    3b00:	e7f5      	b.n	3aee <hiddf_generic_init+0x32>
    3b02:	46c0      	nop			; (mov r8, r8)
    3b04:	200027d4 	.word	0x200027d4
    3b08:	200027c8 	.word	0x200027c8
    3b0c:	00003a91 	.word	0x00003a91
    3b10:	20000058 	.word	0x20000058

00003b14 <hiddf_generic_is_enabled>:
/**
 * \brief Check whether HID Generic Function is enabled
 */
bool hiddf_generic_is_enabled(void)
{
	return _hiddf_generic_funcd.enabled;
    3b14:	4b01      	ldr	r3, [pc, #4]	; (3b1c <hiddf_generic_is_enabled+0x8>)
    3b16:	7c18      	ldrb	r0, [r3, #16]
}
    3b18:	4770      	bx	lr
    3b1a:	46c0      	nop			; (mov r8, r8)
    3b1c:	200027d4 	.word	0x200027d4

00003b20 <hiddf_generic_read>:

/**
 * \brief USB HID Generic Function Read Data
 */
int32_t hiddf_generic_read(uint8_t *buf, uint32_t size)
{
    3b20:	b570      	push	{r4, r5, r6, lr}
    3b22:	0004      	movs	r4, r0
    3b24:	000d      	movs	r5, r1
	if (!hiddf_generic_is_enabled()) {
    3b26:	f7ff fff5 	bl	3b14 <hiddf_generic_is_enabled>
    3b2a:	2800      	cmp	r0, #0
    3b2c:	d007      	beq.n	3b3e <hiddf_generic_read+0x1e>
		return ERR_DENIED;
	}
	return usbdc_xfer(_hiddf_generic_funcd.func_ep_out, buf, size, false);
    3b2e:	4b05      	ldr	r3, [pc, #20]	; (3b44 <hiddf_generic_read+0x24>)
    3b30:	7b98      	ldrb	r0, [r3, #14]
    3b32:	2300      	movs	r3, #0
    3b34:	002a      	movs	r2, r5
    3b36:	0021      	movs	r1, r4
    3b38:	f000 f95d 	bl	3df6 <usbdc_xfer>
}
    3b3c:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    3b3e:	2011      	movs	r0, #17
    3b40:	4240      	negs	r0, r0
    3b42:	e7fb      	b.n	3b3c <hiddf_generic_read+0x1c>
    3b44:	200027d4 	.word	0x200027d4

00003b48 <hiddf_generic_register_callback>:

/**
 * \brief USB HID Generic Function Register Callback
 */
int32_t hiddf_generic_register_callback(enum hiddf_generic_cb_type cb_type, FUNC_PTR func)
{
    3b48:	b570      	push	{r4, r5, r6, lr}
    3b4a:	0004      	movs	r4, r0
    3b4c:	000d      	movs	r5, r1
	if (!hiddf_generic_is_enabled()) {
    3b4e:	f7ff ffe1 	bl	3b14 <hiddf_generic_is_enabled>
    3b52:	2800      	cmp	r0, #0
    3b54:	d01c      	beq.n	3b90 <hiddf_generic_register_callback+0x48>
		return ERR_DENIED;
	}
	switch (cb_type) {
    3b56:	2c01      	cmp	r4, #1
    3b58:	d00e      	beq.n	3b78 <hiddf_generic_register_callback+0x30>
    3b5a:	2c00      	cmp	r4, #0
    3b5c:	d004      	beq.n	3b68 <hiddf_generic_register_callback+0x20>
    3b5e:	2c02      	cmp	r4, #2
    3b60:	d012      	beq.n	3b88 <hiddf_generic_register_callback+0x40>
		break;
	case HIDDF_GENERIC_CB_SET_REPORT:
		hiddf_generic_set_report = (hiddf_generic_set_report_t)func;
		break;
	default:
		return ERR_INVALID_ARG;
    3b62:	200d      	movs	r0, #13
    3b64:	4240      	negs	r0, r0
    3b66:	e006      	b.n	3b76 <hiddf_generic_register_callback+0x2e>
		usb_d_ep_register_callback(_hiddf_generic_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    3b68:	4b0b      	ldr	r3, [pc, #44]	; (3b98 <hiddf_generic_register_callback+0x50>)
    3b6a:	7b98      	ldrb	r0, [r3, #14]
    3b6c:	002a      	movs	r2, r5
    3b6e:	2102      	movs	r1, #2
    3b70:	f7fc ffd2 	bl	b18 <usb_d_ep_register_callback>
	}

	return ERR_NONE;
    3b74:	2000      	movs	r0, #0
}
    3b76:	bd70      	pop	{r4, r5, r6, pc}
		usb_d_ep_register_callback(_hiddf_generic_funcd.func_ep_in, USB_D_EP_CB_XFER, func);
    3b78:	4b07      	ldr	r3, [pc, #28]	; (3b98 <hiddf_generic_register_callback+0x50>)
    3b7a:	7b58      	ldrb	r0, [r3, #13]
    3b7c:	002a      	movs	r2, r5
    3b7e:	2102      	movs	r1, #2
    3b80:	f7fc ffca 	bl	b18 <usb_d_ep_register_callback>
	return ERR_NONE;
    3b84:	2000      	movs	r0, #0
		break;
    3b86:	e7f6      	b.n	3b76 <hiddf_generic_register_callback+0x2e>
		hiddf_generic_set_report = (hiddf_generic_set_report_t)func;
    3b88:	4b04      	ldr	r3, [pc, #16]	; (3b9c <hiddf_generic_register_callback+0x54>)
    3b8a:	601d      	str	r5, [r3, #0]
	return ERR_NONE;
    3b8c:	2000      	movs	r0, #0
		break;
    3b8e:	e7f2      	b.n	3b76 <hiddf_generic_register_callback+0x2e>
		return ERR_DENIED;
    3b90:	2011      	movs	r0, #17
    3b92:	4240      	negs	r0, r0
    3b94:	e7ef      	b.n	3b76 <hiddf_generic_register_callback+0x2e>
    3b96:	46c0      	nop			; (mov r8, r8)
    3b98:	200027d4 	.word	0x200027d4
    3b9c:	200027e8 	.word	0x200027e8

00003ba0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    3ba0:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3ba2:	4b06      	ldr	r3, [pc, #24]	; (3bbc <usbdc_unconfig+0x1c>)
    3ba4:	695c      	ldr	r4, [r3, #20]
	while (NULL != func) {
    3ba6:	e005      	b.n	3bb4 <usbdc_unconfig+0x14>
		func->ctrl(func, USBDF_DISABLE, NULL);
    3ba8:	2200      	movs	r2, #0
    3baa:	2101      	movs	r1, #1
    3bac:	0020      	movs	r0, r4
    3bae:	6863      	ldr	r3, [r4, #4]
    3bb0:	4798      	blx	r3
		func = func->next;
    3bb2:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    3bb4:	2c00      	cmp	r4, #0
    3bb6:	d1f7      	bne.n	3ba8 <usbdc_unconfig+0x8>
	}
}
    3bb8:	bd10      	pop	{r4, pc}
    3bba:	46c0      	nop			; (mov r8, r8)
    3bbc:	200027ec 	.word	0x200027ec

00003bc0 <usbdc_sof_notify>:
	}
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    3bc0:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    3bc2:	4b06      	ldr	r3, [pc, #24]	; (3bdc <usbdc_sof_notify+0x1c>)
    3bc4:	689c      	ldr	r4, [r3, #8]

	while (sof != NULL) {
    3bc6:	e000      	b.n	3bca <usbdc_sof_notify+0xa>
		if (NULL != sof->cb) {
			sof->cb();
		}
		sof = sof->next;
    3bc8:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    3bca:	2c00      	cmp	r4, #0
    3bcc:	d004      	beq.n	3bd8 <usbdc_sof_notify+0x18>
		if (NULL != sof->cb) {
    3bce:	6863      	ldr	r3, [r4, #4]
    3bd0:	2b00      	cmp	r3, #0
    3bd2:	d0f9      	beq.n	3bc8 <usbdc_sof_notify+0x8>
			sof->cb();
    3bd4:	4798      	blx	r3
    3bd6:	e7f7      	b.n	3bc8 <usbdc_sof_notify+0x8>
	}
}
    3bd8:	bd10      	pop	{r4, pc}
    3bda:	46c0      	nop			; (mov r8, r8)
    3bdc:	200027ec 	.word	0x200027ec

00003be0 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    3be0:	b570      	push	{r4, r5, r6, lr}
    3be2:	0006      	movs	r6, r0
    3be4:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    3be6:	4b07      	ldr	r3, [pc, #28]	; (3c04 <usbdc_change_notify+0x24>)
    3be8:	691c      	ldr	r4, [r3, #16]

	while (cg != NULL) {
    3bea:	e000      	b.n	3bee <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    3bec:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    3bee:	2c00      	cmp	r4, #0
    3bf0:	d006      	beq.n	3c00 <usbdc_change_notify+0x20>
		if (NULL != cg->cb) {
    3bf2:	6863      	ldr	r3, [r4, #4]
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	d0f9      	beq.n	3bec <usbdc_change_notify+0xc>
			cg->cb(change, value);
    3bf8:	0029      	movs	r1, r5
    3bfa:	0030      	movs	r0, r6
    3bfc:	4798      	blx	r3
    3bfe:	e7f5      	b.n	3bec <usbdc_change_notify+0xc>
	}
}
    3c00:	bd70      	pop	{r4, r5, r6, pc}
    3c02:	46c0      	nop			; (mov r8, r8)
    3c04:	200027ec 	.word	0x200027ec

00003c08 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c0a:	0007      	movs	r7, r0
    3c0c:	000e      	movs	r6, r1
    3c0e:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3c10:	4b0b      	ldr	r3, [pc, #44]	; (3c40 <usbdc_request_handler+0x38>)
    3c12:	68dc      	ldr	r4, [r3, #12]
	int32_t                   rc;

	while (h != NULL) {
    3c14:	e000      	b.n	3c18 <usbdc_request_handler+0x10>
				return true;
			} else if (ERR_NOT_FOUND != rc) {
				return -1;
			}
		}
		h = h->next;
    3c16:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    3c18:	2c00      	cmp	r4, #0
    3c1a:	d00d      	beq.n	3c38 <usbdc_request_handler+0x30>
		if (NULL != h->cb) {
    3c1c:	6863      	ldr	r3, [r4, #4]
    3c1e:	2b00      	cmp	r3, #0
    3c20:	d0f9      	beq.n	3c16 <usbdc_request_handler+0xe>
			rc = h->cb(ep, req, stage);
    3c22:	002a      	movs	r2, r5
    3c24:	0031      	movs	r1, r6
    3c26:	0038      	movs	r0, r7
    3c28:	4798      	blx	r3
			if (0 == rc) {
    3c2a:	2800      	cmp	r0, #0
    3c2c:	d006      	beq.n	3c3c <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
    3c2e:	300a      	adds	r0, #10
    3c30:	d0f1      	beq.n	3c16 <usbdc_request_handler+0xe>
				return -1;
    3c32:	2001      	movs	r0, #1
    3c34:	4240      	negs	r0, r0
    3c36:	e000      	b.n	3c3a <usbdc_request_handler+0x32>
	}
	return false;
    3c38:	2000      	movs	r0, #0
}
    3c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    3c3c:	2001      	movs	r0, #1
    3c3e:	e7fc      	b.n	3c3a <usbdc_request_handler+0x32>
    3c40:	200027ec 	.word	0x200027ec

00003c44 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    3c44:	b510      	push	{r4, lr}
	usbdc_sof_notify();
    3c46:	f7ff ffbb 	bl	3bc0 <usbdc_sof_notify>
}
    3c4a:	bd10      	pop	{r4, pc}

00003c4c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    3c4c:	b510      	push	{r4, lr}
    3c4e:	0001      	movs	r1, r0
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    3c50:	2201      	movs	r2, #1
    3c52:	2000      	movs	r0, #0
    3c54:	f7ff ffd8 	bl	3c08 <usbdc_request_handler>
	return false;
}
    3c58:	2000      	movs	r0, #0
    3c5a:	bd10      	pop	{r4, pc}

00003c5c <usbdc_set_address>:
{
    3c5c:	b510      	push	{r4, lr}
	usb_d_set_address(addr);
    3c5e:	f7fc fe39 	bl	8d4 <usb_d_set_address>
}
    3c62:	bd10      	pop	{r4, pc}

00003c64 <usbdc_ctrl_status_end>:
{
    3c64:	b510      	push	{r4, lr}
    3c66:	0004      	movs	r4, r0
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    3c68:	7803      	ldrb	r3, [r0, #0]
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	d112      	bne.n	3c94 <usbdc_ctrl_status_end+0x30>
	switch (req->bRequest) {
    3c6e:	7843      	ldrb	r3, [r0, #1]
    3c70:	2b05      	cmp	r3, #5
    3c72:	d012      	beq.n	3c9a <usbdc_ctrl_status_end+0x36>
    3c74:	2b09      	cmp	r3, #9
    3c76:	d10d      	bne.n	3c94 <usbdc_ctrl_status_end+0x30>
		usbdc.cfg_value = req->wValue;
    3c78:	7882      	ldrb	r2, [r0, #2]
    3c7a:	4b10      	ldr	r3, [pc, #64]	; (3cbc <usbdc_ctrl_status_end+0x58>)
    3c7c:	77da      	strb	r2, [r3, #31]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    3c7e:	7882      	ldrb	r2, [r0, #2]
    3c80:	78c3      	ldrb	r3, [r0, #3]
    3c82:	021b      	lsls	r3, r3, #8
    3c84:	4313      	orrs	r3, r2
    3c86:	d106      	bne.n	3c96 <usbdc_ctrl_status_end+0x32>
    3c88:	2103      	movs	r1, #3
    3c8a:	4b0c      	ldr	r3, [pc, #48]	; (3cbc <usbdc_ctrl_status_end+0x58>)
    3c8c:	7799      	strb	r1, [r3, #30]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3c8e:	2001      	movs	r0, #1
    3c90:	f7ff ffa6 	bl	3be0 <usbdc_change_notify>
}
    3c94:	bd10      	pop	{r4, pc}
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    3c96:	2104      	movs	r1, #4
    3c98:	e7f7      	b.n	3c8a <usbdc_ctrl_status_end+0x26>
		usbdc_set_address(req->wValue);
    3c9a:	7880      	ldrb	r0, [r0, #2]
    3c9c:	f7ff ffde 	bl	3c5c <usbdc_set_address>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    3ca0:	78a2      	ldrb	r2, [r4, #2]
    3ca2:	78e3      	ldrb	r3, [r4, #3]
    3ca4:	021b      	lsls	r3, r3, #8
    3ca6:	4313      	orrs	r3, r2
    3ca8:	d006      	beq.n	3cb8 <usbdc_ctrl_status_end+0x54>
    3caa:	2103      	movs	r1, #3
    3cac:	4b03      	ldr	r3, [pc, #12]	; (3cbc <usbdc_ctrl_status_end+0x58>)
    3cae:	7799      	strb	r1, [r3, #30]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3cb0:	2001      	movs	r0, #1
    3cb2:	f7ff ff95 	bl	3be0 <usbdc_change_notify>
		break;
    3cb6:	e7ed      	b.n	3c94 <usbdc_ctrl_status_end+0x30>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    3cb8:	2102      	movs	r1, #2
    3cba:	e7f7      	b.n	3cac <usbdc_ctrl_status_end+0x48>
    3cbc:	200027ec 	.word	0x200027ec

00003cc0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    3cc0:	b510      	push	{r4, lr}
	(void)ep;

	switch (code) {
    3cc2:	2900      	cmp	r1, #0
    3cc4:	d003      	beq.n	3cce <usbdc_cb_ctl_done+0xe>
    3cc6:	2901      	cmp	r1, #1
    3cc8:	d006      	beq.n	3cd8 <usbdc_cb_ctl_done+0x18>
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
    3cca:	2000      	movs	r0, #0
    3ccc:	e003      	b.n	3cd6 <usbdc_cb_ctl_done+0x16>
		usbdc_ctrl_status_end(req);
    3cce:	0010      	movs	r0, r2
    3cd0:	f7ff ffc8 	bl	3c64 <usbdc_ctrl_status_end>
	return false;
    3cd4:	2000      	movs	r0, #0
}
    3cd6:	bd10      	pop	{r4, pc}
		return usbdc_ctrl_data_end(req);
    3cd8:	0010      	movs	r0, r2
    3cda:	f7ff ffb7 	bl	3c4c <usbdc_ctrl_data_end>
    3cde:	e7fa      	b.n	3cd6 <usbdc_cb_ctl_done+0x16>

00003ce0 <usbdc_set_config>:
{
    3ce0:	b530      	push	{r4, r5, lr}
    3ce2:	b083      	sub	sp, #12
    3ce4:	1e04      	subs	r4, r0, #0
	if (cfg_value == 0) {
    3ce6:	d015      	beq.n	3d14 <usbdc_set_config+0x34>
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
    3ce8:	f7fc fdf0 	bl	8cc <usb_d_get_speed>
    3cec:	2802      	cmp	r0, #2
    3cee:	d015      	beq.n	3d1c <usbdc_set_config+0x3c>
	uint8_t *               cfg_desc = NULL;
    3cf0:	2000      	movs	r0, #0
	if (!cfg_desc) {
    3cf2:	2800      	cmp	r0, #0
    3cf4:	d01e      	beq.n	3d34 <usbdc_set_config+0x54>
	if (NULL == cfg_desc) {
    3cf6:	2800      	cmp	r0, #0
    3cf8:	d046      	beq.n	3d88 <usbdc_set_config+0xa8>
    3cfa:	7881      	ldrb	r1, [r0, #2]
    3cfc:	78c3      	ldrb	r3, [r0, #3]
    3cfe:	021b      	lsls	r3, r3, #8
    3d00:	18c9      	adds	r1, r1, r3
    3d02:	b289      	uxth	r1, r1
	desc.eod  = cfg_desc + total_len;
    3d04:	1841      	adds	r1, r0, r1
    3d06:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3d08:	2204      	movs	r2, #4
    3d0a:	f000 fbc9 	bl	44a0 <usb_find_desc>
    3d0e:	9000      	str	r0, [sp, #0]
	uint8_t                 last_iface = 0xFF;
    3d10:	24ff      	movs	r4, #255	; 0xff
	while (NULL != desc.sod) {
    3d12:	e021      	b.n	3d58 <usbdc_set_config+0x78>
		usbdc_unconfig();
    3d14:	f7ff ff44 	bl	3ba0 <usbdc_unconfig>
		return true;
    3d18:	2001      	movs	r0, #1
    3d1a:	e033      	b.n	3d84 <usbdc_set_config+0xa4>
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
    3d1c:	4b1b      	ldr	r3, [pc, #108]	; (3d8c <usbdc_set_config+0xac>)
    3d1e:	685b      	ldr	r3, [r3, #4]
    3d20:	2b00      	cmp	r3, #0
    3d22:	d005      	beq.n	3d30 <usbdc_set_config+0x50>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
    3d24:	6818      	ldr	r0, [r3, #0]
    3d26:	6859      	ldr	r1, [r3, #4]
    3d28:	0022      	movs	r2, r4
    3d2a:	f000 fbda 	bl	44e2 <usb_find_cfg_desc>
    3d2e:	e7e0      	b.n	3cf2 <usbdc_set_config+0x12>
	uint8_t *               cfg_desc = NULL;
    3d30:	2000      	movs	r0, #0
    3d32:	e7de      	b.n	3cf2 <usbdc_set_config+0x12>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3d34:	4b15      	ldr	r3, [pc, #84]	; (3d8c <usbdc_set_config+0xac>)
    3d36:	681b      	ldr	r3, [r3, #0]
    3d38:	6818      	ldr	r0, [r3, #0]
    3d3a:	6859      	ldr	r1, [r3, #4]
    3d3c:	0022      	movs	r2, r4
    3d3e:	f000 fbd0 	bl	44e2 <usb_find_cfg_desc>
    3d42:	e7d8      	b.n	3cf6 <usbdc_set_config+0x16>
			last_iface = desc.sod[2];
    3d44:	002c      	movs	r4, r5
		desc.sod = usb_desc_next(desc.sod);
    3d46:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    3d48:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    3d4a:	18c0      	adds	r0, r0, r3
    3d4c:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3d4e:	2204      	movs	r2, #4
    3d50:	9901      	ldr	r1, [sp, #4]
    3d52:	f000 fba5 	bl	44a0 <usb_find_desc>
    3d56:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    3d58:	9b00      	ldr	r3, [sp, #0]
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	d011      	beq.n	3d82 <usbdc_set_config+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    3d5e:	789d      	ldrb	r5, [r3, #2]
    3d60:	42ac      	cmp	r4, r5
    3d62:	d0f0      	beq.n	3d46 <usbdc_set_config+0x66>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3d64:	4b09      	ldr	r3, [pc, #36]	; (3d8c <usbdc_set_config+0xac>)
    3d66:	695c      	ldr	r4, [r3, #20]
			while (NULL != func) {
    3d68:	2c00      	cmp	r4, #0
    3d6a:	d0eb      	beq.n	3d44 <usbdc_set_config+0x64>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    3d6c:	466a      	mov	r2, sp
    3d6e:	2100      	movs	r1, #0
    3d70:	0020      	movs	r0, r4
    3d72:	6863      	ldr	r3, [r4, #4]
    3d74:	4798      	blx	r3
    3d76:	2800      	cmp	r0, #0
    3d78:	d001      	beq.n	3d7e <usbdc_set_config+0x9e>
					func = func->next;
    3d7a:	6824      	ldr	r4, [r4, #0]
    3d7c:	e7f4      	b.n	3d68 <usbdc_set_config+0x88>
			last_iface = desc.sod[2];
    3d7e:	002c      	movs	r4, r5
    3d80:	e7e1      	b.n	3d46 <usbdc_set_config+0x66>
	return true;
    3d82:	2001      	movs	r0, #1
}
    3d84:	b003      	add	sp, #12
    3d86:	bd30      	pop	{r4, r5, pc}
		return false;
    3d88:	2000      	movs	r0, #0
    3d8a:	e7fb      	b.n	3d84 <usbdc_set_config+0xa4>
    3d8c:	200027ec 	.word	0x200027ec

00003d90 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    3d90:	b510      	push	{r4, lr}
	usbdc_unconfig();
    3d92:	f7ff ff05 	bl	3ba0 <usbdc_unconfig>

	usbdc.state       = USBD_S_DEFAULT;
    3d96:	4c0e      	ldr	r4, [pc, #56]	; (3dd0 <usbdc_reset+0x40>)
    3d98:	2302      	movs	r3, #2
    3d9a:	77a3      	strb	r3, [r4, #30]
	usbdc.cfg_value   = 0;
    3d9c:	2300      	movs	r3, #0
    3d9e:	77e3      	strb	r3, [r4, #31]
	usbdc.ifc_alt_map = 0;
    3da0:	2221      	movs	r2, #33	; 0x21
    3da2:	54a3      	strb	r3, [r4, r2]

	// Setup EP0
	usb_d_ep_deinit(0);
    3da4:	2000      	movs	r0, #0
    3da6:	f7fc fdc7 	bl	938 <usb_d_ep_deinit>
	usb_d_ep0_init(usbdc.ctrl_size);
    3daa:	2320      	movs	r3, #32
    3dac:	5ce0      	ldrb	r0, [r4, r3]
    3dae:	f7fc fdbb 	bl	928 <usb_d_ep0_init>
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    3db2:	4a08      	ldr	r2, [pc, #32]	; (3dd4 <usbdc_reset+0x44>)
    3db4:	2100      	movs	r1, #0
    3db6:	2000      	movs	r0, #0
    3db8:	f7fc feae 	bl	b18 <usb_d_ep_register_callback>
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3dbc:	4a06      	ldr	r2, [pc, #24]	; (3dd8 <usbdc_reset+0x48>)
    3dbe:	2102      	movs	r1, #2
    3dc0:	2000      	movs	r0, #0
    3dc2:	f7fc fea9 	bl	b18 <usb_d_ep_register_callback>
	usb_d_ep_enable(0);
    3dc6:	2000      	movs	r0, #0
    3dc8:	f7fc fdc8 	bl	95c <usb_d_ep_enable>
}
    3dcc:	bd10      	pop	{r4, pc}
    3dce:	46c0      	nop			; (mov r8, r8)
    3dd0:	200027ec 	.word	0x200027ec
    3dd4:	00004369 	.word	0x00004369
    3dd8:	00003cc1 	.word	0x00003cc1

00003ddc <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3ddc:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    3dde:	2800      	cmp	r0, #0
    3de0:	d002      	beq.n	3de8 <usbd_event_cb+0xc>
    3de2:	2801      	cmp	r0, #1
    3de4:	d004      	beq.n	3df0 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    3de6:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    3de8:	2000      	movs	r0, #0
    3dea:	f7ff fef9 	bl	3be0 <usbdc_change_notify>
		break;
    3dee:	e7fa      	b.n	3de6 <usbd_event_cb+0xa>
		usbdc_reset();
    3df0:	f7ff ffce 	bl	3d90 <usbdc_reset>
}
    3df4:	e7f7      	b.n	3de6 <usbd_event_cb+0xa>

00003df6 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    3df6:	b510      	push	{r4, lr}
    3df8:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    3dfa:	ac01      	add	r4, sp, #4
    3dfc:	9101      	str	r1, [sp, #4]
    3dfe:	9202      	str	r2, [sp, #8]
    3e00:	7220      	strb	r0, [r4, #8]
    3e02:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    3e04:	0020      	movs	r0, r4
    3e06:	f7fc fdcd 	bl	9a4 <usb_d_ep_transfer>
}
    3e0a:	b004      	add	sp, #16
    3e0c:	bd10      	pop	{r4, pc}

00003e0e <usbdc_clear_ftr_req>:
{
    3e0e:	b510      	push	{r4, lr}
    3e10:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3e12:	780a      	ldrb	r2, [r1, #0]
    3e14:	231f      	movs	r3, #31
    3e16:	4013      	ands	r3, r2
    3e18:	2b02      	cmp	r3, #2
    3e1a:	d112      	bne.n	3e42 <usbdc_clear_ftr_req+0x34>
		if (req->wLength != 0) {
    3e1c:	798a      	ldrb	r2, [r1, #6]
    3e1e:	79cb      	ldrb	r3, [r1, #7]
    3e20:	021b      	lsls	r3, r3, #8
    3e22:	4313      	orrs	r3, r2
    3e24:	d001      	beq.n	3e2a <usbdc_clear_ftr_req+0x1c>
			return false;
    3e26:	2000      	movs	r0, #0
    3e28:	e00c      	b.n	3e44 <usbdc_clear_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    3e2a:	7908      	ldrb	r0, [r1, #4]
    3e2c:	2100      	movs	r1, #0
    3e2e:	f7fc fe43 	bl	ab8 <usb_d_ep_halt>
		usbdc_xfer(ep, NULL, 0, true);
    3e32:	2301      	movs	r3, #1
    3e34:	2200      	movs	r2, #0
    3e36:	2100      	movs	r1, #0
    3e38:	0020      	movs	r0, r4
    3e3a:	f7ff ffdc 	bl	3df6 <usbdc_xfer>
		return true;
    3e3e:	2001      	movs	r0, #1
    3e40:	e000      	b.n	3e44 <usbdc_clear_ftr_req+0x36>
		return false;
    3e42:	2000      	movs	r0, #0
}
    3e44:	bd10      	pop	{r4, pc}

00003e46 <usbdc_set_ftr_req>:
{
    3e46:	b510      	push	{r4, lr}
    3e48:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3e4a:	780a      	ldrb	r2, [r1, #0]
    3e4c:	231f      	movs	r3, #31
    3e4e:	4013      	ands	r3, r2
    3e50:	2b02      	cmp	r3, #2
    3e52:	d112      	bne.n	3e7a <usbdc_set_ftr_req+0x34>
		if (req->wLength != 0) {
    3e54:	798a      	ldrb	r2, [r1, #6]
    3e56:	79cb      	ldrb	r3, [r1, #7]
    3e58:	021b      	lsls	r3, r3, #8
    3e5a:	4313      	orrs	r3, r2
    3e5c:	d001      	beq.n	3e62 <usbdc_set_ftr_req+0x1c>
			return false;
    3e5e:	2000      	movs	r0, #0
    3e60:	e00c      	b.n	3e7c <usbdc_set_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    3e62:	7908      	ldrb	r0, [r1, #4]
    3e64:	2101      	movs	r1, #1
    3e66:	f7fc fe27 	bl	ab8 <usb_d_ep_halt>
		usbdc_xfer(ep, NULL, 0, true);
    3e6a:	2301      	movs	r3, #1
    3e6c:	2200      	movs	r2, #0
    3e6e:	2100      	movs	r1, #0
    3e70:	0020      	movs	r0, r4
    3e72:	f7ff ffc0 	bl	3df6 <usbdc_xfer>
		return true;
    3e76:	2001      	movs	r0, #1
    3e78:	e000      	b.n	3e7c <usbdc_set_ftr_req+0x36>
		return false;
    3e7a:	2000      	movs	r0, #0
}
    3e7c:	bd10      	pop	{r4, pc}
	...

00003e80 <usbdc_set_interface>:
{
    3e80:	b570      	push	{r4, r5, r6, lr}
    3e82:	b082      	sub	sp, #8
    3e84:	0006      	movs	r6, r0
    3e86:	000d      	movs	r5, r1
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
    3e88:	f7fc fd20 	bl	8cc <usb_d_get_speed>
    3e8c:	2802      	cmp	r0, #2
    3e8e:	d013      	beq.n	3eb8 <usbdc_set_interface+0x38>
	uint8_t *               ifc = NULL;
    3e90:	2000      	movs	r0, #0
	if (!ifc) {
    3e92:	2800      	cmp	r0, #0
    3e94:	d01d      	beq.n	3ed2 <usbdc_set_interface+0x52>
	if (NULL == ifc) {
    3e96:	2800      	cmp	r0, #0
    3e98:	d05b      	beq.n	3f52 <usbdc_set_interface+0xd2>
	desc.sod = ifc;
    3e9a:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    3e9c:	7881      	ldrb	r1, [r0, #2]
    3e9e:	78c3      	ldrb	r3, [r0, #3]
    3ea0:	021b      	lsls	r3, r3, #8
    3ea2:	18c9      	adds	r1, r1, r3
    3ea4:	b289      	uxth	r1, r1
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3ea6:	1841      	adds	r1, r0, r1
    3ea8:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    3eaa:	2204      	movs	r2, #4
    3eac:	f000 faf8 	bl	44a0 <usb_find_desc>
    3eb0:	2800      	cmp	r0, #0
    3eb2:	d120      	bne.n	3ef6 <usbdc_set_interface+0x76>
		return false;
    3eb4:	2000      	movs	r0, #0
    3eb6:	e04f      	b.n	3f58 <usbdc_set_interface+0xd8>
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
    3eb8:	4b29      	ldr	r3, [pc, #164]	; (3f60 <usbdc_set_interface+0xe0>)
    3eba:	685b      	ldr	r3, [r3, #4]
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	d006      	beq.n	3ece <usbdc_set_interface+0x4e>
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
    3ec0:	6818      	ldr	r0, [r3, #0]
    3ec2:	6859      	ldr	r1, [r3, #4]
    3ec4:	4b26      	ldr	r3, [pc, #152]	; (3f60 <usbdc_set_interface+0xe0>)
    3ec6:	7fda      	ldrb	r2, [r3, #31]
    3ec8:	f000 fb0b 	bl	44e2 <usb_find_cfg_desc>
    3ecc:	e7e1      	b.n	3e92 <usbdc_set_interface+0x12>
	uint8_t *               ifc = NULL;
    3ece:	2000      	movs	r0, #0
    3ed0:	e7df      	b.n	3e92 <usbdc_set_interface+0x12>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    3ed2:	4b23      	ldr	r3, [pc, #140]	; (3f60 <usbdc_set_interface+0xe0>)
    3ed4:	681a      	ldr	r2, [r3, #0]
    3ed6:	6810      	ldr	r0, [r2, #0]
    3ed8:	6851      	ldr	r1, [r2, #4]
    3eda:	7fda      	ldrb	r2, [r3, #31]
    3edc:	f000 fb01 	bl	44e2 <usb_find_cfg_desc>
    3ee0:	e7d9      	b.n	3e96 <usbdc_set_interface+0x16>
		desc.sod = usb_desc_next(desc.sod);
    3ee2:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    3ee4:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    3ee6:	18c0      	adds	r0, r0, r3
    3ee8:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3eea:	2204      	movs	r2, #4
    3eec:	9901      	ldr	r1, [sp, #4]
    3eee:	f000 fad7 	bl	44a0 <usb_find_desc>
		if (NULL == ifc) {
    3ef2:	2800      	cmp	r0, #0
    3ef4:	d02f      	beq.n	3f56 <usbdc_set_interface+0xd6>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3ef6:	7883      	ldrb	r3, [r0, #2]
    3ef8:	42ab      	cmp	r3, r5
    3efa:	d1f2      	bne.n	3ee2 <usbdc_set_interface+0x62>
    3efc:	78c3      	ldrb	r3, [r0, #3]
    3efe:	42b3      	cmp	r3, r6
    3f00:	d1ef      	bne.n	3ee2 <usbdc_set_interface+0x62>
	desc.sod = ifc;
    3f02:	9000      	str	r0, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    3f04:	4b16      	ldr	r3, [pc, #88]	; (3f60 <usbdc_set_interface+0xe0>)
    3f06:	695c      	ldr	r4, [r3, #20]
	while (NULL != func) {
    3f08:	2c00      	cmp	r4, #0
    3f0a:	d020      	beq.n	3f4e <usbdc_set_interface+0xce>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3f0c:	466a      	mov	r2, sp
    3f0e:	2101      	movs	r1, #1
    3f10:	0020      	movs	r0, r4
    3f12:	6863      	ldr	r3, [r4, #4]
    3f14:	4798      	blx	r3
    3f16:	2800      	cmp	r0, #0
    3f18:	d001      	beq.n	3f1e <usbdc_set_interface+0x9e>
			func = func->next;
    3f1a:	6824      	ldr	r4, [r4, #0]
    3f1c:	e7f4      	b.n	3f08 <usbdc_set_interface+0x88>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3f1e:	6863      	ldr	r3, [r4, #4]
    3f20:	466a      	mov	r2, sp
    3f22:	2100      	movs	r1, #0
    3f24:	0020      	movs	r0, r4
    3f26:	4798      	blx	r3
    3f28:	2800      	cmp	r0, #0
    3f2a:	d117      	bne.n	3f5c <usbdc_set_interface+0xdc>
			if (alt_set) {
    3f2c:	2e00      	cmp	r6, #0
    3f2e:	d006      	beq.n	3f3e <usbdc_set_interface+0xbe>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    3f30:	2201      	movs	r2, #1
    3f32:	40aa      	lsls	r2, r5
    3f34:	480a      	ldr	r0, [pc, #40]	; (3f60 <usbdc_set_interface+0xe0>)
    3f36:	2121      	movs	r1, #33	; 0x21
    3f38:	5c43      	ldrb	r3, [r0, r1]
    3f3a:	4313      	orrs	r3, r2
    3f3c:	5443      	strb	r3, [r0, r1]
			usbdc_xfer(0, NULL, 0, 0);
    3f3e:	2300      	movs	r3, #0
    3f40:	2200      	movs	r2, #0
    3f42:	2100      	movs	r1, #0
    3f44:	2000      	movs	r0, #0
    3f46:	f7ff ff56 	bl	3df6 <usbdc_xfer>
			return true;
    3f4a:	2001      	movs	r0, #1
    3f4c:	e004      	b.n	3f58 <usbdc_set_interface+0xd8>
	return false;
    3f4e:	2000      	movs	r0, #0
    3f50:	e002      	b.n	3f58 <usbdc_set_interface+0xd8>
		return false;
    3f52:	2000      	movs	r0, #0
    3f54:	e000      	b.n	3f58 <usbdc_set_interface+0xd8>
			return false;
    3f56:	2000      	movs	r0, #0
}
    3f58:	b002      	add	sp, #8
    3f5a:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    3f5c:	2000      	movs	r0, #0
    3f5e:	e7fb      	b.n	3f58 <usbdc_set_interface+0xd8>
    3f60:	200027ec 	.word	0x200027ec

00003f64 <usbdc_set_req>:
{
    3f64:	b510      	push	{r4, lr}
    3f66:	0004      	movs	r4, r0
	switch (req->bRequest) {
    3f68:	784b      	ldrb	r3, [r1, #1]
    3f6a:	2b0b      	cmp	r3, #11
    3f6c:	d82d      	bhi.n	3fca <usbdc_set_req+0x66>
    3f6e:	009b      	lsls	r3, r3, #2
    3f70:	4a17      	ldr	r2, [pc, #92]	; (3fd0 <usbdc_set_req+0x6c>)
    3f72:	58d3      	ldr	r3, [r2, r3]
    3f74:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3f76:	2301      	movs	r3, #1
    3f78:	2200      	movs	r2, #0
    3f7a:	2100      	movs	r1, #0
    3f7c:	f7ff ff3b 	bl	3df6 <usbdc_xfer>
    3f80:	4243      	negs	r3, r0
    3f82:	4158      	adcs	r0, r3
    3f84:	b2c0      	uxtb	r0, r0
}
    3f86:	bd10      	pop	{r4, pc}
		if (!usbdc_set_config(req->wValue)) {
    3f88:	7888      	ldrb	r0, [r1, #2]
    3f8a:	f7ff fea9 	bl	3ce0 <usbdc_set_config>
    3f8e:	2800      	cmp	r0, #0
    3f90:	d0f9      	beq.n	3f86 <usbdc_set_req+0x22>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3f92:	2301      	movs	r3, #1
    3f94:	2200      	movs	r2, #0
    3f96:	2100      	movs	r1, #0
    3f98:	0020      	movs	r0, r4
    3f9a:	f7ff ff2c 	bl	3df6 <usbdc_xfer>
    3f9e:	4243      	negs	r3, r0
    3fa0:	4158      	adcs	r0, r3
    3fa2:	b2c0      	uxtb	r0, r0
    3fa4:	e7ef      	b.n	3f86 <usbdc_set_req+0x22>
		return usbdc_clear_ftr_req(ep, req);
    3fa6:	f7ff ff32 	bl	3e0e <usbdc_clear_ftr_req>
    3faa:	e7ec      	b.n	3f86 <usbdc_set_req+0x22>
		return usbdc_set_ftr_req(ep, req);
    3fac:	f7ff ff4b 	bl	3e46 <usbdc_set_ftr_req>
    3fb0:	e7e9      	b.n	3f86 <usbdc_set_req+0x22>
		return usbdc_set_interface(req->wValue, req->wIndex);
    3fb2:	790a      	ldrb	r2, [r1, #4]
    3fb4:	794b      	ldrb	r3, [r1, #5]
    3fb6:	021b      	lsls	r3, r3, #8
    3fb8:	4313      	orrs	r3, r2
    3fba:	788a      	ldrb	r2, [r1, #2]
    3fbc:	78c8      	ldrb	r0, [r1, #3]
    3fbe:	0200      	lsls	r0, r0, #8
    3fc0:	4310      	orrs	r0, r2
    3fc2:	0019      	movs	r1, r3
    3fc4:	f7ff ff5c 	bl	3e80 <usbdc_set_interface>
    3fc8:	e7dd      	b.n	3f86 <usbdc_set_req+0x22>
		return false;
    3fca:	2000      	movs	r0, #0
    3fcc:	e7db      	b.n	3f86 <usbdc_set_req+0x22>
    3fce:	46c0      	nop			; (mov r8, r8)
    3fd0:	00004b40 	.word	0x00004b40

00003fd4 <usbdc_get_dev_desc>:
{
    3fd4:	b570      	push	{r4, r5, r6, lr}
    3fd6:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    3fd8:	798b      	ldrb	r3, [r1, #6]
    3fda:	79cc      	ldrb	r4, [r1, #7]
    3fdc:	0224      	lsls	r4, r4, #8
    3fde:	431c      	orrs	r4, r3
	if (length > 0x12) {
    3fe0:	2c12      	cmp	r4, #18
    3fe2:	d900      	bls.n	3fe6 <usbdc_get_dev_desc+0x12>
		length = 0x12;
    3fe4:	2412      	movs	r4, #18
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
    3fe6:	f7fc fc71 	bl	8cc <usb_d_get_speed>
    3fea:	2802      	cmp	r0, #2
    3fec:	d00d      	beq.n	400a <usbdc_get_dev_desc+0x36>
	uint8_t *dev_desc = NULL;
    3fee:	2100      	movs	r1, #0
	if (!dev_desc) {
    3ff0:	2900      	cmp	r1, #0
    3ff2:	d017      	beq.n	4024 <usbdc_get_dev_desc+0x50>
	if (!dev_desc) {
    3ff4:	2900      	cmp	r1, #0
    3ff6:	d020      	beq.n	403a <usbdc_get_dev_desc+0x66>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    3ff8:	2300      	movs	r3, #0
    3ffa:	0022      	movs	r2, r4
    3ffc:	0028      	movs	r0, r5
    3ffe:	f7ff fefa 	bl	3df6 <usbdc_xfer>
    4002:	2800      	cmp	r0, #0
    4004:	d117      	bne.n	4036 <usbdc_get_dev_desc+0x62>
	return true;
    4006:	2001      	movs	r0, #1
}
    4008:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
    400a:	4b0d      	ldr	r3, [pc, #52]	; (4040 <usbdc_get_dev_desc+0x6c>)
    400c:	685b      	ldr	r3, [r3, #4]
    400e:	2b00      	cmp	r3, #0
    4010:	d006      	beq.n	4020 <usbdc_get_dev_desc+0x4c>
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
    4012:	6818      	ldr	r0, [r3, #0]
    4014:	6859      	ldr	r1, [r3, #4]
    4016:	2201      	movs	r2, #1
    4018:	f000 fa42 	bl	44a0 <usb_find_desc>
    401c:	0001      	movs	r1, r0
    401e:	e7e7      	b.n	3ff0 <usbdc_get_dev_desc+0x1c>
	uint8_t *dev_desc = NULL;
    4020:	2100      	movs	r1, #0
    4022:	e7e5      	b.n	3ff0 <usbdc_get_dev_desc+0x1c>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    4024:	4b06      	ldr	r3, [pc, #24]	; (4040 <usbdc_get_dev_desc+0x6c>)
    4026:	681b      	ldr	r3, [r3, #0]
    4028:	6818      	ldr	r0, [r3, #0]
    402a:	6859      	ldr	r1, [r3, #4]
    402c:	2201      	movs	r2, #1
    402e:	f000 fa37 	bl	44a0 <usb_find_desc>
    4032:	0001      	movs	r1, r0
    4034:	e7de      	b.n	3ff4 <usbdc_get_dev_desc+0x20>
		return false;
    4036:	2000      	movs	r0, #0
    4038:	e7e6      	b.n	4008 <usbdc_get_dev_desc+0x34>
		return false;
    403a:	2000      	movs	r0, #0
    403c:	e7e4      	b.n	4008 <usbdc_get_dev_desc+0x34>
    403e:	46c0      	nop			; (mov r8, r8)
    4040:	200027ec 	.word	0x200027ec

00004044 <usbdc_get_cfg_desc>:
{
    4044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4046:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    4048:	798b      	ldrb	r3, [r1, #6]
    404a:	79ce      	ldrb	r6, [r1, #7]
    404c:	0236      	lsls	r6, r6, #8
    404e:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    4050:	788f      	ldrb	r7, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4052:	2320      	movs	r3, #32
    4054:	4a1e      	ldr	r2, [pc, #120]	; (40d0 <usbdc_get_cfg_desc+0x8c>)
    4056:	5cd4      	ldrb	r4, [r2, r3]
    4058:	3c01      	subs	r4, #1
    405a:	4034      	ands	r4, r6
    405c:	4263      	negs	r3, r4
    405e:	415c      	adcs	r4, r3
    4060:	b2e4      	uxtb	r4, r4
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
    4062:	f7fc fc33 	bl	8cc <usb_d_get_speed>
    4066:	2802      	cmp	r0, #2
    4068:	d015      	beq.n	4096 <usbdc_get_cfg_desc+0x52>
	uint8_t *cfg_desc = NULL;
    406a:	2100      	movs	r1, #0
	if (!cfg_desc) {
    406c:	2900      	cmp	r1, #0
    406e:	d020      	beq.n	40b2 <usbdc_get_cfg_desc+0x6e>
	if (NULL == cfg_desc) {
    4070:	2900      	cmp	r1, #0
    4072:	d02a      	beq.n	40ca <usbdc_get_cfg_desc+0x86>
	return (ptr[0] + (ptr[1] << 8));
    4074:	788a      	ldrb	r2, [r1, #2]
    4076:	78cb      	ldrb	r3, [r1, #3]
    4078:	021b      	lsls	r3, r3, #8
    407a:	18d2      	adds	r2, r2, r3
    407c:	b292      	uxth	r2, r2
	if (length <= total_len) {
    407e:	4296      	cmp	r6, r2
    4080:	d801      	bhi.n	4086 <usbdc_get_cfg_desc+0x42>
	uint16_t length   = req->wLength;
    4082:	0032      	movs	r2, r6
		need_zlp = false;
    4084:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    4086:	0023      	movs	r3, r4
    4088:	0028      	movs	r0, r5
    408a:	f7ff feb4 	bl	3df6 <usbdc_xfer>
    408e:	2800      	cmp	r0, #0
    4090:	d119      	bne.n	40c6 <usbdc_get_cfg_desc+0x82>
	return true;
    4092:	2001      	movs	r0, #1
}
    4094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
    4096:	4b0e      	ldr	r3, [pc, #56]	; (40d0 <usbdc_get_cfg_desc+0x8c>)
    4098:	685b      	ldr	r3, [r3, #4]
    409a:	2b00      	cmp	r3, #0
    409c:	d007      	beq.n	40ae <usbdc_get_cfg_desc+0x6a>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
    409e:	6818      	ldr	r0, [r3, #0]
    40a0:	6859      	ldr	r1, [r3, #4]
    40a2:	1c7a      	adds	r2, r7, #1
    40a4:	b2d2      	uxtb	r2, r2
    40a6:	f000 fa1c 	bl	44e2 <usb_find_cfg_desc>
    40aa:	0001      	movs	r1, r0
    40ac:	e7de      	b.n	406c <usbdc_get_cfg_desc+0x28>
	uint8_t *cfg_desc = NULL;
    40ae:	2100      	movs	r1, #0
    40b0:	e7dc      	b.n	406c <usbdc_get_cfg_desc+0x28>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    40b2:	4b07      	ldr	r3, [pc, #28]	; (40d0 <usbdc_get_cfg_desc+0x8c>)
    40b4:	681b      	ldr	r3, [r3, #0]
    40b6:	6818      	ldr	r0, [r3, #0]
    40b8:	6859      	ldr	r1, [r3, #4]
    40ba:	3701      	adds	r7, #1
    40bc:	b2fa      	uxtb	r2, r7
    40be:	f000 fa10 	bl	44e2 <usb_find_cfg_desc>
    40c2:	0001      	movs	r1, r0
    40c4:	e7d4      	b.n	4070 <usbdc_get_cfg_desc+0x2c>
		return false;
    40c6:	2000      	movs	r0, #0
    40c8:	e7e4      	b.n	4094 <usbdc_get_cfg_desc+0x50>
		return false;
    40ca:	2000      	movs	r0, #0
    40cc:	e7e2      	b.n	4094 <usbdc_get_cfg_desc+0x50>
    40ce:	46c0      	nop			; (mov r8, r8)
    40d0:	200027ec 	.word	0x200027ec

000040d4 <usbdc_get_devqual_desc>:
{
    40d4:	b570      	push	{r4, r5, r6, lr}
    40d6:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    40d8:	798b      	ldrb	r3, [r1, #6]
    40da:	79cc      	ldrb	r4, [r1, #7]
    40dc:	0224      	lsls	r4, r4, #8
    40de:	431c      	orrs	r4, r3
	if (length > 0x12) {
    40e0:	2c12      	cmp	r4, #18
    40e2:	d900      	bls.n	40e6 <usbdc_get_devqual_desc+0x12>
		length = 0x12;
    40e4:	2412      	movs	r4, #18
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
    40e6:	f7fc fbf1 	bl	8cc <usb_d_get_speed>
    40ea:	2802      	cmp	r0, #2
    40ec:	d00d      	beq.n	410a <usbdc_get_devqual_desc+0x36>
	uint8_t *dev_desc = NULL;
    40ee:	2100      	movs	r1, #0
	if (!dev_desc) {
    40f0:	2900      	cmp	r1, #0
    40f2:	d017      	beq.n	4124 <usbdc_get_devqual_desc+0x50>
	if (!dev_desc) {
    40f4:	2900      	cmp	r1, #0
    40f6:	d020      	beq.n	413a <usbdc_get_devqual_desc+0x66>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    40f8:	2300      	movs	r3, #0
    40fa:	0022      	movs	r2, r4
    40fc:	0028      	movs	r0, r5
    40fe:	f7ff fe7a 	bl	3df6 <usbdc_xfer>
    4102:	2800      	cmp	r0, #0
    4104:	d117      	bne.n	4136 <usbdc_get_devqual_desc+0x62>
	return true;
    4106:	2001      	movs	r0, #1
}
    4108:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
    410a:	4b0d      	ldr	r3, [pc, #52]	; (4140 <usbdc_get_devqual_desc+0x6c>)
    410c:	685b      	ldr	r3, [r3, #4]
    410e:	2b00      	cmp	r3, #0
    4110:	d006      	beq.n	4120 <usbdc_get_devqual_desc+0x4c>
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE_QUALIFIER);
    4112:	6818      	ldr	r0, [r3, #0]
    4114:	6859      	ldr	r1, [r3, #4]
    4116:	2206      	movs	r2, #6
    4118:	f000 f9c2 	bl	44a0 <usb_find_desc>
    411c:	0001      	movs	r1, r0
    411e:	e7e7      	b.n	40f0 <usbdc_get_devqual_desc+0x1c>
	uint8_t *dev_desc = NULL;
    4120:	2100      	movs	r1, #0
    4122:	e7e5      	b.n	40f0 <usbdc_get_devqual_desc+0x1c>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE_QUALIFIER);
    4124:	4b06      	ldr	r3, [pc, #24]	; (4140 <usbdc_get_devqual_desc+0x6c>)
    4126:	681b      	ldr	r3, [r3, #0]
    4128:	6818      	ldr	r0, [r3, #0]
    412a:	6859      	ldr	r1, [r3, #4]
    412c:	2206      	movs	r2, #6
    412e:	f000 f9b7 	bl	44a0 <usb_find_desc>
    4132:	0001      	movs	r1, r0
    4134:	e7de      	b.n	40f4 <usbdc_get_devqual_desc+0x20>
		return false;
    4136:	2000      	movs	r0, #0
    4138:	e7e6      	b.n	4108 <usbdc_get_devqual_desc+0x34>
		return false;
    413a:	2000      	movs	r0, #0
    413c:	e7e4      	b.n	4108 <usbdc_get_devqual_desc+0x34>
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	200027ec 	.word	0x200027ec

00004144 <usbdc_get_othspdcfg_desc>:
{
    4144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4146:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    4148:	798b      	ldrb	r3, [r1, #6]
    414a:	79ce      	ldrb	r6, [r1, #7]
    414c:	0236      	lsls	r6, r6, #8
    414e:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    4150:	788f      	ldrb	r7, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4152:	2320      	movs	r3, #32
    4154:	4a1e      	ldr	r2, [pc, #120]	; (41d0 <usbdc_get_othspdcfg_desc+0x8c>)
    4156:	5cd4      	ldrb	r4, [r2, r3]
    4158:	3c01      	subs	r4, #1
    415a:	4034      	ands	r4, r6
    415c:	4263      	negs	r3, r4
    415e:	415c      	adcs	r4, r3
    4160:	b2e4      	uxtb	r4, r4
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
    4162:	f7fc fbb3 	bl	8cc <usb_d_get_speed>
    4166:	2802      	cmp	r0, #2
    4168:	d015      	beq.n	4196 <usbdc_get_othspdcfg_desc+0x52>
	uint8_t *cfg_desc = NULL;
    416a:	2100      	movs	r1, #0
	if (!cfg_desc) {
    416c:	2900      	cmp	r1, #0
    416e:	d020      	beq.n	41b2 <usbdc_get_othspdcfg_desc+0x6e>
	if (NULL == cfg_desc) {
    4170:	2900      	cmp	r1, #0
    4172:	d02a      	beq.n	41ca <usbdc_get_othspdcfg_desc+0x86>
    4174:	788a      	ldrb	r2, [r1, #2]
    4176:	78cb      	ldrb	r3, [r1, #3]
    4178:	021b      	lsls	r3, r3, #8
    417a:	18d2      	adds	r2, r2, r3
    417c:	b292      	uxth	r2, r2
	if (length <= total_len) {
    417e:	4296      	cmp	r6, r2
    4180:	d801      	bhi.n	4186 <usbdc_get_othspdcfg_desc+0x42>
	uint16_t length   = req->wLength;
    4182:	0032      	movs	r2, r6
		need_zlp = false;
    4184:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    4186:	0023      	movs	r3, r4
    4188:	0028      	movs	r0, r5
    418a:	f7ff fe34 	bl	3df6 <usbdc_xfer>
    418e:	2800      	cmp	r0, #0
    4190:	d119      	bne.n	41c6 <usbdc_get_othspdcfg_desc+0x82>
	return true;
    4192:	2001      	movs	r0, #1
}
    4194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
    4196:	4b0e      	ldr	r3, [pc, #56]	; (41d0 <usbdc_get_othspdcfg_desc+0x8c>)
    4198:	685b      	ldr	r3, [r3, #4]
    419a:	2b00      	cmp	r3, #0
    419c:	d007      	beq.n	41ae <usbdc_get_othspdcfg_desc+0x6a>
		cfg_desc = usb_find_othspdcfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
    419e:	6818      	ldr	r0, [r3, #0]
    41a0:	6859      	ldr	r1, [r3, #4]
    41a2:	1c7a      	adds	r2, r7, #1
    41a4:	b2d2      	uxtb	r2, r2
    41a6:	f000 f9bc 	bl	4522 <usb_find_othspdcfg_desc>
    41aa:	0001      	movs	r1, r0
    41ac:	e7de      	b.n	416c <usbdc_get_othspdcfg_desc+0x28>
	uint8_t *cfg_desc = NULL;
    41ae:	2100      	movs	r1, #0
    41b0:	e7dc      	b.n	416c <usbdc_get_othspdcfg_desc+0x28>
		cfg_desc = usb_find_othspdcfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    41b2:	4b07      	ldr	r3, [pc, #28]	; (41d0 <usbdc_get_othspdcfg_desc+0x8c>)
    41b4:	681b      	ldr	r3, [r3, #0]
    41b6:	6818      	ldr	r0, [r3, #0]
    41b8:	6859      	ldr	r1, [r3, #4]
    41ba:	3701      	adds	r7, #1
    41bc:	b2fa      	uxtb	r2, r7
    41be:	f000 f9b0 	bl	4522 <usb_find_othspdcfg_desc>
    41c2:	0001      	movs	r1, r0
    41c4:	e7d4      	b.n	4170 <usbdc_get_othspdcfg_desc+0x2c>
		return false;
    41c6:	2000      	movs	r0, #0
    41c8:	e7e4      	b.n	4194 <usbdc_get_othspdcfg_desc+0x50>
		return false;
    41ca:	2000      	movs	r0, #0
    41cc:	e7e2      	b.n	4194 <usbdc_get_othspdcfg_desc+0x50>
    41ce:	46c0      	nop			; (mov r8, r8)
    41d0:	200027ec 	.word	0x200027ec

000041d4 <usbdc_get_str_desc>:
{
    41d4:	b570      	push	{r4, r5, r6, lr}
    41d6:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    41d8:	798b      	ldrb	r3, [r1, #6]
    41da:	79ce      	ldrb	r6, [r1, #7]
    41dc:	0236      	lsls	r6, r6, #8
    41de:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    41e0:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    41e2:	4b10      	ldr	r3, [pc, #64]	; (4224 <usbdc_get_str_desc+0x50>)
    41e4:	2120      	movs	r1, #32
    41e6:	5c5c      	ldrb	r4, [r3, r1]
    41e8:	3c01      	subs	r4, #1
    41ea:	4034      	ands	r4, r6
    41ec:	4261      	negs	r1, r4
    41ee:	414c      	adcs	r4, r1
    41f0:	b2e4      	uxtb	r4, r4
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    41f2:	681b      	ldr	r3, [r3, #0]
    41f4:	6818      	ldr	r0, [r3, #0]
    41f6:	6859      	ldr	r1, [r3, #4]
    41f8:	f000 f9b3 	bl	4562 <usb_find_str_desc>
	if (NULL == str_desc) {
    41fc:	2800      	cmp	r0, #0
    41fe:	d00f      	beq.n	4220 <usbdc_get_str_desc+0x4c>
	if (length <= str_desc[0]) {
    4200:	7802      	ldrb	r2, [r0, #0]
    4202:	4296      	cmp	r6, r2
    4204:	d801      	bhi.n	420a <usbdc_get_str_desc+0x36>
	uint16_t length   = req->wLength;
    4206:	0032      	movs	r2, r6
		need_zlp = false;
    4208:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    420a:	0023      	movs	r3, r4
    420c:	0001      	movs	r1, r0
    420e:	0028      	movs	r0, r5
    4210:	f7ff fdf1 	bl	3df6 <usbdc_xfer>
    4214:	2800      	cmp	r0, #0
    4216:	d101      	bne.n	421c <usbdc_get_str_desc+0x48>
	return true;
    4218:	2001      	movs	r0, #1
}
    421a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    421c:	2000      	movs	r0, #0
    421e:	e7fc      	b.n	421a <usbdc_get_str_desc+0x46>
		return false;
    4220:	2000      	movs	r0, #0
    4222:	e7fa      	b.n	421a <usbdc_get_str_desc+0x46>
    4224:	200027ec 	.word	0x200027ec

00004228 <usbdc_get_desc_req>:
{
    4228:	b510      	push	{r4, lr}
	uint8_t type = (uint8_t)(req->wValue >> 8);
    422a:	78cb      	ldrb	r3, [r1, #3]
	switch (type) {
    422c:	2b07      	cmp	r3, #7
    422e:	d812      	bhi.n	4256 <usbdc_get_desc_req+0x2e>
    4230:	009b      	lsls	r3, r3, #2
    4232:	4a0a      	ldr	r2, [pc, #40]	; (425c <usbdc_get_desc_req+0x34>)
    4234:	58d3      	ldr	r3, [r2, r3]
    4236:	469f      	mov	pc, r3
		return usbdc_get_dev_desc(ep, req);
    4238:	f7ff fecc 	bl	3fd4 <usbdc_get_dev_desc>
}
    423c:	bd10      	pop	{r4, pc}
		return usbdc_get_cfg_desc(ep, req);
    423e:	f7ff ff01 	bl	4044 <usbdc_get_cfg_desc>
    4242:	e7fb      	b.n	423c <usbdc_get_desc_req+0x14>
		return usbdc_get_devqual_desc(ep, req);
    4244:	f7ff ff46 	bl	40d4 <usbdc_get_devqual_desc>
    4248:	e7f8      	b.n	423c <usbdc_get_desc_req+0x14>
		return usbdc_get_othspdcfg_desc(ep, req);
    424a:	f7ff ff7b 	bl	4144 <usbdc_get_othspdcfg_desc>
    424e:	e7f5      	b.n	423c <usbdc_get_desc_req+0x14>
		return usbdc_get_str_desc(ep, req);
    4250:	f7ff ffc0 	bl	41d4 <usbdc_get_str_desc>
    4254:	e7f2      	b.n	423c <usbdc_get_desc_req+0x14>
	return false;
    4256:	2000      	movs	r0, #0
    4258:	e7f0      	b.n	423c <usbdc_get_desc_req+0x14>
    425a:	46c0      	nop			; (mov r8, r8)
    425c:	00004b70 	.word	0x00004b70

00004260 <usbdc_get_status_req>:
{
    4260:	b530      	push	{r4, r5, lr}
    4262:	b083      	sub	sp, #12
    4264:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4266:	780a      	ldrb	r2, [r1, #0]
    4268:	231f      	movs	r3, #31
    426a:	4013      	ands	r3, r2
    426c:	b2da      	uxtb	r2, r3
    426e:	2a01      	cmp	r2, #1
    4270:	d903      	bls.n	427a <usbdc_get_status_req+0x1a>
    4272:	2b02      	cmp	r3, #2
    4274:	d012      	beq.n	429c <usbdc_get_status_req+0x3c>
		return false;
    4276:	2000      	movs	r0, #0
    4278:	e00e      	b.n	4298 <usbdc_get_status_req+0x38>
		st = 0;
    427a:	2300      	movs	r3, #0
    427c:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    427e:	4d0d      	ldr	r5, [pc, #52]	; (42b4 <usbdc_get_status_req+0x54>)
    4280:	2202      	movs	r2, #2
    4282:	a901      	add	r1, sp, #4
    4284:	69a8      	ldr	r0, [r5, #24]
    4286:	f000 fa5f 	bl	4748 <memcpy>
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    428a:	69a9      	ldr	r1, [r5, #24]
    428c:	2300      	movs	r3, #0
    428e:	2202      	movs	r2, #2
    4290:	0020      	movs	r0, r4
    4292:	f7ff fdb0 	bl	3df6 <usbdc_xfer>
	return true;
    4296:	2001      	movs	r0, #1
}
    4298:	b003      	add	sp, #12
    429a:	bd30      	pop	{r4, r5, pc}
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    429c:	7908      	ldrb	r0, [r1, #4]
    429e:	2102      	movs	r1, #2
    42a0:	f7fc fc0a 	bl	ab8 <usb_d_ep_halt>
		if (st < 0) {
    42a4:	2800      	cmp	r0, #0
    42a6:	db03      	blt.n	42b0 <usbdc_get_status_req+0x50>
		st = st & 0x1;
    42a8:	2301      	movs	r3, #1
    42aa:	4018      	ands	r0, r3
    42ac:	9001      	str	r0, [sp, #4]
		break;
    42ae:	e7e6      	b.n	427e <usbdc_get_status_req+0x1e>
			return false;
    42b0:	2000      	movs	r0, #0
    42b2:	e7f1      	b.n	4298 <usbdc_get_status_req+0x38>
    42b4:	200027ec 	.word	0x200027ec

000042b8 <usbdc_get_interface>:
{
    42b8:	b570      	push	{r4, r5, r6, lr}
    42ba:	0005      	movs	r5, r0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    42bc:	4b17      	ldr	r3, [pc, #92]	; (431c <usbdc_get_interface+0x64>)
    42be:	695c      	ldr	r4, [r3, #20]
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    42c0:	2221      	movs	r2, #33	; 0x21
    42c2:	5c9a      	ldrb	r2, [r3, r2]
    42c4:	7901      	ldrb	r1, [r0, #4]
    42c6:	7943      	ldrb	r3, [r0, #5]
    42c8:	021b      	lsls	r3, r3, #8
    42ca:	430b      	orrs	r3, r1
    42cc:	411a      	asrs	r2, r3
    42ce:	07d3      	lsls	r3, r2, #31
    42d0:	d50a      	bpl.n	42e8 <usbdc_get_interface+0x30>
	while (NULL != func) {
    42d2:	2c00      	cmp	r4, #0
    42d4:	d01f      	beq.n	4316 <usbdc_get_interface+0x5e>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    42d6:	002a      	movs	r2, r5
    42d8:	2102      	movs	r1, #2
    42da:	0020      	movs	r0, r4
    42dc:	6863      	ldr	r3, [r4, #4]
    42de:	4798      	blx	r3
    42e0:	2800      	cmp	r0, #0
    42e2:	da0d      	bge.n	4300 <usbdc_get_interface+0x48>
			func = func->next;
    42e4:	6824      	ldr	r4, [r4, #0]
    42e6:	e7f4      	b.n	42d2 <usbdc_get_interface+0x1a>
		usbdc.ctrl_buf[0] = 0;
    42e8:	4b0c      	ldr	r3, [pc, #48]	; (431c <usbdc_get_interface+0x64>)
    42ea:	2200      	movs	r2, #0
    42ec:	6999      	ldr	r1, [r3, #24]
    42ee:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    42f0:	6999      	ldr	r1, [r3, #24]
    42f2:	2300      	movs	r3, #0
    42f4:	3201      	adds	r2, #1
    42f6:	2000      	movs	r0, #0
    42f8:	f7ff fd7d 	bl	3df6 <usbdc_xfer>
		return true;
    42fc:	2001      	movs	r0, #1
    42fe:	e00b      	b.n	4318 <usbdc_get_interface+0x60>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    4300:	4b06      	ldr	r3, [pc, #24]	; (431c <usbdc_get_interface+0x64>)
    4302:	699a      	ldr	r2, [r3, #24]
    4304:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    4306:	6999      	ldr	r1, [r3, #24]
    4308:	2300      	movs	r3, #0
    430a:	2201      	movs	r2, #1
    430c:	2000      	movs	r0, #0
    430e:	f7ff fd72 	bl	3df6 <usbdc_xfer>
			return true;
    4312:	2001      	movs	r0, #1
    4314:	e000      	b.n	4318 <usbdc_get_interface+0x60>
	return false;
    4316:	2000      	movs	r0, #0
}
    4318:	bd70      	pop	{r4, r5, r6, pc}
    431a:	46c0      	nop			; (mov r8, r8)
    431c:	200027ec 	.word	0x200027ec

00004320 <usbdc_get_req>:
{
    4320:	b510      	push	{r4, lr}
	switch (req->bRequest) {
    4322:	784b      	ldrb	r3, [r1, #1]
    4324:	2b06      	cmp	r3, #6
    4326:	d00d      	beq.n	4344 <usbdc_get_req+0x24>
    4328:	d907      	bls.n	433a <usbdc_get_req+0x1a>
    432a:	2b08      	cmp	r3, #8
    432c:	d00d      	beq.n	434a <usbdc_get_req+0x2a>
    432e:	2b0a      	cmp	r3, #10
    4330:	d116      	bne.n	4360 <usbdc_get_req+0x40>
		return usbdc_get_interface(req);
    4332:	0008      	movs	r0, r1
    4334:	f7ff ffc0 	bl	42b8 <usbdc_get_interface>
    4338:	e006      	b.n	4348 <usbdc_get_req+0x28>
	switch (req->bRequest) {
    433a:	2b00      	cmp	r3, #0
    433c:	d110      	bne.n	4360 <usbdc_get_req+0x40>
		return usbdc_get_status_req(ep, req);
    433e:	f7ff ff8f 	bl	4260 <usbdc_get_status_req>
    4342:	e001      	b.n	4348 <usbdc_get_req+0x28>
		return usbdc_get_desc_req(ep, req);
    4344:	f7ff ff70 	bl	4228 <usbdc_get_desc_req>
}
    4348:	bd10      	pop	{r4, pc}
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    434a:	4b06      	ldr	r3, [pc, #24]	; (4364 <usbdc_get_req+0x44>)
    434c:	7fda      	ldrb	r2, [r3, #31]
    434e:	6999      	ldr	r1, [r3, #24]
    4350:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    4352:	6999      	ldr	r1, [r3, #24]
    4354:	2300      	movs	r3, #0
    4356:	2201      	movs	r2, #1
    4358:	f7ff fd4d 	bl	3df6 <usbdc_xfer>
		return true;
    435c:	2001      	movs	r0, #1
    435e:	e7f3      	b.n	4348 <usbdc_get_req+0x28>
		return false;
    4360:	2000      	movs	r0, #0
    4362:	e7f1      	b.n	4348 <usbdc_get_req+0x28>
    4364:	200027ec 	.word	0x200027ec

00004368 <usbdc_cb_ctl_req>:
{
    4368:	b570      	push	{r4, r5, r6, lr}
    436a:	0005      	movs	r5, r0
    436c:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    436e:	2200      	movs	r2, #0
    4370:	f7ff fc4a 	bl	3c08 <usbdc_request_handler>
    4374:	1c43      	adds	r3, r0, #1
    4376:	d014      	beq.n	43a2 <usbdc_cb_ctl_req+0x3a>
    4378:	2801      	cmp	r0, #1
    437a:	d013      	beq.n	43a4 <usbdc_cb_ctl_req+0x3c>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    437c:	7823      	ldrb	r3, [r4, #0]
    437e:	221f      	movs	r2, #31
    4380:	4393      	bics	r3, r2
    4382:	d004      	beq.n	438e <usbdc_cb_ctl_req+0x26>
    4384:	b2db      	uxtb	r3, r3
    4386:	2b80      	cmp	r3, #128	; 0x80
    4388:	d006      	beq.n	4398 <usbdc_cb_ctl_req+0x30>
		return false;
    438a:	2000      	movs	r0, #0
    438c:	e00a      	b.n	43a4 <usbdc_cb_ctl_req+0x3c>
		return usbdc_set_req(ep, req);
    438e:	0021      	movs	r1, r4
    4390:	0028      	movs	r0, r5
    4392:	f7ff fde7 	bl	3f64 <usbdc_set_req>
    4396:	e005      	b.n	43a4 <usbdc_cb_ctl_req+0x3c>
		return usbdc_get_req(ep, req);
    4398:	0021      	movs	r1, r4
    439a:	0028      	movs	r0, r5
    439c:	f7ff ffc0 	bl	4320 <usbdc_get_req>
    43a0:	e000      	b.n	43a4 <usbdc_cb_ctl_req+0x3c>
		return false;
    43a2:	2000      	movs	r0, #0
}
    43a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000043a8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    43a8:	b510      	push	{r4, lr}
	switch (type) {
    43aa:	2801      	cmp	r0, #1
    43ac:	d009      	beq.n	43c2 <usbdc_register_handler+0x1a>
    43ae:	2800      	cmp	r0, #0
    43b0:	d002      	beq.n	43b8 <usbdc_register_handler+0x10>
    43b2:	2802      	cmp	r0, #2
    43b4:	d00a      	beq.n	43cc <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    43b6:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    43b8:	4807      	ldr	r0, [pc, #28]	; (43d8 <usbdc_register_handler+0x30>)
    43ba:	3008      	adds	r0, #8
    43bc:	f7fc fbe2 	bl	b84 <list_insert_at_end>
		break;
    43c0:	e7f9      	b.n	43b6 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    43c2:	4805      	ldr	r0, [pc, #20]	; (43d8 <usbdc_register_handler+0x30>)
    43c4:	300c      	adds	r0, #12
    43c6:	f7fc fbdd 	bl	b84 <list_insert_at_end>
		break;
    43ca:	e7f4      	b.n	43b6 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    43cc:	4802      	ldr	r0, [pc, #8]	; (43d8 <usbdc_register_handler+0x30>)
    43ce:	3010      	adds	r0, #16
    43d0:	f7fc fbd8 	bl	b84 <list_insert_at_end>
}
    43d4:	e7ef      	b.n	43b6 <usbdc_register_handler+0xe>
    43d6:	46c0      	nop			; (mov r8, r8)
    43d8:	200027ec 	.word	0x200027ec

000043dc <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    43dc:	b570      	push	{r4, r5, r6, lr}
    43de:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    43e0:	1e43      	subs	r3, r0, #1
    43e2:	4198      	sbcs	r0, r3
    43e4:	b2c0      	uxtb	r0, r0
    43e6:	4a0c      	ldr	r2, [pc, #48]	; (4418 <usbdc_init+0x3c>)
    43e8:	490c      	ldr	r1, [pc, #48]	; (441c <usbdc_init+0x40>)
    43ea:	f7fc fbbb 	bl	b64 <assert>

	int32_t rc;

	rc = usb_d_init();
    43ee:	f7fc fa2f 	bl	850 <usb_d_init>
	if (rc < 0) {
    43f2:	2800      	cmp	r0, #0
    43f4:	db0f      	blt.n	4416 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    43f6:	4d0a      	ldr	r5, [pc, #40]	; (4420 <usbdc_init+0x44>)
    43f8:	2224      	movs	r2, #36	; 0x24
    43fa:	2100      	movs	r1, #0
    43fc:	0028      	movs	r0, r5
    43fe:	f000 f9e5 	bl	47cc <memset>
	usbdc.ctrl_buf = ctrl_buf;
    4402:	61ac      	str	r4, [r5, #24]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    4404:	4907      	ldr	r1, [pc, #28]	; (4424 <usbdc_init+0x48>)
    4406:	2000      	movs	r0, #0
    4408:	f7fc fa54 	bl	8b4 <usb_d_register_callback>
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    440c:	4906      	ldr	r1, [pc, #24]	; (4428 <usbdc_init+0x4c>)
    440e:	2001      	movs	r0, #1
    4410:	f7fc fa50 	bl	8b4 <usb_d_register_callback>

	return 0;
    4414:	2000      	movs	r0, #0
}
    4416:	bd70      	pop	{r4, r5, r6, pc}
    4418:	00000355 	.word	0x00000355
    441c:	00004b90 	.word	0x00004b90
    4420:	200027ec 	.word	0x200027ec
    4424:	00003c45 	.word	0x00003c45
    4428:	00003ddd 	.word	0x00003ddd

0000442c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    442c:	b510      	push	{r4, lr}
    442e:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    4430:	4802      	ldr	r0, [pc, #8]	; (443c <usbdc_register_function+0x10>)
    4432:	3014      	adds	r0, #20
    4434:	f7fc fba6 	bl	b84 <list_insert_at_end>
}
    4438:	bd10      	pop	{r4, pc}
    443a:	46c0      	nop			; (mov r8, r8)
    443c:	200027ec 	.word	0x200027ec

00004440 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    4440:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    4442:	4b0d      	ldr	r3, [pc, #52]	; (4478 <usbdc_start+0x38>)
    4444:	7f9b      	ldrb	r3, [r3, #30]
    4446:	2b00      	cmp	r3, #0
    4448:	d110      	bne.n	446c <usbdc_start+0x2c>
		return ERR_BUSY;
	}

	if (desces) {
    444a:	2800      	cmp	r0, #0
    444c:	d011      	beq.n	4472 <usbdc_start+0x32>
		usbdc.desces.ls_fs = desces;
    444e:	4b0a      	ldr	r3, [pc, #40]	; (4478 <usbdc_start+0x38>)
    4450:	6018      	str	r0, [r3, #0]
#if CONF_USBD_HS_SP
		usbdc.desces.hs = &desces[1];
    4452:	0002      	movs	r2, r0
    4454:	3208      	adds	r2, #8
    4456:	605a      	str	r2, [r3, #4]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    4458:	6802      	ldr	r2, [r0, #0]
    445a:	79d1      	ldrb	r1, [r2, #7]
    445c:	2220      	movs	r2, #32
    445e:	5499      	strb	r1, [r3, r2]
	usbdc.state     = USBD_S_POWER;
    4460:	3a1f      	subs	r2, #31
    4462:	779a      	strb	r2, [r3, #30]
	usb_d_enable();
    4464:	f7fc fa2a 	bl	8bc <usb_d_enable>
	return ERR_NONE;
    4468:	2000      	movs	r0, #0
}
    446a:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    446c:	2004      	movs	r0, #4
    446e:	4240      	negs	r0, r0
    4470:	e7fb      	b.n	446a <usbdc_start+0x2a>
		return ERR_BAD_DATA;
    4472:	2009      	movs	r0, #9
    4474:	4240      	negs	r0, r0
    4476:	e7f8      	b.n	446a <usbdc_start+0x2a>
    4478:	200027ec 	.word	0x200027ec

0000447c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    447c:	b510      	push	{r4, lr}
	usb_d_attach();
    447e:	f7fc fa21 	bl	8c4 <usb_d_attach>
}
    4482:	bd10      	pop	{r4, pc}

00004484 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    4484:	4b01      	ldr	r3, [pc, #4]	; (448c <usbdc_get_ctrl_buffer+0x8>)
    4486:	6998      	ldr	r0, [r3, #24]
}
    4488:	4770      	bx	lr
    448a:	46c0      	nop			; (mov r8, r8)
    448c:	200027ec 	.word	0x200027ec

00004490 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    4490:	4b02      	ldr	r3, [pc, #8]	; (449c <usbdc_get_state+0xc>)
    4492:	7f98      	ldrb	r0, [r3, #30]
    4494:	06c3      	lsls	r3, r0, #27
    4496:	d500      	bpl.n	449a <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    4498:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    449a:	4770      	bx	lr
    449c:	200027ec 	.word	0x200027ec

000044a0 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    44a0:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    44a2:	4288      	cmp	r0, r1
    44a4:	d207      	bcs.n	44b6 <usb_find_desc+0x16>
	return desc[0];
    44a6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    44a8:	2b01      	cmp	r3, #1
    44aa:	d906      	bls.n	44ba <usb_find_desc+0x1a>
	return desc[1];
    44ac:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    44ae:	4294      	cmp	r4, r2
    44b0:	d002      	beq.n	44b8 <usb_find_desc+0x18>
	return (desc + usb_desc_len(desc));
    44b2:	18c0      	adds	r0, r0, r3
    44b4:	e7f5      	b.n	44a2 <usb_find_desc+0x2>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    44b6:	2000      	movs	r0, #0
}
    44b8:	bd10      	pop	{r4, pc}
		_desc_len_check();
    44ba:	2000      	movs	r0, #0
    44bc:	e7fc      	b.n	44b8 <usb_find_desc+0x18>

000044be <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    44be:	4288      	cmp	r0, r1
    44c0:	d209      	bcs.n	44d6 <usb_find_ep_desc+0x18>
	return desc[0];
    44c2:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    44c4:	2b01      	cmp	r3, #1
    44c6:	d908      	bls.n	44da <usb_find_ep_desc+0x1c>
	return desc[1];
    44c8:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    44ca:	2a04      	cmp	r2, #4
    44cc:	d007      	beq.n	44de <usb_find_ep_desc+0x20>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    44ce:	2a05      	cmp	r2, #5
    44d0:	d002      	beq.n	44d8 <usb_find_ep_desc+0x1a>
	return (desc + usb_desc_len(desc));
    44d2:	18c0      	adds	r0, r0, r3
    44d4:	e7f3      	b.n	44be <usb_find_ep_desc>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    44d6:	2000      	movs	r0, #0
}
    44d8:	4770      	bx	lr
		_desc_len_check();
    44da:	2000      	movs	r0, #0
    44dc:	e7fc      	b.n	44d8 <usb_find_ep_desc+0x1a>
	return NULL;
    44de:	2000      	movs	r0, #0
    44e0:	e7fa      	b.n	44d8 <usb_find_ep_desc+0x1a>

000044e2 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    44e2:	b570      	push	{r4, r5, r6, lr}
    44e4:	000c      	movs	r4, r1
    44e6:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    44e8:	2202      	movs	r2, #2
    44ea:	f7ff ffd9 	bl	44a0 <usb_find_desc>
	if (!desc) {
    44ee:	2800      	cmp	r0, #0
    44f0:	d012      	beq.n	4518 <usb_find_cfg_desc+0x36>
		return NULL;
	}
	while (desc < eof) {
    44f2:	42a0      	cmp	r0, r4
    44f4:	d20f      	bcs.n	4516 <usb_find_cfg_desc+0x34>
	return desc[0];
    44f6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    44f8:	2b01      	cmp	r3, #1
    44fa:	d90e      	bls.n	451a <usb_find_cfg_desc+0x38>
		if (desc[1] != USB_DT_CONFIG) {
    44fc:	7843      	ldrb	r3, [r0, #1]
    44fe:	2b02      	cmp	r3, #2
    4500:	d10d      	bne.n	451e <usb_find_cfg_desc+0x3c>
			break;
		}
		if (desc[5] == cfg_value) {
    4502:	7943      	ldrb	r3, [r0, #5]
    4504:	42ab      	cmp	r3, r5
    4506:	d007      	beq.n	4518 <usb_find_cfg_desc+0x36>
	return (ptr[0] + (ptr[1] << 8));
    4508:	7883      	ldrb	r3, [r0, #2]
    450a:	78c2      	ldrb	r2, [r0, #3]
    450c:	0212      	lsls	r2, r2, #8
    450e:	189b      	adds	r3, r3, r2
    4510:	b29b      	uxth	r3, r3
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    4512:	18c0      	adds	r0, r0, r3
    4514:	e7ed      	b.n	44f2 <usb_find_cfg_desc+0x10>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    4516:	2000      	movs	r0, #0
}
    4518:	bd70      	pop	{r4, r5, r6, pc}
		_desc_len_check();
    451a:	2000      	movs	r0, #0
    451c:	e7fc      	b.n	4518 <usb_find_cfg_desc+0x36>
	return NULL;
    451e:	2000      	movs	r0, #0
    4520:	e7fa      	b.n	4518 <usb_find_cfg_desc+0x36>

00004522 <usb_find_othspdcfg_desc>:

uint8_t *usb_find_othspdcfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    4522:	b570      	push	{r4, r5, r6, lr}
    4524:	000c      	movs	r4, r1
    4526:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_OTHER_SPEED_CONFIG);
    4528:	2207      	movs	r2, #7
    452a:	f7ff ffb9 	bl	44a0 <usb_find_desc>
	if (!desc) {
    452e:	2800      	cmp	r0, #0
    4530:	d012      	beq.n	4558 <usb_find_othspdcfg_desc+0x36>
		return NULL;
	}
	while (desc < eof) {
    4532:	42a0      	cmp	r0, r4
    4534:	d20f      	bcs.n	4556 <usb_find_othspdcfg_desc+0x34>
	return desc[0];
    4536:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4538:	2b01      	cmp	r3, #1
    453a:	d90e      	bls.n	455a <usb_find_othspdcfg_desc+0x38>
		if (desc[1] != USB_DT_OTHER_SPEED_CONFIG) {
    453c:	7843      	ldrb	r3, [r0, #1]
    453e:	2b07      	cmp	r3, #7
    4540:	d10d      	bne.n	455e <usb_find_othspdcfg_desc+0x3c>
			break;
		}
		if (desc[5] == cfg_value) {
    4542:	7943      	ldrb	r3, [r0, #5]
    4544:	42ab      	cmp	r3, r5
    4546:	d007      	beq.n	4558 <usb_find_othspdcfg_desc+0x36>
	return (ptr[0] + (ptr[1] << 8));
    4548:	7883      	ldrb	r3, [r0, #2]
    454a:	78c2      	ldrb	r2, [r0, #3]
    454c:	0212      	lsls	r2, r2, #8
    454e:	189b      	adds	r3, r3, r2
    4550:	b29b      	uxth	r3, r3
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    4552:	18c0      	adds	r0, r0, r3
    4554:	e7ed      	b.n	4532 <usb_find_othspdcfg_desc+0x10>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    4556:	2000      	movs	r0, #0
}
    4558:	bd70      	pop	{r4, r5, r6, pc}
		_desc_len_check();
    455a:	2000      	movs	r0, #0
    455c:	e7fc      	b.n	4558 <usb_find_othspdcfg_desc+0x36>
	return NULL;
    455e:	2000      	movs	r0, #0
    4560:	e7fa      	b.n	4558 <usb_find_othspdcfg_desc+0x36>

00004562 <usb_find_str_desc>:

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    4562:	b570      	push	{r4, r5, r6, lr}
    4564:	000d      	movs	r5, r1
    4566:	0016      	movs	r6, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    4568:	2400      	movs	r4, #0
    456a:	42a8      	cmp	r0, r5
    456c:	d20e      	bcs.n	458c <usb_find_str_desc+0x2a>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    456e:	2203      	movs	r2, #3
    4570:	0029      	movs	r1, r5
    4572:	f7ff ff95 	bl	44a0 <usb_find_desc>
		if (desc) {
    4576:	2800      	cmp	r0, #0
    4578:	d009      	beq.n	458e <usb_find_str_desc+0x2c>
	return desc[0];
    457a:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    457c:	2b01      	cmp	r3, #1
    457e:	d907      	bls.n	4590 <usb_find_str_desc+0x2e>
			if (i == str_index) {
    4580:	42b4      	cmp	r4, r6
    4582:	d004      	beq.n	458e <usb_find_str_desc+0x2c>
				return desc;
			}
			i++;
    4584:	3401      	adds	r4, #1
    4586:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    4588:	18c0      	adds	r0, r0, r3
    458a:	e7ee      	b.n	456a <usb_find_str_desc+0x8>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    458c:	2000      	movs	r0, #0
}
    458e:	bd70      	pop	{r4, r5, r6, pc}
			_desc_len_check();
    4590:	2000      	movs	r0, #0
    4592:	e7fc      	b.n	458e <usb_find_str_desc+0x2c>

00004594 <__udivsi3>:
    4594:	2200      	movs	r2, #0
    4596:	0843      	lsrs	r3, r0, #1
    4598:	428b      	cmp	r3, r1
    459a:	d374      	bcc.n	4686 <__udivsi3+0xf2>
    459c:	0903      	lsrs	r3, r0, #4
    459e:	428b      	cmp	r3, r1
    45a0:	d35f      	bcc.n	4662 <__udivsi3+0xce>
    45a2:	0a03      	lsrs	r3, r0, #8
    45a4:	428b      	cmp	r3, r1
    45a6:	d344      	bcc.n	4632 <__udivsi3+0x9e>
    45a8:	0b03      	lsrs	r3, r0, #12
    45aa:	428b      	cmp	r3, r1
    45ac:	d328      	bcc.n	4600 <__udivsi3+0x6c>
    45ae:	0c03      	lsrs	r3, r0, #16
    45b0:	428b      	cmp	r3, r1
    45b2:	d30d      	bcc.n	45d0 <__udivsi3+0x3c>
    45b4:	22ff      	movs	r2, #255	; 0xff
    45b6:	0209      	lsls	r1, r1, #8
    45b8:	ba12      	rev	r2, r2
    45ba:	0c03      	lsrs	r3, r0, #16
    45bc:	428b      	cmp	r3, r1
    45be:	d302      	bcc.n	45c6 <__udivsi3+0x32>
    45c0:	1212      	asrs	r2, r2, #8
    45c2:	0209      	lsls	r1, r1, #8
    45c4:	d065      	beq.n	4692 <__udivsi3+0xfe>
    45c6:	0b03      	lsrs	r3, r0, #12
    45c8:	428b      	cmp	r3, r1
    45ca:	d319      	bcc.n	4600 <__udivsi3+0x6c>
    45cc:	e000      	b.n	45d0 <__udivsi3+0x3c>
    45ce:	0a09      	lsrs	r1, r1, #8
    45d0:	0bc3      	lsrs	r3, r0, #15
    45d2:	428b      	cmp	r3, r1
    45d4:	d301      	bcc.n	45da <__udivsi3+0x46>
    45d6:	03cb      	lsls	r3, r1, #15
    45d8:	1ac0      	subs	r0, r0, r3
    45da:	4152      	adcs	r2, r2
    45dc:	0b83      	lsrs	r3, r0, #14
    45de:	428b      	cmp	r3, r1
    45e0:	d301      	bcc.n	45e6 <__udivsi3+0x52>
    45e2:	038b      	lsls	r3, r1, #14
    45e4:	1ac0      	subs	r0, r0, r3
    45e6:	4152      	adcs	r2, r2
    45e8:	0b43      	lsrs	r3, r0, #13
    45ea:	428b      	cmp	r3, r1
    45ec:	d301      	bcc.n	45f2 <__udivsi3+0x5e>
    45ee:	034b      	lsls	r3, r1, #13
    45f0:	1ac0      	subs	r0, r0, r3
    45f2:	4152      	adcs	r2, r2
    45f4:	0b03      	lsrs	r3, r0, #12
    45f6:	428b      	cmp	r3, r1
    45f8:	d301      	bcc.n	45fe <__udivsi3+0x6a>
    45fa:	030b      	lsls	r3, r1, #12
    45fc:	1ac0      	subs	r0, r0, r3
    45fe:	4152      	adcs	r2, r2
    4600:	0ac3      	lsrs	r3, r0, #11
    4602:	428b      	cmp	r3, r1
    4604:	d301      	bcc.n	460a <__udivsi3+0x76>
    4606:	02cb      	lsls	r3, r1, #11
    4608:	1ac0      	subs	r0, r0, r3
    460a:	4152      	adcs	r2, r2
    460c:	0a83      	lsrs	r3, r0, #10
    460e:	428b      	cmp	r3, r1
    4610:	d301      	bcc.n	4616 <__udivsi3+0x82>
    4612:	028b      	lsls	r3, r1, #10
    4614:	1ac0      	subs	r0, r0, r3
    4616:	4152      	adcs	r2, r2
    4618:	0a43      	lsrs	r3, r0, #9
    461a:	428b      	cmp	r3, r1
    461c:	d301      	bcc.n	4622 <__udivsi3+0x8e>
    461e:	024b      	lsls	r3, r1, #9
    4620:	1ac0      	subs	r0, r0, r3
    4622:	4152      	adcs	r2, r2
    4624:	0a03      	lsrs	r3, r0, #8
    4626:	428b      	cmp	r3, r1
    4628:	d301      	bcc.n	462e <__udivsi3+0x9a>
    462a:	020b      	lsls	r3, r1, #8
    462c:	1ac0      	subs	r0, r0, r3
    462e:	4152      	adcs	r2, r2
    4630:	d2cd      	bcs.n	45ce <__udivsi3+0x3a>
    4632:	09c3      	lsrs	r3, r0, #7
    4634:	428b      	cmp	r3, r1
    4636:	d301      	bcc.n	463c <__udivsi3+0xa8>
    4638:	01cb      	lsls	r3, r1, #7
    463a:	1ac0      	subs	r0, r0, r3
    463c:	4152      	adcs	r2, r2
    463e:	0983      	lsrs	r3, r0, #6
    4640:	428b      	cmp	r3, r1
    4642:	d301      	bcc.n	4648 <__udivsi3+0xb4>
    4644:	018b      	lsls	r3, r1, #6
    4646:	1ac0      	subs	r0, r0, r3
    4648:	4152      	adcs	r2, r2
    464a:	0943      	lsrs	r3, r0, #5
    464c:	428b      	cmp	r3, r1
    464e:	d301      	bcc.n	4654 <__udivsi3+0xc0>
    4650:	014b      	lsls	r3, r1, #5
    4652:	1ac0      	subs	r0, r0, r3
    4654:	4152      	adcs	r2, r2
    4656:	0903      	lsrs	r3, r0, #4
    4658:	428b      	cmp	r3, r1
    465a:	d301      	bcc.n	4660 <__udivsi3+0xcc>
    465c:	010b      	lsls	r3, r1, #4
    465e:	1ac0      	subs	r0, r0, r3
    4660:	4152      	adcs	r2, r2
    4662:	08c3      	lsrs	r3, r0, #3
    4664:	428b      	cmp	r3, r1
    4666:	d301      	bcc.n	466c <__udivsi3+0xd8>
    4668:	00cb      	lsls	r3, r1, #3
    466a:	1ac0      	subs	r0, r0, r3
    466c:	4152      	adcs	r2, r2
    466e:	0883      	lsrs	r3, r0, #2
    4670:	428b      	cmp	r3, r1
    4672:	d301      	bcc.n	4678 <__udivsi3+0xe4>
    4674:	008b      	lsls	r3, r1, #2
    4676:	1ac0      	subs	r0, r0, r3
    4678:	4152      	adcs	r2, r2
    467a:	0843      	lsrs	r3, r0, #1
    467c:	428b      	cmp	r3, r1
    467e:	d301      	bcc.n	4684 <__udivsi3+0xf0>
    4680:	004b      	lsls	r3, r1, #1
    4682:	1ac0      	subs	r0, r0, r3
    4684:	4152      	adcs	r2, r2
    4686:	1a41      	subs	r1, r0, r1
    4688:	d200      	bcs.n	468c <__udivsi3+0xf8>
    468a:	4601      	mov	r1, r0
    468c:	4152      	adcs	r2, r2
    468e:	4610      	mov	r0, r2
    4690:	4770      	bx	lr
    4692:	e7ff      	b.n	4694 <__udivsi3+0x100>
    4694:	b501      	push	{r0, lr}
    4696:	2000      	movs	r0, #0
    4698:	f000 f806 	bl	46a8 <__aeabi_idiv0>
    469c:	bd02      	pop	{r1, pc}
    469e:	46c0      	nop			; (mov r8, r8)

000046a0 <__aeabi_uidivmod>:
    46a0:	2900      	cmp	r1, #0
    46a2:	d0f7      	beq.n	4694 <__udivsi3+0x100>
    46a4:	e776      	b.n	4594 <__udivsi3>
    46a6:	4770      	bx	lr

000046a8 <__aeabi_idiv0>:
    46a8:	4770      	bx	lr
    46aa:	46c0      	nop			; (mov r8, r8)

000046ac <__ffssi2>:
    46ac:	b510      	push	{r4, lr}
    46ae:	2300      	movs	r3, #0
    46b0:	2800      	cmp	r0, #0
    46b2:	d002      	beq.n	46ba <__ffssi2+0xe>
    46b4:	f000 f804 	bl	46c0 <__ctzsi2>
    46b8:	1c43      	adds	r3, r0, #1
    46ba:	0018      	movs	r0, r3
    46bc:	bd10      	pop	{r4, pc}
    46be:	46c0      	nop			; (mov r8, r8)

000046c0 <__ctzsi2>:
    46c0:	4241      	negs	r1, r0
    46c2:	4008      	ands	r0, r1
    46c4:	211c      	movs	r1, #28
    46c6:	2301      	movs	r3, #1
    46c8:	041b      	lsls	r3, r3, #16
    46ca:	4298      	cmp	r0, r3
    46cc:	d301      	bcc.n	46d2 <__ctzsi2+0x12>
    46ce:	0c00      	lsrs	r0, r0, #16
    46d0:	3910      	subs	r1, #16
    46d2:	0a1b      	lsrs	r3, r3, #8
    46d4:	4298      	cmp	r0, r3
    46d6:	d301      	bcc.n	46dc <__ctzsi2+0x1c>
    46d8:	0a00      	lsrs	r0, r0, #8
    46da:	3908      	subs	r1, #8
    46dc:	091b      	lsrs	r3, r3, #4
    46de:	4298      	cmp	r0, r3
    46e0:	d301      	bcc.n	46e6 <__ctzsi2+0x26>
    46e2:	0900      	lsrs	r0, r0, #4
    46e4:	3904      	subs	r1, #4
    46e6:	a202      	add	r2, pc, #8	; (adr r2, 46f0 <__ctzsi2+0x30>)
    46e8:	5c10      	ldrb	r0, [r2, r0]
    46ea:	1a40      	subs	r0, r0, r1
    46ec:	4770      	bx	lr
    46ee:	46c0      	nop			; (mov r8, r8)
    46f0:	1d1d1c1b 	.word	0x1d1d1c1b
    46f4:	1e1e1e1e 	.word	0x1e1e1e1e
    46f8:	1f1f1f1f 	.word	0x1f1f1f1f
    46fc:	1f1f1f1f 	.word	0x1f1f1f1f

00004700 <__libc_init_array>:
    4700:	b570      	push	{r4, r5, r6, lr}
    4702:	4e0d      	ldr	r6, [pc, #52]	; (4738 <__libc_init_array+0x38>)
    4704:	4d0d      	ldr	r5, [pc, #52]	; (473c <__libc_init_array+0x3c>)
    4706:	2400      	movs	r4, #0
    4708:	1bad      	subs	r5, r5, r6
    470a:	10ad      	asrs	r5, r5, #2
    470c:	d005      	beq.n	471a <__libc_init_array+0x1a>
    470e:	00a3      	lsls	r3, r4, #2
    4710:	58f3      	ldr	r3, [r6, r3]
    4712:	3401      	adds	r4, #1
    4714:	4798      	blx	r3
    4716:	42a5      	cmp	r5, r4
    4718:	d1f9      	bne.n	470e <__libc_init_array+0xe>
    471a:	f000 fa47 	bl	4bac <_init>
    471e:	4e08      	ldr	r6, [pc, #32]	; (4740 <__libc_init_array+0x40>)
    4720:	4d08      	ldr	r5, [pc, #32]	; (4744 <__libc_init_array+0x44>)
    4722:	2400      	movs	r4, #0
    4724:	1bad      	subs	r5, r5, r6
    4726:	10ad      	asrs	r5, r5, #2
    4728:	d005      	beq.n	4736 <__libc_init_array+0x36>
    472a:	00a3      	lsls	r3, r4, #2
    472c:	58f3      	ldr	r3, [r6, r3]
    472e:	3401      	adds	r4, #1
    4730:	4798      	blx	r3
    4732:	42a5      	cmp	r5, r4
    4734:	d1f9      	bne.n	472a <__libc_init_array+0x2a>
    4736:	bd70      	pop	{r4, r5, r6, pc}
    4738:	00004bb8 	.word	0x00004bb8
    473c:	00004bb8 	.word	0x00004bb8
    4740:	00004bb8 	.word	0x00004bb8
    4744:	00004bc0 	.word	0x00004bc0

00004748 <memcpy>:
    4748:	b5f0      	push	{r4, r5, r6, r7, lr}
    474a:	0005      	movs	r5, r0
    474c:	2a0f      	cmp	r2, #15
    474e:	d92f      	bls.n	47b0 <memcpy+0x68>
    4750:	000b      	movs	r3, r1
    4752:	4303      	orrs	r3, r0
    4754:	079b      	lsls	r3, r3, #30
    4756:	d134      	bne.n	47c2 <memcpy+0x7a>
    4758:	0016      	movs	r6, r2
    475a:	000c      	movs	r4, r1
    475c:	0003      	movs	r3, r0
    475e:	3e10      	subs	r6, #16
    4760:	0935      	lsrs	r5, r6, #4
    4762:	3501      	adds	r5, #1
    4764:	012d      	lsls	r5, r5, #4
    4766:	1945      	adds	r5, r0, r5
    4768:	6827      	ldr	r7, [r4, #0]
    476a:	601f      	str	r7, [r3, #0]
    476c:	6867      	ldr	r7, [r4, #4]
    476e:	605f      	str	r7, [r3, #4]
    4770:	68a7      	ldr	r7, [r4, #8]
    4772:	609f      	str	r7, [r3, #8]
    4774:	68e7      	ldr	r7, [r4, #12]
    4776:	3410      	adds	r4, #16
    4778:	60df      	str	r7, [r3, #12]
    477a:	3310      	adds	r3, #16
    477c:	429d      	cmp	r5, r3
    477e:	d1f3      	bne.n	4768 <memcpy+0x20>
    4780:	230f      	movs	r3, #15
    4782:	439e      	bics	r6, r3
    4784:	3610      	adds	r6, #16
    4786:	1985      	adds	r5, r0, r6
    4788:	1989      	adds	r1, r1, r6
    478a:	4013      	ands	r3, r2
    478c:	2b03      	cmp	r3, #3
    478e:	d91a      	bls.n	47c6 <memcpy+0x7e>
    4790:	1f1e      	subs	r6, r3, #4
    4792:	2300      	movs	r3, #0
    4794:	08b4      	lsrs	r4, r6, #2
    4796:	3401      	adds	r4, #1
    4798:	00a4      	lsls	r4, r4, #2
    479a:	58cf      	ldr	r7, [r1, r3]
    479c:	50ef      	str	r7, [r5, r3]
    479e:	3304      	adds	r3, #4
    47a0:	42a3      	cmp	r3, r4
    47a2:	d1fa      	bne.n	479a <memcpy+0x52>
    47a4:	2403      	movs	r4, #3
    47a6:	43a6      	bics	r6, r4
    47a8:	1d33      	adds	r3, r6, #4
    47aa:	4022      	ands	r2, r4
    47ac:	18c9      	adds	r1, r1, r3
    47ae:	18ed      	adds	r5, r5, r3
    47b0:	2a00      	cmp	r2, #0
    47b2:	d005      	beq.n	47c0 <memcpy+0x78>
    47b4:	2300      	movs	r3, #0
    47b6:	5ccc      	ldrb	r4, [r1, r3]
    47b8:	54ec      	strb	r4, [r5, r3]
    47ba:	3301      	adds	r3, #1
    47bc:	4293      	cmp	r3, r2
    47be:	d1fa      	bne.n	47b6 <memcpy+0x6e>
    47c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47c2:	0005      	movs	r5, r0
    47c4:	e7f6      	b.n	47b4 <memcpy+0x6c>
    47c6:	001a      	movs	r2, r3
    47c8:	e7f2      	b.n	47b0 <memcpy+0x68>
    47ca:	46c0      	nop			; (mov r8, r8)

000047cc <memset>:
    47cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    47ce:	0783      	lsls	r3, r0, #30
    47d0:	d043      	beq.n	485a <memset+0x8e>
    47d2:	1e54      	subs	r4, r2, #1
    47d4:	2a00      	cmp	r2, #0
    47d6:	d03f      	beq.n	4858 <memset+0x8c>
    47d8:	b2ce      	uxtb	r6, r1
    47da:	0002      	movs	r2, r0
    47dc:	2503      	movs	r5, #3
    47de:	e002      	b.n	47e6 <memset+0x1a>
    47e0:	001a      	movs	r2, r3
    47e2:	3c01      	subs	r4, #1
    47e4:	d338      	bcc.n	4858 <memset+0x8c>
    47e6:	1c53      	adds	r3, r2, #1
    47e8:	7016      	strb	r6, [r2, #0]
    47ea:	422b      	tst	r3, r5
    47ec:	d1f8      	bne.n	47e0 <memset+0x14>
    47ee:	2c03      	cmp	r4, #3
    47f0:	d92a      	bls.n	4848 <memset+0x7c>
    47f2:	22ff      	movs	r2, #255	; 0xff
    47f4:	400a      	ands	r2, r1
    47f6:	0215      	lsls	r5, r2, #8
    47f8:	4315      	orrs	r5, r2
    47fa:	042a      	lsls	r2, r5, #16
    47fc:	4315      	orrs	r5, r2
    47fe:	2c0f      	cmp	r4, #15
    4800:	d914      	bls.n	482c <memset+0x60>
    4802:	0027      	movs	r7, r4
    4804:	001a      	movs	r2, r3
    4806:	3f10      	subs	r7, #16
    4808:	093e      	lsrs	r6, r7, #4
    480a:	3601      	adds	r6, #1
    480c:	0136      	lsls	r6, r6, #4
    480e:	199e      	adds	r6, r3, r6
    4810:	6015      	str	r5, [r2, #0]
    4812:	6055      	str	r5, [r2, #4]
    4814:	6095      	str	r5, [r2, #8]
    4816:	60d5      	str	r5, [r2, #12]
    4818:	3210      	adds	r2, #16
    481a:	4296      	cmp	r6, r2
    481c:	d1f8      	bne.n	4810 <memset+0x44>
    481e:	220f      	movs	r2, #15
    4820:	4397      	bics	r7, r2
    4822:	3710      	adds	r7, #16
    4824:	19db      	adds	r3, r3, r7
    4826:	4014      	ands	r4, r2
    4828:	2c03      	cmp	r4, #3
    482a:	d90d      	bls.n	4848 <memset+0x7c>
    482c:	001a      	movs	r2, r3
    482e:	1f27      	subs	r7, r4, #4
    4830:	08be      	lsrs	r6, r7, #2
    4832:	3601      	adds	r6, #1
    4834:	00b6      	lsls	r6, r6, #2
    4836:	199e      	adds	r6, r3, r6
    4838:	c220      	stmia	r2!, {r5}
    483a:	42b2      	cmp	r2, r6
    483c:	d1fc      	bne.n	4838 <memset+0x6c>
    483e:	2203      	movs	r2, #3
    4840:	4397      	bics	r7, r2
    4842:	3704      	adds	r7, #4
    4844:	19db      	adds	r3, r3, r7
    4846:	4014      	ands	r4, r2
    4848:	2c00      	cmp	r4, #0
    484a:	d005      	beq.n	4858 <memset+0x8c>
    484c:	b2c9      	uxtb	r1, r1
    484e:	191c      	adds	r4, r3, r4
    4850:	7019      	strb	r1, [r3, #0]
    4852:	3301      	adds	r3, #1
    4854:	429c      	cmp	r4, r3
    4856:	d1fb      	bne.n	4850 <memset+0x84>
    4858:	bdf0      	pop	{r4, r5, r6, r7, pc}
    485a:	0014      	movs	r4, r2
    485c:	0003      	movs	r3, r0
    485e:	e7c6      	b.n	47ee <memset+0x22>

00004860 <register_fini>:
    4860:	4b03      	ldr	r3, [pc, #12]	; (4870 <register_fini+0x10>)
    4862:	b510      	push	{r4, lr}
    4864:	2b00      	cmp	r3, #0
    4866:	d002      	beq.n	486e <register_fini+0xe>
    4868:	4802      	ldr	r0, [pc, #8]	; (4874 <register_fini+0x14>)
    486a:	f000 f805 	bl	4878 <atexit>
    486e:	bd10      	pop	{r4, pc}
    4870:	00000000 	.word	0x00000000
    4874:	00004889 	.word	0x00004889

00004878 <atexit>:
    4878:	b510      	push	{r4, lr}
    487a:	0001      	movs	r1, r0
    487c:	2300      	movs	r3, #0
    487e:	2200      	movs	r2, #0
    4880:	2000      	movs	r0, #0
    4882:	f000 f81f 	bl	48c4 <__register_exitproc>
    4886:	bd10      	pop	{r4, pc}

00004888 <__libc_fini_array>:
    4888:	b570      	push	{r4, r5, r6, lr}
    488a:	4b09      	ldr	r3, [pc, #36]	; (48b0 <__libc_fini_array+0x28>)
    488c:	4c09      	ldr	r4, [pc, #36]	; (48b4 <__libc_fini_array+0x2c>)
    488e:	1ae4      	subs	r4, r4, r3
    4890:	10a4      	asrs	r4, r4, #2
    4892:	d009      	beq.n	48a8 <__libc_fini_array+0x20>
    4894:	4a08      	ldr	r2, [pc, #32]	; (48b8 <__libc_fini_array+0x30>)
    4896:	18a5      	adds	r5, r4, r2
    4898:	00ad      	lsls	r5, r5, #2
    489a:	18ed      	adds	r5, r5, r3
    489c:	682b      	ldr	r3, [r5, #0]
    489e:	3c01      	subs	r4, #1
    48a0:	4798      	blx	r3
    48a2:	3d04      	subs	r5, #4
    48a4:	2c00      	cmp	r4, #0
    48a6:	d1f9      	bne.n	489c <__libc_fini_array+0x14>
    48a8:	f000 f98a 	bl	4bc0 <_fini>
    48ac:	bd70      	pop	{r4, r5, r6, pc}
    48ae:	46c0      	nop			; (mov r8, r8)
    48b0:	00004bcc 	.word	0x00004bcc
    48b4:	00004bd0 	.word	0x00004bd0
    48b8:	3fffffff 	.word	0x3fffffff

000048bc <__retarget_lock_acquire_recursive>:
    48bc:	4770      	bx	lr
    48be:	46c0      	nop			; (mov r8, r8)

000048c0 <__retarget_lock_release_recursive>:
    48c0:	4770      	bx	lr
    48c2:	46c0      	nop			; (mov r8, r8)

000048c4 <__register_exitproc>:
    48c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    48c6:	464e      	mov	r6, r9
    48c8:	4645      	mov	r5, r8
    48ca:	46de      	mov	lr, fp
    48cc:	4657      	mov	r7, sl
    48ce:	b5e0      	push	{r5, r6, r7, lr}
    48d0:	4d36      	ldr	r5, [pc, #216]	; (49ac <__register_exitproc+0xe8>)
    48d2:	b083      	sub	sp, #12
    48d4:	0006      	movs	r6, r0
    48d6:	6828      	ldr	r0, [r5, #0]
    48d8:	4698      	mov	r8, r3
    48da:	000f      	movs	r7, r1
    48dc:	4691      	mov	r9, r2
    48de:	f7ff ffed 	bl	48bc <__retarget_lock_acquire_recursive>
    48e2:	4b33      	ldr	r3, [pc, #204]	; (49b0 <__register_exitproc+0xec>)
    48e4:	681c      	ldr	r4, [r3, #0]
    48e6:	23a4      	movs	r3, #164	; 0xa4
    48e8:	005b      	lsls	r3, r3, #1
    48ea:	58e0      	ldr	r0, [r4, r3]
    48ec:	2800      	cmp	r0, #0
    48ee:	d052      	beq.n	4996 <__register_exitproc+0xd2>
    48f0:	6843      	ldr	r3, [r0, #4]
    48f2:	2b1f      	cmp	r3, #31
    48f4:	dc13      	bgt.n	491e <__register_exitproc+0x5a>
    48f6:	1c5a      	adds	r2, r3, #1
    48f8:	9201      	str	r2, [sp, #4]
    48fa:	2e00      	cmp	r6, #0
    48fc:	d128      	bne.n	4950 <__register_exitproc+0x8c>
    48fe:	9a01      	ldr	r2, [sp, #4]
    4900:	3302      	adds	r3, #2
    4902:	009b      	lsls	r3, r3, #2
    4904:	6042      	str	r2, [r0, #4]
    4906:	501f      	str	r7, [r3, r0]
    4908:	6828      	ldr	r0, [r5, #0]
    490a:	f7ff ffd9 	bl	48c0 <__retarget_lock_release_recursive>
    490e:	2000      	movs	r0, #0
    4910:	b003      	add	sp, #12
    4912:	bc3c      	pop	{r2, r3, r4, r5}
    4914:	4690      	mov	r8, r2
    4916:	4699      	mov	r9, r3
    4918:	46a2      	mov	sl, r4
    491a:	46ab      	mov	fp, r5
    491c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    491e:	4b25      	ldr	r3, [pc, #148]	; (49b4 <__register_exitproc+0xf0>)
    4920:	2b00      	cmp	r3, #0
    4922:	d03d      	beq.n	49a0 <__register_exitproc+0xdc>
    4924:	20c8      	movs	r0, #200	; 0xc8
    4926:	0040      	lsls	r0, r0, #1
    4928:	e000      	b.n	492c <__register_exitproc+0x68>
    492a:	bf00      	nop
    492c:	2800      	cmp	r0, #0
    492e:	d037      	beq.n	49a0 <__register_exitproc+0xdc>
    4930:	22a4      	movs	r2, #164	; 0xa4
    4932:	2300      	movs	r3, #0
    4934:	0052      	lsls	r2, r2, #1
    4936:	58a1      	ldr	r1, [r4, r2]
    4938:	6043      	str	r3, [r0, #4]
    493a:	6001      	str	r1, [r0, #0]
    493c:	50a0      	str	r0, [r4, r2]
    493e:	3240      	adds	r2, #64	; 0x40
    4940:	5083      	str	r3, [r0, r2]
    4942:	3204      	adds	r2, #4
    4944:	5083      	str	r3, [r0, r2]
    4946:	3301      	adds	r3, #1
    4948:	9301      	str	r3, [sp, #4]
    494a:	2300      	movs	r3, #0
    494c:	2e00      	cmp	r6, #0
    494e:	d0d6      	beq.n	48fe <__register_exitproc+0x3a>
    4950:	009a      	lsls	r2, r3, #2
    4952:	4692      	mov	sl, r2
    4954:	4482      	add	sl, r0
    4956:	464a      	mov	r2, r9
    4958:	2188      	movs	r1, #136	; 0x88
    495a:	4654      	mov	r4, sl
    495c:	5062      	str	r2, [r4, r1]
    495e:	22c4      	movs	r2, #196	; 0xc4
    4960:	0052      	lsls	r2, r2, #1
    4962:	4691      	mov	r9, r2
    4964:	4481      	add	r9, r0
    4966:	464a      	mov	r2, r9
    4968:	3987      	subs	r1, #135	; 0x87
    496a:	4099      	lsls	r1, r3
    496c:	6812      	ldr	r2, [r2, #0]
    496e:	468b      	mov	fp, r1
    4970:	430a      	orrs	r2, r1
    4972:	4694      	mov	ip, r2
    4974:	464a      	mov	r2, r9
    4976:	4661      	mov	r1, ip
    4978:	6011      	str	r1, [r2, #0]
    497a:	2284      	movs	r2, #132	; 0x84
    497c:	4641      	mov	r1, r8
    497e:	0052      	lsls	r2, r2, #1
    4980:	50a1      	str	r1, [r4, r2]
    4982:	2e02      	cmp	r6, #2
    4984:	d1bb      	bne.n	48fe <__register_exitproc+0x3a>
    4986:	0002      	movs	r2, r0
    4988:	465c      	mov	r4, fp
    498a:	328d      	adds	r2, #141	; 0x8d
    498c:	32ff      	adds	r2, #255	; 0xff
    498e:	6811      	ldr	r1, [r2, #0]
    4990:	430c      	orrs	r4, r1
    4992:	6014      	str	r4, [r2, #0]
    4994:	e7b3      	b.n	48fe <__register_exitproc+0x3a>
    4996:	0020      	movs	r0, r4
    4998:	304d      	adds	r0, #77	; 0x4d
    499a:	30ff      	adds	r0, #255	; 0xff
    499c:	50e0      	str	r0, [r4, r3]
    499e:	e7a7      	b.n	48f0 <__register_exitproc+0x2c>
    49a0:	6828      	ldr	r0, [r5, #0]
    49a2:	f7ff ff8d 	bl	48c0 <__retarget_lock_release_recursive>
    49a6:	2001      	movs	r0, #1
    49a8:	4240      	negs	r0, r0
    49aa:	e7b1      	b.n	4910 <__register_exitproc+0x4c>
    49ac:	20000488 	.word	0x20000488
    49b0:	00004ba8 	.word	0x00004ba8
    49b4:	00000000 	.word	0x00000000
    49b8:	682f2e2e 	.word	0x682f2e2e
    49bc:	732f6c61 	.word	0x732f6c61
    49c0:	682f6372 	.word	0x682f6372
    49c4:	695f6c61 	.word	0x695f6c61
    49c8:	6d5f6332 	.word	0x6d5f6332
    49cc:	6e79735f 	.word	0x6e79735f
    49d0:	00632e63 	.word	0x00632e63
    49d4:	682f2e2e 	.word	0x682f2e2e
    49d8:	732f6c61 	.word	0x732f6c61
    49dc:	682f6372 	.word	0x682f6372
    49e0:	695f6c61 	.word	0x695f6c61
    49e4:	00632e6f 	.word	0x00632e6f
    49e8:	682f2e2e 	.word	0x682f2e2e
    49ec:	732f6c61 	.word	0x732f6c61
    49f0:	682f6372 	.word	0x682f6372
    49f4:	735f6c61 	.word	0x735f6c61
    49f8:	6d5f6970 	.word	0x6d5f6970
    49fc:	6e79735f 	.word	0x6e79735f
    4a00:	00632e63 	.word	0x00632e63
    4a04:	682f2e2e 	.word	0x682f2e2e
    4a08:	752f6c61 	.word	0x752f6c61
    4a0c:	736c6974 	.word	0x736c6974
    4a10:	6372732f 	.word	0x6372732f
    4a14:	6974752f 	.word	0x6974752f
    4a18:	6c5f736c 	.word	0x6c5f736c
    4a1c:	2e747369 	.word	0x2e747369
    4a20:	00000063 	.word	0x00000063
    4a24:	682f2e2e 	.word	0x682f2e2e
    4a28:	652f6c70 	.word	0x652f6c70
    4a2c:	682f6369 	.word	0x682f6369
    4a30:	655f6c70 	.word	0x655f6c70
    4a34:	632e6369 	.word	0x632e6369
    4a38:	00000000 	.word	0x00000000

00004a3c <_map>:
    4a3c:	00000001 00000021 00000008 00000028     ....!.......(...
    4a4c:	0000000a 0000000a 0000000e 0000003e     ............>...
    4a5c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    4a6c:	65735f6c 6d6f6372 0000632e              l_sercom.c..

00004a78 <_i2cms>:
    4a78:	00000002 00200014 00000100 00003231     ...... .....12..
    4a88:	00d70000 02dc6c00 00000004 00200014     .....l........ .
    4a98:	00000100 00003231 00d70000 02dc6c00     ....12.......l..

00004aa8 <sercomspi_regs>:
    4aa8:	0020000c 00020000 00000000 01ff0003     .. .............
    4ab8:	20000c00 02000000 00000000 ff000300     ... ............
    4ac8:	000c0101 00007020 00000002 00050000     .... p..........
    4ad8:	000501ff 00004a25 00000804              ....%J......

00004ae4 <_usb_ep_cfgs>:
    4ae4:	20000550 00000000 00000040 20000590     P.. ....@...... 
    4af4:	00000000 00000040 200005d0 00000000     ....@...... ....
    4b04:	00000040                                @...

00004b08 <customer_hid_report>:
    4b08:	09ffff06 0901a101 15030902 00ff2600     .............&..
    4b18:	40950875 04090281 00150509 7500ff26     u..@........&..u
    4b28:	91409508 09060902 26001507 087500ff     ..@........&..u.
    4b38:	02b10495 000000c0 00003fca 00003fa6     .........?...?..
    4b48:	00003fca 00003fac 00003fca 00003f76     .?...?...?..v?..
    4b58:	00003fca 00003fca 00003fca 00003f88     .?...?...?...?..
    4b68:	00003fca 00003fb2 00004256 00004238     .?...?..VB..8B..
    4b78:	0000423e 00004250 00004256 00004256     >B..PB..VB..VB..
    4b88:	00004244 0000424a 752f2e2e 642f6273     DB..JB..../usb/d
    4b98:	63697665 73752f65 2e636462 00000063     evice/usbdc.c...

00004ba8 <_global_impure_ptr>:
    4ba8:	20000060                                `.. 

00004bac <_init>:
    4bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bae:	46c0      	nop			; (mov r8, r8)
    4bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4bb2:	bc08      	pop	{r3}
    4bb4:	469e      	mov	lr, r3
    4bb6:	4770      	bx	lr

00004bb8 <__init_array_start>:
    4bb8:	00004861 	.word	0x00004861

00004bbc <__frame_dummy_init_array_entry>:
    4bbc:	000000dd                                ....

00004bc0 <_fini>:
    4bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bc2:	46c0      	nop			; (mov r8, r8)
    4bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4bc6:	bc08      	pop	{r3}
    4bc8:	469e      	mov	lr, r3
    4bca:	4770      	bx	lr

00004bcc <__fini_array_start>:
    4bcc:	000000b5 	.word	0x000000b5
